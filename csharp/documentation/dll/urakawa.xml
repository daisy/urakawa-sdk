<?xml version="1.0"?>
<doc>
    <assembly>
        <name>urakawa</name>
    </assembly>
    <members>
        <member name="T:urakawa.media.IMediaFactory">
            <summary>
            This is the interface to a factory which creates media objects.
            </summary>
        </member>
        <member name="M:urakawa.media.IMediaFactory.createMedia(urakawa.media.MediaType)">
            <summary>
            Create a default <see cref="T:urakawa.media.IMedia"/> of the given <see cref="T:urakawa.media.MediaType"/>.
            </summary>
            <param localName="type"></param>
            <returns>The created default <see cref="T:urakawa.media.IMedia"/></returns>
        </member>
        <member name="M:urakawa.media.IMediaFactory.createMedia(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.media.IMedia"/> matching a given QName
            </summary>
            <param localName="localName">The local part of the QName</param>
            <param localName="namespaceUri">The namespace uri part of the QName</param>
            <returns>The created <see cref="T:urakawa.media.IMedia"/> or <c>null</c> is the given QName is not supported</returns>
        </member>
        <member name="M:urakawa.media.IMediaFactory.createMediaLocation">
            <summary>
            Creates a <see cref="T:urakawa.media.IMediaLocation"/> of default sub-type
            </summary>
            <returns>The created default <see cref="T:urakawa.media.IMediaLocation"/></returns>
        </member>
        <member name="M:urakawa.media.IMediaFactory.createMediaLocation(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.media.IMediaLocation"/> matching a given QName
            </summary>
            <param localName="localName">The local part of the QName</param>
            <param localName="namespaceUri">The namespace uri part of the QName</param>
            <returns>The creates <see cref="T:urakawa.media.IMediaLocation"/> or <c>null</c> is the given QName is not supported</returns>
        </member>
        <member name="M:urakawa.media.IMediaFactory.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.media.IMediaPresentation"/> associated with <c>this</c>
            </summary>
            <returns>The associated <see cref="T:urakawa.media.IMediaPresentation"/></returns>
        </member>
        <member name="M:urakawa.media.IMediaFactory.setPresentation(urakawa.media.IMediaPresentation)">
            <summary>
            Sets the <see cref="T:urakawa.media.IMediaPresentation"/> associated with <c>this</c>
            </summary>
            <param name="pres">The associated <see cref="T:urakawa.media.IMediaPresentation"/></param>
        </member>
        <member name="T:urakawa.core.ICoreNodeReadOnlyMethods">
            <summary>
            Provides the read-only tree methods of a <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
        </member>
        <member name="M:urakawa.core.ICoreNodeReadOnlyMethods.getChild(System.Int32)">
            <summary>
            Gets the child <see cref="T:urakawa.core.ICoreNode"/> at a given index
            </summary>
            <param localName="index">The given index</param>
            <returns>The child <see cref="T:urakawa.core.ICoreNode"/> at the given index</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="index"/> is out if range, 
            that is not between 0 and <c><see cref="M:urakawa.core.ICoreNodeReadOnlyMethods.getChildCount"/>()-1</c></exception>
        </member>
        <member name="M:urakawa.core.ICoreNodeReadOnlyMethods.indexOf(urakawa.core.ICoreNode)">
            <summary>
            Gets the index of a given child <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <param localName="node">The given child <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The index of the given child</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paranref localName="node"/> is null</exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="node"/> is not a child of the <see cref="T:urakawa.core.ICoreNode"/></exception>
        </member>
        <member name="M:urakawa.core.ICoreNodeReadOnlyMethods.getParent">
            <summary>
            Gets the parent <see cref="T:urakawa.core.ICoreNode"/> of the instance,
            null if the instance is detached from a tree or is the root node of a tree
            </summary>
            <returns>The parent</returns>
        </member>
        <member name="M:urakawa.core.ICoreNodeReadOnlyMethods.getChildCount">
            <summary>
            Gets the number of children
            </summary>
            <returns>The number of children</returns>
        </member>
        <member name="M:urakawa.core.ICoreNodeReadOnlyMethods.copy(System.Boolean,System.Boolean)">
            <summary>
            Make a copy of the node
            </summary>
            <param localName="deep">If true, then include the node's entire subtree.  
            Otherwise, just copy the node itself.</param>
            <param localName="copyProperties">If true, then include the node's properties.</param>
            <returns>A <see cref="T:urakawa.core.ICoreNode"/> containing the copied data.</returns>
        </member>
        <member name="M:urakawa.core.ICoreNodeReadOnlyMethods.copy(System.Boolean)">
            <summary>
            Make a copy of the node
            </summary>
            <param localName="deep">If true, then include the node's entire subtree.  
            Otherwise, just copy the node itself.</param>
            <returns>A <see cref="T:urakawa.core.ICoreNode"/> containing the copied data.</returns>
        </member>
        <member name="M:urakawa.core.ICoreNodeReadOnlyMethods.copy">
            <summary>
            Make a deep copy of the node including properties
            </summary>
            <returns>A <see cref="T:urakawa.core.ICoreNode"/> containing the copied data.</returns>
        </member>
        <member name="M:urakawa.core.ICoreNodeReadOnlyMethods.getNextSibling">
            <summary>
            Gets the next sibling of <c>this</c>
            </summary>
            <returns>The next sibling of <c>this</c> or <c>null</c> if no next sibling exists</returns>
        </member>
        <member name="M:urakawa.core.ICoreNodeReadOnlyMethods.getPreviousSibling">
            <summary>
            Gets the previous sibling of <c>this</c>
            </summary>
            <returns>The previous sibling of <c>this</c> or <c>null</c> if no previous sibling exists</returns>
        </member>
        <member name="M:urakawa.core.ICoreNodeReadOnlyMethods.isSiblingOf(urakawa.core.ICoreNode)">
            <summary>
            Tests if a given <see cref="T:urakawa.core.ICoreNode"/> is a sibling of <c>this</c>
            </summary>
            <param localName="node">The given <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns><c>true</c> if <paramref localName="node"/> is a sibling of <c>this</c>, 
            otherwise<c>false</c></returns>
        </member>
        <member name="M:urakawa.core.ICoreNodeReadOnlyMethods.isAncestorOf(urakawa.core.ICoreNode)">
            <summary>
            Tests if a given <see cref="T:urakawa.core.ICoreNode"/> is an ancestor of <c>this</c>
            </summary>
            <param localName="node">The given <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns><c>true</c> if <paramref localName="node"/> is an ancestor of <c>this</c>, 
            otherwise<c>false</c></returns>
        </member>
        <member name="M:urakawa.core.ICoreNodeReadOnlyMethods.isDescendantOf(urakawa.core.ICoreNode)">
            <summary>
            Tests if a given <see cref="T:urakawa.core.ICoreNode"/> is a descendant of <c>this</c>
            </summary>
            <param localName="node">The given <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns><c>true</c> if <paramref localName="node"/> is a descendant of <c>this</c>, 
            otherwise<c>false</c></returns>
        </member>
        <member name="T:urakawa.properties.channel.IChannelFactory">
            <summary>
            Interface for an abstract factory creating <see cref="T:urakawa.properties.channel.IChannel"/>s
            </summary>
        </member>
        <member name="M:urakawa.properties.channel.IChannelFactory.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.properties.channel.IChannelPresentation"/> associated with <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.properties.channel.IChannelPresentation"/></returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when no <see cref="T:urakawa.properties.channel.IChannelPresentation"/> has been associated with <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.IChannelFactory.setPresentation(urakawa.properties.channel.IChannelPresentation)">
            <summary>
            Associates a <see cref="T:urakawa.properties.channel.IChannelPresentation"/> with <c>this</c>
            </summary>
            <param name="pres">The <see cref="T:urakawa.properties.channel.IChannelPresentation"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when trying to associate a <c>null</c> <see cref="T:urakawa.properties.channel.IChannelPresentation"/> with <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.IChannelFactory.getChannelsManager">
            <summary>
            Gets the <see cref="T:urakawa.properties.channel.IChannelsManager"/> associated with <see cref="T:urakawa.properties.channel.IChannel"/>s created
            by the <see cref="T:urakawa.properties.channel.IChannelFactory"/>.
            Convenience for <c>getPresentation().getChannelsManager()</c>
            </summary>
            <returns>The <see cref="T:urakawa.properties.channel.IChannelsManager"/></returns>
        </member>
        <member name="M:urakawa.properties.channel.IChannelFactory.createChannel(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:urakawa.properties.channel.IChannel"/> matching a given QName
            </summary>
            <param localName="localName">The local part of the QName</param>
            <param localName="namespaceUri">The namespace uri part of the QName</param>
            <returns>The created <see cref="T:urakawa.properties.channel.IChannel"/> or <c>null</c> is the given QName is not supported</returns>
        </member>
        <member name="T:urakawa.properties.channel.ClearChannelCoreNodeVisitor">
            <summary>
            <see cref="T:urakawa.core.visitor.ICoreNodeVisitor"/> for clearing all media within a <see cref="T:urakawa.properties.channel.IChannel"/>
            </summary>
        </member>
        <member name="T:urakawa.core.visitor.ICoreNodeVisitor">
            <summary>
            Interface for a visitor accepted by <see cref="T:urakawa.core.ICoreNode"/>s
            </summary>
        </member>
        <member name="M:urakawa.core.visitor.ICoreNodeVisitor.preVisit(urakawa.core.ICoreNode)">
            <summary>
            Called before visiting the child <see cref="T:urakawa.core.ICoreNode"/>s
            </summary>
            <param localName="node">The <see cref="T:urakawa.core.ICoreNode"/> currently being visited</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the child <see cref="T:urakawa.core.ICoreNode"/>s should be visited:
            If <c>true</c> is returned, the children are visited, 
            if <c>false</c> is returned, the children are not visited</returns>
        </member>
        <member name="M:urakawa.core.visitor.ICoreNodeVisitor.postVisit(urakawa.core.ICoreNode)">
            <summary>
            Called after visiting the child <see cref="T:urakawa.core.ICoreNode"/>s
            </summary>
            <param localName="node">The <see cref="T:urakawa.core.ICoreNode"/> currently being visited</param>
        </member>
        <member name="M:urakawa.properties.channel.ClearChannelCoreNodeVisitor.#ctor(urakawa.properties.channel.IChannel)">
            <summary>
            Constructor setting the <see cref="T:urakawa.properties.channel.IChannel"/> to clear
            </summary>
            <param localName="chToClear"></param>
        </member>
        <member name="M:urakawa.properties.channel.ClearChannelCoreNodeVisitor.preVisit(urakawa.core.ICoreNode)">
            <summary>
            Pre-visit action: If <see cref="T:urakawa.media.IMedia"/> is present in <see cref="T:urakawa.properties.channel.IChannel"/> <see cref="P:urakawa.properties.channel.ClearChannelCoreNodeVisitor.ChannelToClear"/>,
            this is removed and the child <see cref="T:urakawa.core.ICoreNode"/>s are not visited
            </summary>
            <param localName="node">The <see cref="T:urakawa.core.ICoreNode"/> to visit</param>
            <returns>
            <c>false</c> if <see cref="T:urakawa.media.IMedia"/> is found if <see cref="T:urakawa.properties.channel.IChannel"/> <see cref="P:urakawa.properties.channel.ClearChannelCoreNodeVisitor.ChannelToClear"/>,
            <c>false</c> else
            </returns>
        </member>
        <member name="M:urakawa.properties.channel.ClearChannelCoreNodeVisitor.postVisit(urakawa.core.ICoreNode)">
            <summary>
            Post-visit action: Nothing is done here
            </summary>
            <param localName="node">The <see cref="T:urakawa.core.ICoreNode"/> to visit</param>
        </member>
        <member name="P:urakawa.properties.channel.ClearChannelCoreNodeVisitor.ChannelToClear">
            <summary>
            Gets the <see cref="T:urakawa.properties.channel.IChannel"/> within which to 
            clear <see cref="T:urakawa.media.IMedia"/>
            </summary>
        </member>
        <member name="T:urakawa.media.data.utillities.SequenceStream">
            <summary>
            A <see cref="T:System.IO.Stream"/> that supports reading from a sequence of source <see cref="T:System.IO.Stream"/>s
            as if they were one.
            </summary>
        </member>
        <member name="M:urakawa.media.data.utillities.SequenceStream.#ctor(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Constructor supplying the sequence of source <see cref="T:System.IO.Stream"/>s
            </summary>
            <param name="ss">
            The sequence of source <see cref="T:System.IO.Stream"/>s. 
            Must contain at least one source <see cref="T:System.IO.Stream"/>
            </param>
        </member>
        <member name="M:urakawa.media.data.utillities.SequenceStream.Flush">
            <summary>
            Does nothing since a <see cref="T:urakawa.media.data.utillities.SubStream"/> is read-only
            </summary>
        </member>
        <member name="M:urakawa.media.data.utillities.SequenceStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current <see cref="T:urakawa.media.data.utillities.SequenceStream"/> and 
            advances the position within the stream by the number of bytes read
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, 
            the buffer contains the specified byte array with the values between 
            <c><paramref name="offset"/></c> and <c>(<paramref name="offset"/> + <paramref name="count"/> - 1)</c> 
            replaced by the bytes read from the current <see cref="T:urakawa.media.data.utillities.SequenceStream"/>.
            </param>
            <param name="offset">
            The zero-based byte offset in <paramref name="buffer"/> 
            at which to begin storing the data read from the current <see cref="T:urakawa.media.data.utillities.SequenceStream"/>.
            </param>
            <param name="count">The maximum number of bytes to be read from the current <see cref="T:urakawa.media.data.utillities.SequenceStream"/>.</param>
            <returns>The number of <see cref="T:System.Byte"/>s read</returns>
        </member>
        <member name="M:urakawa.media.data.utillities.SequenceStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the <see cref="P:urakawa.media.data.utillities.SequenceStream.Position"/> within the current stream.
            </summary>
            <param name="offset">
            A byte <paramref name="offset"/> relative to the origin parameter.
            </param>
            <param name="origin">
            A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.
            </param>
            <returns>The new <see cref="P:urakawa.media.data.utillities.SequenceStream.Position"/> within the current stream.</returns>
        </member>
        <member name="M:urakawa.media.data.utillities.SequenceStream.SetLength(System.Int64)">
            <summary>
            Sets the <see cref="P:urakawa.media.data.utillities.SequenceStream.Length"/> of the <see cref="T:urakawa.media.data.utillities.SequenceStream"/>.
            Since a <see cref="T:urakawa.media.data.utillities.SequenceStream"/> is read-only, 
            calling this method will thorw an <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="value">The new <see cref="P:urakawa.media.data.utillities.SequenceStream.Length"/> </param>
        </member>
        <member name="M:urakawa.media.data.utillities.SequenceStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            Since a <see cref="T:urakawa.media.data.utillities.SequenceStream"/> is read only, 
            calling this method will thorw an <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="buffer">
            An array of <see cref="T:System.Byte"/>s. 
            This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.
            </param>
            <param name="offset">
            The zero-based byte offset in <paramref name="buffer"/> at which to begin copying <see cref="T:System.Byte"/>s 
            to the current stream.
            </param>
            <param name="count">The number of <see cref="T:System.Byte"/>s to be written to the current stream.</param>
        </member>
        <member name="M:urakawa.media.data.utillities.SequenceStream.Close">
            <summary>
            Closes the <see cref="T:urakawa.media.data.utillities.SequenceStream"/> including all it's source <see cref="T:System.IO.Stream"/>s
            </summary>
        </member>
        <member name="P:urakawa.media.data.utillities.SequenceStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading. 
            </summary>
        </member>
        <member name="P:urakawa.media.data.utillities.SequenceStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking. 
            </summary>
        </member>
        <member name="P:urakawa.media.data.utillities.SequenceStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing - always returns <c>false</c>
            </summary>
        </member>
        <member name="P:urakawa.media.data.utillities.SequenceStream.Length">
            <summary>
            Gets the length in <see cref="T:System.Byte"/>s of the current <see cref="T:urakawa.media.data.utillities.SequenceStream"/>
            </summary>
        </member>
        <member name="P:urakawa.media.data.utillities.SequenceStream.Position">
            <summary>
            Gets or sets the position within the current <see cref="T:urakawa.media.data.utillities.SequenceStream"/>. 
            </summary>
        </member>
        <member name="T:urakawa.media.VideoMedia">
            <summary>
            VideoMedia is the video object.
            It is time-based, comes from an external source, and has a visual presence.
            </summary>
        </member>
        <member name="T:urakawa.media.IVideoMedia">
            <summary>
            Video media is both time-based and has a visual presence
            </summary>
        </member>
        <member name="T:urakawa.media.IMedia">
            <summary>
            This is the base interface for all media-related classes and interfaces.  
            Media is continuous (time-based) or discrete (static), and is of a specific type.
            </summary>
        </member>
        <member name="T:urakawa.xuk.IXukAble">
            <summary>
            The interface to implement for serializing the core model in a roundtrip safe format.
            </summary>
        </member>
        <member name="M:urakawa.xuk.IXukAble.XukIn(System.Xml.XmlReader)">
            <summary>
            The implementation of XUKIn is expected to read and remove all tags
            up to and including the closing tag matching the element the reader was at when passed to it.
            The call is expected to be forwarded to any owned element, in effect making it a recursive read of the XUK file
            </summary>
            <param localName="source">The XmlReader to read from</param>
            <returns><c>true</c> is all things were deserialized as expected, <c>false</c> if anything unexpected was encountered</returns>
        </member>
        <member name="M:urakawa.xuk.IXukAble.XukOut(System.Xml.XmlWriter)">
            <summary>
            The implementation of XukOut is expected to write a tag for the object it is called on.
            The call should be forwarded to any owned object, making it in effect be a recursive write
            </summary>
            <param localName="destination"></param>
            <returns><c>true</c> is all things were serialized as expected, <c>false</c> if anything unexpected was encountered</returns>
        </member>
        <member name="M:urakawa.xuk.IXukAble.getXukLocalName">
            <summary>
            Gets the local localName part of the QName identifying the type of the instance
            </summary>
            <returns>The local localName</returns>
        </member>
        <member name="M:urakawa.xuk.IXukAble.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName identifying the type of the instance
            </summary>
            <returns>The namespace uri</returns>
        </member>
        <member name="T:urakawa.IValueEquatable`1">
            <summary>
            Defines a generalized method that classes must implement to create type-specific method for 
            determining value equality of instances
            </summary>
            <typeparam name="T">The type</typeparam>
        </member>
        <member name="M:urakawa.IValueEquatable`1.ValueEquals(`0)">
            <summary>
            Determines of <c>this</c> has the same value as a given other instance
            </summary>
            <param name="other">The other instance</param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result</returns>
        </member>
        <member name="M:urakawa.media.IMedia.getMediaFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.IMediaFactory"/> associated with the <see cref="T:urakawa.media.IMedia"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.IMediaFactory"/></returns>
        </member>
        <member name="M:urakawa.media.IMedia.isContinuous">
            <summary>
            Determines if the <see cref="T:urakawa.media.IMedia"/> is continuous
            </summary>
            <returns><c>true</c> if the <see cref="T:urakawa.media.IMedia"/> is continuous, <c>false</c> else</returns>
        </member>
        <member name="M:urakawa.media.IMedia.isDiscrete">
            <summary>
            Convenience Equivalent to <c>!<see cref="M:urakawa.media.IMedia.isContinuous"/>()</c>
            </summary>
            <returns><c>!<see cref="M:urakawa.media.IMedia.isContinuous"/>()</c></returns>
        </member>
        <member name="M:urakawa.media.IMedia.isSequence">
            <summary>
            tells you if the media object itself is a sequence
            does not tell you if your individual media object is part of a sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.IMedia.getMediaType">
            <summary>
            Gets the <see cref="T:urakawa.media.MediaType"/> of the <see cref="T:urakawa.media.IMedia"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.MediaType"/></returns>
        </member>
        <member name="M:urakawa.media.IMedia.copy">
            <summary>
            Gets a copy of the <see cref="T:urakawa.media.IMedia"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:urakawa.media.ILocated">
            <summary>
            This interface associates a media object with its source location
            </summary>
        </member>
        <member name="M:urakawa.media.ILocated.getLocation">
            <summary>
            Get the location of the external media
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.ILocated.setLocation(urakawa.media.IMediaLocation)">
            <summary>
            Set the external media's location.
            </summary>
            <param localName="location"></param>
        </member>
        <member name="T:urakawa.media.IClipped">
            <summary>
            This interface is for referring to time-based segments of external media
            </summary>
        </member>
        <member name="M:urakawa.media.IClipped.getClipDuration">
            <summary>
            Return the duration of the clip.
            </summary>
            <returns>The duration</returns>
        </member>
        <member name="M:urakawa.media.IClipped.getClipBegin">
            <summary>
            Get the begin <see cref="T:urakawa.media.timing.ITime"/> for the clip.
            </summary>
            <returns>The begin <see cref="T:urakawa.media.timing.ITime"/></returns>
        </member>
        <member name="M:urakawa.media.IClipped.getClipEnd">
            <summary>
            Get the end <see cref="T:urakawa.media.timing.ITime"/> for the clip.
            </summary>
            <returns>The end <see cref="T:urakawa.media.timing.ITime"/></returns>
        </member>
        <member name="M:urakawa.media.IClipped.setClipBegin(urakawa.media.timing.ITime)">
            <summary>
            Set the begin <see cref="T:urakawa.media.timing.ITime"/> for the clip.
            </summary>
            <param localName="beginPoint">The new begin <see cref="T:urakawa.media.timing.ITime"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <c><paramref localName="beginPoint"/></c>
            is not between <c>0 and <see cref="M:urakawa.media.IClipped.getClipEnd"/>()</c>
            </exception>
        </member>
        <member name="M:urakawa.media.IClipped.setClipEnd(urakawa.media.timing.ITime)">
            <summary>
            Set the end <see cref="T:urakawa.media.timing.ITime"/> for the clip.
            </summary>
            <param localName="endPoint">The new end <see cref="T:urakawa.media.timing.ITime"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <c><paramref localName="beginPoint"/>&gt;<see cref="M:urakawa.media.IClipped.getClipEnd"/>()</c>
            </exception>
        </member>
        <member name="M:urakawa.media.IClipped.split(urakawa.media.timing.ITime)">
            <summary>
            Split <c>this</c> at the given point in time.
            </summary>
            <param localName="splitPoint">The <see cref="T:urakawa.media.timing.ITime"/> at which to split</param>
            <returns></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="splitPoint"/> is not between
            <c><see cref="M:urakawa.media.IClipped.getClipBegin"/>()</c> and <c><see cref="M:urakawa.media.IClipped.getClipEnd"/>()</c>
            </exception>
        </member>
        <member name="T:urakawa.media.ISized">
            <summary>
            Summary description for ISized.
            </summary>
        </member>
        <member name="M:urakawa.media.ISized.getWidth">
            <summary>
            Get the image width.
            </summary>
            <returns>The width</returns>
        </member>
        <member name="M:urakawa.media.ISized.getHeight">
            <summary>
            Get the image height.
            </summary>
            <returns>The height</returns>
        </member>
        <member name="M:urakawa.media.ISized.setWidth(System.Int32)">
            <summary>
            Sets the image width
            </summary>
            <param localName="newHeight">The new width</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new width is negative
            </exception>
        </member>
        <member name="M:urakawa.media.ISized.setHeight(System.Int32)">
            <summary>
            Sets the image height
            </summary>
            <param localName="newHeight">The new height</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new height is negative
            </exception>
        </member>
        <member name="M:urakawa.media.VideoMedia.#ctor(urakawa.media.IMediaFactory)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.media.VideoMedia.isContinuous">
            <summary>
            This always returns true, because
            video media is always considered continuous
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.isDiscrete">
            <summary>
            This always returns false, because
            video media is never considered discrete
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.isSequence">
            <summary>
            This always returns false, because
            a single media object is never considered to be a sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.getMediaType">
            <summary>
            Return the urakawa media type
            </summary>
            <returns>always returns <see cref="F:urakawa.media.MediaType.VIDEO"/></returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.copy">
            <summary>
            Copy function which returns an <see cref="T:urakawa.media.VideoMedia"/> object
            </summary>
            <returns>a copy of this</returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.getWidth">
            <summary>
            Return the visual media's width
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.getHeight">
            <summary>
            Return the visual media's height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.setWidth(System.Int32)">
            <summary>
            Set the visual media's width
            </summary>
            <param localName="width"></param>
        </member>
        <member name="M:urakawa.media.VideoMedia.setHeight(System.Int32)">
            <summary>
            Set the visual media's height
            </summary>
            <param localName="height"></param>
        </member>
        <member name="M:urakawa.media.VideoMedia.XukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads data from the attributes of a xuk xml element
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the attributes were succesfully read</returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.XukIn(System.Xml.XmlReader)">
            <summary>
            Fill in audio data from an XML source.
            Assume that the XmlReader cursor is at the opening audio tag.
            </summary>
            <param localName="source">the input XML source</param>
            <returns>true or false, depending on whether the data could be processed</returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.XukOutAttributes(System.Xml.XmlWriter)">
            <summary>
            Writes the attributes of the xuk xml element for <c>this</c>
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the attributes were succesfully written</returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.XukOut(System.Xml.XmlWriter)">
            <summary>
            The opposite of <see cref="M:urakawa.media.VideoMedia.XukIn(System.Xml.XmlReader)"/>, this function writes the object's data
            to an XML file
            </summary>
            <param localName="destination">the XML source for outputting data</param>
            <returns>so far, this function always returns true</returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.getXukLocalName">
            <summary>
            Gets the local localName part of the QName representing a <see cref="T:urakawa.media.VideoMedia"/> in Xuk
            </summary>
            <returns>The local localName part</returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName representing a <see cref="T:urakawa.media.VideoMedia"/> in Xuk
            </summary>
            <returns>The namespace uri part</returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.getMediaFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.IMediaFactory"/> associated with <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.IMediaFactory"/></returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.getLocation">
            <summary>
            Gets the <see cref="T:urakawa.media.IMediaLocation"/> of <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.IMediaLocation"/></returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.setLocation(urakawa.media.IMediaLocation)">
            <summary>
            Sets the <see cref="T:urakawa.media.IMediaLocation"/> of <c>this</c>
            </summary>
            <param name="location">The new <see cref="T:urakawa.media.IMediaLocation"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">Thrown when the new <see cref="T:urakawa.media.IMediaLocation"/> is null</exception>
        </member>
        <member name="M:urakawa.media.VideoMedia.getClipDuration">
            <summary>
            Gets the duration of <c>this</c>
            </summary>
            <returns>The duration</returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.getClipBegin">
            <summary>
            Gets the clip begin <see cref="T:urakawa.media.timing.ITime"/> of <c>this</c>
            </summary>
            <returns>The clip begin <see cref="T:urakawa.media.timing.ITime"/></returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.getClipEnd">
            <summary>
            Gets the clip end <see cref="T:urakawa.media.timing.ITime"/> of <c>this</c>
            </summary>
            <returns>The clip end <see cref="T:urakawa.media.timing.ITime"/></returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.setClipBegin(urakawa.media.timing.ITime)">
            <summary>
            Sets the clip begin <see cref="T:urakawa.media.timing.ITime"/>
            </summary>
            <param name="beginPoint">The new clip begin <see cref="T:urakawa.media.timing.ITime"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when te new clip begin <see cref="T:urakawa.media.timing.ITime"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new begin point is beyond the current clip end
            </exception>
        </member>
        <member name="M:urakawa.media.VideoMedia.setClipEnd(urakawa.media.timing.ITime)">
            <summary>
            Sets the clip begin <see cref="T:urakawa.media.timing.ITime"/>
            </summary>
            <param name="endPoint">The new clip end <see cref="T:urakawa.media.timing.ITime"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when te new clip end <see cref="T:urakawa.media.timing.ITime"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new end point is before the current clip begin
            </exception>
        </member>
        <member name="M:urakawa.media.VideoMedia.split(urakawa.media.timing.ITime)">
            <summary>
            Splits <c>this</c> at a given split point in <see cref="T:urakawa.media.timing.ITime"/>. 
            The retains the clip between clip begin and the split point and a new <see cref="T:urakawa.media.IVideoMedia"/>
            is created consisting of the clip from the split point to clip end
            </summary>
            <param name="splitPoint">The split point</param>
            <returns>The new <see cref="T:urakawa.media.IVideoMedia"/> containing the latter prt of the clip</returns>
        </member>
        <member name="M:urakawa.media.VideoMedia.ValueEquals(urakawa.media.IMedia)">
            <summary>
            Conpares <c>this</c> with a given other <see cref="T:urakawa.media.IMedia"/> for equality
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.IMedia"/></param>
            <returns><c>true</c> if equal, otherwise <c>false</c></returns>
        </member>
        <member name="T:urakawa.media.timing.Time">
            <summary>
            The Time object represents a timestamp.  
            </summary>
        </member>
        <member name="T:urakawa.media.timing.ITime">
            <summary>
            A simple interface for a measure of time.
            </summary>
        </member>
        <member name="M:urakawa.media.timing.ITime.isNegativeTimeOffset">
            <summary>
            Determines if the time offset is negative.
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.timing.ITime.copy">
            <summary>
            Copy this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.timing.ITime.getTimeDelta(urakawa.media.timing.ITime)">
            <summary>
            Gets the (signed) <see cref="T:urakawa.media.timing.ITimeDelta"/> between a given <see cref="T:urakawa.media.timing.ITime"/> and <c>this</c>,
            that is <c>this-<paramref localName="t"/></c>
            </summary>
            <param localName="t">The given <see cref="T:urakawa.media.timing.ITime"/></param>
            <returns>
            The difference as an <see cref="T:urakawa.media.timing.ITimeDelta"/>
            </returns>
        </member>
        <member name="M:urakawa.media.timing.ITime.getTimeAsMilliseconds">
            <summary>
            Gets number of milliseconds equivalent of the <see cref="T:urakawa.media.timing.ITime"/>
            </summary>
            <returns>The number of milliseconds</returns>
        </member>
        <member name="M:urakawa.media.timing.ITime.getTimeAsMillisecondFloat">
            <summary>
            Gets the millisecond floating point number equivalent of the <see cref="T:urakawa.media.timing.ITime"/>
            </summary>
            <returns>The millisecond floating point number</returns>
        </member>
        <member name="M:urakawa.media.timing.ITime.getTimeAsTimeSpan">
            <summary>
            Gets the <see cref="T:System.TimeSpan"/> equivalent of the <see cref="T:urakawa.media.timing.ITime"/>
            </summary>
            <returns>The <see cref="T:System.TimeSpan"/> equavalent</returns>
        </member>
        <member name="M:urakawa.media.timing.ITime.setTime(System.Int64)">
            <summary>
            Sets the <see cref="T:urakawa.media.timing.ITime"/> from an integral number of milliseconds
            </summary>
            <param localName="timeAsMS">The number of milliseconds</param>
        </member>
        <member name="M:urakawa.media.timing.ITime.setTime(System.Double)">
            <summary>
            Sets the <see cref="T:urakawa.media.timing.ITime"/> from a floating point mulliseconds value
            </summary>
            <param localName="timeAsMSF">The milliseconds floating point number</param>
        </member>
        <member name="M:urakawa.media.timing.ITime.setTime(System.TimeSpan)">
            <summary>
            Sets the <see cref="T:urakawa.media.timing.ITime"/> from a <see cref="T:System.TimeSpan"/>
            </summary>
            <param name="timeAsTS">The <see cref="T:System.TimeSpan"/></param>
        </member>
        <member name="M:urakawa.media.timing.ITime.addTime(urakawa.media.timing.ITime)">
            <summary>
            Adds another <see cref="T:urakawa.media.timing.ITime"/> to the current <see cref="T:urakawa.media.timing.ITime"/>
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.timing.ITime"/></param>
        </member>
        <member name="M:urakawa.media.timing.ITime.addTimeDelta(urakawa.media.timing.ITimeDelta)">
            <summary>
            Adds a <see cref="T:urakawa.media.timing.ITimeDelta"/> to the current <see cref="T:urakawa.media.timing.ITime"/>
            </summary>
            <param name="other">The <see cref="T:urakawa.media.timing.ITimeDelta"/> to add</param>
        </member>
        <member name="M:urakawa.media.timing.ITime.isGreaterThan(urakawa.media.timing.ITime)">
            <summary>
            Determines is <c>this</c> is greater than a given other <see cref="T:urakawa.media.timing.ITime"/>.
            </summary>
            <param localName="otherTime">The other <see cref="T:urakawa.media.timing.ITime"/></param>
            <returns>
            <c>true</c> if <c>this</c> is greater than <paramref localName="otherTime"/>, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:urakawa.media.timing.ITime.isLessThan(urakawa.media.timing.ITime)">
            <summary>
            Determines is <c>this</c> is less than a given other <see cref="T:urakawa.media.timing.ITime"/>.
            </summary>
            <param localName="otherTime">The other <see cref="T:urakawa.media.timing.ITime"/></param>
            <returns>
            <c>true</c> if <c>this</c> is less than <paramref localName="otherTime"/>, otherwise <c>false</c>
            </returns>
            <remarks>
            <c>isLessThan(t) = t.isGreaterThan(this)</c> for any <see cref="T:urakawa.media.timing.ITime"/> <c>t</c>
            </remarks>
        </member>
        <member name="M:urakawa.media.timing.ITime.isEqualTo(urakawa.media.timing.ITime)">
            <summary>
            Determines is <c>this</c> value equal to a given other <see cref="T:urakawa.media.timing.ITime"/>
            </summary>
            <param localName="otherTime">The other <see cref="T:urakawa.media.timing.ITime"/></param>
            <returns>
            <c>true</c> if <c>this</c> and <paramref localName="otherTime"/> are value equal,
            otherwise <c>false</c>
            </returns>
            <remarks>
            <c>isEqualTo(t) = !(isGreaterThan(t) || t.isGreaterThan(this))</c>
            for any <see cref="T:urakawa.media.timing.ITime"/> <c>t</c>
            </remarks>
        </member>
        <member name="M:urakawa.media.timing.Time.#ctor">
            <summary>
            Default constructor initializing the instance to 0
            </summary>
        </member>
        <member name="M:urakawa.media.timing.Time.#ctor(System.Int64)">
            <summary>
            Constructor initializing the instance with a given number of milliseconds
            </summary>
            <param localName="val">The given number of milliseconds</param>
        </member>
        <member name="M:urakawa.media.timing.Time.#ctor(System.Double)">
            <summary>
            Constructor initializing the instance with a given number of milliseconds
            </summary>
            <param localName="val">The given number of milliseconds</param>
        </member>
        <member name="M:urakawa.media.timing.Time.#ctor(System.TimeSpan)">
            <summary>
            Constructor initializing the instance with a given <see cref="T:System.TimeSpan"/>
            value
            </summary>
            <param localName="val">The given <see cref="T:System.TimeSpan"/> value</param>
        </member>
        <member name="M:urakawa.media.timing.Time.#ctor(System.String)">
            <summary>
            Constructor initializing the instance with a given <see cref="T:System.String"/>
            representation of time.
            <see cref="M:urakawa.media.timing.Time.ToString"/> member method of a description of the format 
            of the string representation.
            </summary>
            <param localName="val">The <see cref="T:System.String"/> representation</param>
        </member>
        <member name="M:urakawa.media.timing.Time.getTime">
            <summary>
            Returns the <see cref="T:System.TimeSpan"/> equivalent of the instance
            </summary>
            <returns>The <see cref="T:System.TimeSpan"/> equivalent</returns>
        </member>
        <member name="M:urakawa.media.timing.Time.ToString">
            <summary>
            Gets a string representation of the <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <returns>The string representation</returns>
            <remarks>
            The format of the string representation [-][d.]hh:mm:ss[.f],
            where d is a number of days, hh is two-digit hours between 00 and 23,
            mm is two-digit minutes between 00 and 59, 
            ss is two-digit seconds between 00 and 59 
            and where f is the second fraction with between 1 and 7 digits
            </remarks>
        </member>
        <member name="M:urakawa.media.timing.Time.Parse(System.String)">
            <summary>
            Parses a string representation of a <see cref="T:urakawa.media.timing.Time"/>. 
            See <see cref="M:urakawa.media.timing.Time.ToString"/> for a description of the format of the string representation
            </summary>
            <param localName="stringRepresentation">The string representation</param>
            <returns>The parsed <see cref="T:urakawa.media.timing.Time"/></returns>
            <exception cref="T:urakawa.exception.TimeStringRepresentationIsInvalidException">
            Thrown then the given string representation is not valid
            </exception>
        </member>
        <member name="M:urakawa.media.timing.Time.isNegativeTimeOffset">
            <summary>
            Determines if the instance represents a negative time value
            </summary>
            <returns><c>true</c> if negative, <c>false</c> else</returns>
        </member>
        <member name="M:urakawa.media.timing.Time.copy">
            <summary>
            Creates a copy of the <see cref="T:urakawa.media.timing.Time"/> instance
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.timing.Time.getTimeDelta(urakawa.media.timing.ITime)">
            <summary>
            Gets the (signed) <see cref="T:urakawa.media.timing.ITimeDelta"/> between a given <see cref="T:urakawa.media.timing.ITime"/> and <c>this</c>,
            that is <c>this-<paramref localName="t"/></c>
            </summary>
            <param localName="t">The given <see cref="T:urakawa.media.timing.ITime"/></param>
            <returns>
            The difference as an <see cref="T:urakawa.media.timing.ITimeDelta"/>
            </returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="t"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.timing.Time.getTimeAsMilliseconds">
            <summary>
            Gets the best approximation of the <see cref="T:urakawa.media.timing.Time"/> in whole milliseconds
            </summary>
            <returns>The number of milliseconds</returns>
        </member>
        <member name="M:urakawa.media.timing.Time.getTimeAsMillisecondFloat">
            <summary>
            Gets the <see cref="T:urakawa.media.timing.Time"/> as a floating point millisecond value
            </summary>
            <returns>The foaling point millisecond value</returns>
        </member>
        <member name="M:urakawa.media.timing.Time.getTimeAsTimeSpan">
            <summary>
            Gets the <see cref="T:System.TimeSpan"/> equivalent of the <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <returns>The <see cref="T:System.TimeSpan"/> equavalent</returns>
        </member>
        <member name="M:urakawa.media.timing.Time.setTime(System.Int64)">
            <summary>
            Sets the time to a given number of milliseconds
            </summary>
            <param localName="newTime">The number of milliseconds</param>
        </member>
        <member name="M:urakawa.media.timing.Time.setTime(System.Double)">
            <summary>
            Sets the time to a given number of milliseconds
            </summary>
            <param localName="newTime">The number of milliseconds</param>
        </member>
        <member name="M:urakawa.media.timing.Time.setTime(System.TimeSpan)">
            <summary>
            Sets the time to a given <see cref="T:System.TimeSpan"/> value
            </summary>
            <param localName="newTime">The <see cref="T:System.TimeSpan"/> value</param>
        </member>
        <member name="M:urakawa.media.timing.Time.addTime(urakawa.media.timing.ITime)">
            <summary>
            Adds another <see cref="T:urakawa.media.timing.ITime"/> to the current <see cref="T:urakawa.media.timing.ITime"/>
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.timing.ITime"/></param>
        </member>
        <member name="M:urakawa.media.timing.Time.addTimeDelta(urakawa.media.timing.ITimeDelta)">
            <summary>
            Adds a <see cref="T:urakawa.media.timing.ITimeDelta"/> to the current <see cref="T:urakawa.media.timing.ITime"/>
            </summary>
            <param name="other">The <see cref="T:urakawa.media.timing.ITimeDelta"/> to add</param>
        </member>
        <member name="M:urakawa.media.timing.Time.isGreaterThan(urakawa.media.timing.ITime)">
            <summary>
            Determines is <c>this</c> is greater than a given other <see cref="T:urakawa.media.timing.ITime"/>.
            </summary>
            <param localName="otherTime">The other <see cref="T:urakawa.media.timing.ITime"/></param>
            <returns>
            <c>true</c> if <c>this</c> is greater than <paramref localName="otherTime"/>, otherwise <c>false</c>
            </returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="otherTime"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.timing.Time.isLessThan(urakawa.media.timing.ITime)">
            <summary>
            Determines is <c>this</c> is less than a given other <see cref="T:urakawa.media.timing.ITime"/>.
            </summary>
            <param localName="otherTime">The other <see cref="T:urakawa.media.timing.ITime"/></param>
            <returns>
            <c>true</c> if <c>this</c> is less than <paramref localName="otherTime"/>, otherwise <c>false</c>
            </returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="otherTime"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.timing.Time.isEqualTo(urakawa.media.timing.ITime)">
            <summary>
            Determines is <c>this</c> value equal to a given other <see cref="T:urakawa.media.timing.ITime"/>
            </summary>
            <param localName="otherTime">The other <see cref="T:urakawa.media.timing.ITime"/></param>
            <returns>
            <c>true</c> if <c>this</c> and <paramref localName="otherTime"/> are value equal,
            otherwise <c>false</c>
            </returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="otherTime"/> is <c>null</c>
            </exception>
        </member>
        <member name="P:urakawa.media.timing.Time.Zero">
            <summary>
            Gets a <see cref="T:urakawa.media.timing.Time"/> representing 00:00:00.000
            </summary>
        </member>
        <member name="T:urakawa.media.MediaFactory">
            <summary>
            The media factory will create any media object of MediaType.xxx
            </summary>
        </member>
        <member name="M:urakawa.media.MediaFactory.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:urakawa.media.MediaFactory.createMedia(urakawa.media.MediaType)">
            <summary>
            Create a media object of the given type.
            </summary>
            <param localName="type">The type of media object to create.</param>
            <returns>a new MediaObject of a specific type.</returns>
        </member>
        <member name="M:urakawa.media.MediaFactory.createMedia(System.String,System.String)">
            <summary>
            Creates an <see cref="T:urakawa.media.IMedia"/> matching a given QName
            </summary>
            <param localName="localName">The local part of the QName</param>
            <param localName="namespaceUri">The namespace uri part of the QName</param>
            <returns>The creates <see cref="T:urakawa.media.IMedia"/> or <c>null</c> is the given QName is not supported</returns>
        </member>
        <member name="M:urakawa.media.MediaFactory.createMediaLocation">
            <summary>
            Creates a <see cref="T:urakawa.media.SrcMediaLocation"/>
            </summary>
            <returns>The created <see cref="T:urakawa.media.SrcMediaLocation"/></returns>
        </member>
        <member name="M:urakawa.media.MediaFactory.createMediaLocation(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.media.IMediaLocation"/> matching a given QName
            </summary>
            <param localName="localName">The local localName part of the QName</param>
            <param localName="namespaceUri">The namespace uri part of the QName</param>
            <returns>
            The created <see cref="T:urakawa.media.IMediaLocation"/> 
            or <c>null</c> if the QName is not recognized
            </returns>
            <remarks>
            <see cref="T:urakawa.media.MediaFactory"/> recognizes only 
            the QName <c><see cref="F:urakawa.ToolkitSettings.XUK_NS"/>:<see cref="T:urakawa.media.SrcMediaLocation"/></c> 
            </remarks>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when one of the QName parts is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.MediaFactory.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.media.IMediaPresentation"/> associated with <c>this</c>
            </summary>
            <returns>The associated <see cref="T:urakawa.media.IMediaPresentation"/></returns>
        </member>
        <member name="M:urakawa.media.MediaFactory.setPresentation(urakawa.media.IMediaPresentation)">
            <summary>
            Sets the <see cref="T:urakawa.media.IMediaPresentation"/> associated with <c>this</c>
            </summary>
            <param name="pres">The associated <see cref="T:urakawa.media.IMediaPresentation"/></param>
        </member>
        <member name="T:urakawa.media.ITextMedia">
            <summary>
            Interface for <see cref="T:urakawa.media.IMedia"/> of textual type. 
            In implementations of this interface method <see cref="M:urakawa.media.IMedia.getMediaType"/> 
            should return <see cref="F:urakawa.media.MediaType.TEXT"/>
            </summary>
        </member>
        <member name="M:urakawa.media.ITextMedia.getText">
            <summary>
            Get the text string for the TextMedia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.ITextMedia.setText(System.String)">
            <summary>
            Set the text string for the TextMedia.
            Throws <see cref="T:urakawa.exception.MethodParameterIsNullException"/>, 
            <see cref="T:urakawa.exception.MethodParameterIsEmptyStringException"/>
            </summary>
            <param localName="text">The new text string.</param>
        </member>
        <member name="T:urakawa.properties.xml.IXmlPropertyFactory">
            <summary>
            <see cref="T:urakawa.IPropertyFactory"/> that supports creation of <see cref="T:urakawa.properties.xml.IXmlProperty"/>s 
            and <see cref="T:urakawa.properties.xml.IXmlAttribute"/>s
            </summary>
        </member>
        <member name="T:urakawa.core.property.ICorePropertyFactory">
            <summary>
            Interface for factories creating <see cref="T:urakawa.core.property.IProperty"/>s
            </summary>
        </member>
        <member name="M:urakawa.core.property.ICorePropertyFactory.createProperty(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.core.property.IProperty"/> matching a given QName
            </summary>
            <param localName="localName">The local part of the QName</param>
            <param localName="namespaceUri">The namespace uri part of the QName</param>
            <returns>The created <see cref="T:urakawa.core.property.IProperty"/> or <c>null</c> if the given QName is not supported</returns>
        </member>
        <member name="M:urakawa.core.property.ICorePropertyFactory.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.core.ICorePresentation"/> associated with this
            </summary>
            <returns>The <see cref="T:urakawa.core.ICorePresentation"/></returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when </exception>
        </member>
        <member name="M:urakawa.core.property.ICorePropertyFactory.setPresentation(urakawa.core.ICorePresentation)">
            <summary>
            Sets the see cref="ICorePresentation"/&gt; owns <see cref="T:urakawa.core.ICoreNode"/>s created by 
            the <see cref="T:urakawa.core.ICoreNodeFactory"/> instance. This method should only be used during initialization
            </summary>
            <param localName="pres">The <see cref="T:urakawa.core.ICorePresentation"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paramref localName="pres"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.properties.xml.IXmlPropertyFactory.createXmlProperty">
            <summary>
            Creates a <see cref="T:urakawa.properties.xml.IXmlProperty"/> of default type
            </summary>
            <returns>The created <see cref="T:urakawa.properties.xml.IXmlProperty"/></returns>
        </member>
        <member name="M:urakawa.properties.xml.IXmlPropertyFactory.createXmlAttribute(urakawa.properties.xml.IXmlProperty)">
            <summary>
            Creates a <see cref="T:urakawa.properties.xml.IXmlAttribute"/> of default type
            with a given parent <see cref="T:urakawa.properties.xml.IXmlProperty"/>
            </summary>
            <param localName="parent">The parent <see cref="T:urakawa.properties.xml.IXmlProperty"/></param>
            <returns>The created <see cref="T:urakawa.properties.xml.IXmlAttribute"/></returns>
        </member>
        <member name="M:urakawa.properties.xml.IXmlPropertyFactory.createXmlAttribute(urakawa.properties.xml.IXmlProperty,System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.properties.xml.IXmlAttribute"/> of type matching a given QName 
            with a given parent <see cref="T:urakawa.properties.xml.IXmlProperty"/>
            </summary>
            <param localName="localName">The local localName part of the given QName</param>
            <param localName="namespaceUri">The namespace uri part of the given QName</param>
            <param localName="parent">The parent <see cref="T:urakawa.properties.xml.IXmlProperty"/></param>
            <returns>The created <see cref="T:urakawa.properties.xml.IXmlAttribute"/>, <c>null</c> if the given QName is not recognized</returns>
        </member>
        <member name="T:urakawa.properties.channel.ChannelsManager">
            <summary>
            Default implementation of <see cref="T:urakawa.properties.channel.IChannelsManager"/>
            Can only manage channels that inherit <see cref="T:urakawa.properties.channel.Channel"/>
            TODO: Check XUKIn/XukOut implementation
            </summary>
        </member>
        <member name="T:urakawa.properties.channel.IChannelsManager">
            <summary>
            Manages the list of available channels in the presentation.
            Nodes only refer to channels instances contained in this class, via their ChannelsProperty.
            </summary>
        </member>
        <member name="M:urakawa.properties.channel.IChannelsManager.addChannel(urakawa.properties.channel.IChannel)">
            <summary>
            Adds an existing  <see cref="T:urakawa.properties.channel.IChannel"/> to the list.
            </summary>
            <param localName="channel">The <see cref="T:urakawa.properties.channel.IChannel"/> to add</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="channel"/> is null
            </exception>
            <exception cref="T:urakawa.exception.ChannelAlreadyExistsException">
            Thrown when <paramref localName="channel"/> is already in the managers list of channels
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.IChannelsManager.removeChannel(urakawa.properties.channel.IChannel)">
            <summary>
            Removes an <see cref="T:urakawa.properties.channel.IChannel"/> from the list
            </summary>
            <param localName="channel">The <see cref="T:urakawa.properties.channel.IChannel"/> to remove</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="channel"/> is null
            </exception>
            <exception cref="T:urakawa.exception.ChannelDoesNotExistException">
            Thrown when <paramref localName="channel"/> is not in the managers list of channels
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.IChannelsManager.getListOfChannels">
            <summary>
            Gets a lists of the <see cref="T:urakawa.properties.channel.IChannel"/>s managed by the <see cref="T:urakawa.properties.channel.IChannelsManager"/>
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.properties.channel.IChannelsManager.getChannel(System.String)">
            <summary>
            Gets the <see cref="T:urakawa.properties.channel.IChannel"/> managed by the with a given Xuk id
            </summary>
            <param localName="Id">The given Xuk id</param>
            <returns>The <see cref="T:urakawa.properties.channel.IChannel"/> with the given Xuk id or <c>null</c>
            if no such <see cref="T:urakawa.properties.channel.IChannel"/> exists</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paramref localName="Id"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.IChannelsManager.getUidOfChannel(urakawa.properties.channel.IChannel)">
            <summary>
            Gets the Xuk id of a given channel
            </summary>
            <param localName="ch">The given channel</param>
            <returns>The Xuk Id of the given channel</returns>
            <exception cref="T:urakawa.exception.ChannelDoesNotExistException">
            Thrown when the given channel is not managed by <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.IChannelsManager.setPresentation(urakawa.properties.channel.IChannelPresentation)">
            <summary>
            Sets the <see cref="T:urakawa.properties.channel.IChannelPresentation"/> of the <see cref="T:urakawa.properties.channel.ChannelsManager"/>
            </summary>
            <param localName="newPres"></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            The associated <see cref="T:urakawa.properties.channel.IChannelPresentation"/> can not be null
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.IChannelsManager.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.properties.channel.IChannelPresentation"/> associated with <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.properties.channel.IChannelPresentation"/></returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            When no <see cref="T:urakawa.properties.channel.IChannelPresentation"/> has been associated with <c>this</c>
            </exception>
        </member>
        <member name="F:urakawa.properties.channel.ChannelsManager.mChannels">
            <summary>
            The list of channels managed by the manager
            </summary>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsManager.getChannelFactory">
            <summary>
            Gets the <see cref="T:urakawa.properties.channel.IChannelsManager"/> associated with <c>this</c>.
            Convenience for <c>getPresentation().getChannelFactory()</c>
            </summary>
            <returns>The <see cref="T:urakawa.properties.channel.IChannelsManager"/></returns>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsManager.setPresentation(urakawa.properties.channel.IChannelPresentation)">
            <summary>
            Sets the <see cref="T:urakawa.properties.channel.IChannelPresentation"/> of the <see cref="T:urakawa.properties.channel.ChannelsManager"/>
            </summary>
            <param localName="newPres"></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            The associated <see cref="T:urakawa.properties.channel.IChannelPresentation"/> can not be null
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsManager.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.properties.channel.IChannelPresentation"/> associated with <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.properties.channel.IChannelPresentation"/></returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            When no <see cref="T:urakawa.properties.channel.IChannelPresentation"/> has been associated with <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsManager.addChannel(urakawa.properties.channel.IChannel)">
            <summary>
            Adds an existing  <see cref="T:urakawa.properties.channel.IChannel"/> to the list of <see cref="T:urakawa.properties.channel.IChannel"/>s 
            managed by the <see cref="T:urakawa.properties.channel.ChannelsManager"/>
            </summary>
            <param localName="channel">The <see cref="T:urakawa.properties.channel.IChannel"/> to add</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="channel"/> is null
            </exception>
            <exception cref="T:urakawa.exception.ChannelAlreadyExistsException">
            Thrown when <paramref localName="channel"/> is already in the managers list of channels
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsManager.removeChannel(urakawa.properties.channel.IChannel)">
            <summary>
            Removes an <see cref="T:urakawa.properties.channel.IChannel"/> from the list
            </summary>
            <param localName="channel">The <see cref="T:urakawa.properties.channel.IChannel"/> to remove</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="channel"/> is null
            </exception>
            <exception cref="T:urakawa.exception.ChannelDoesNotExistException">
            Thrown when <paramref localName="channel"/> is not in the managers list of channels
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsManager.getListOfChannels">
            <summary>
            Gets a lists of the <see cref="T:urakawa.properties.channel.IChannel"/>s managed by the <see cref="T:urakawa.properties.channel.IChannelsManager"/>
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsManager.getChannel(System.String)">
            <summary>
            Gets the <see cref="T:urakawa.properties.channel.IChannel"/> with a given xuk id
            </summary>
            <param localName="Id">The given xuk id</param>
            <returns>The <see cref="T:urakawa.properties.channel.IChannel"/> with the given xuk id</returns>
            <exception cref="T:urakawa.exception.ChannelDoesNotExistException">
            Thrown when <c>this</c> does not manage a <see cref="T:urakawa.properties.channel.IChannel"/> with the given xuk id
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsManager.getUidOfChannel(urakawa.properties.channel.IChannel)">
            <summary>
            Gets the Xuk id of a given channel
            </summary>
            <param localName="ch">The given channel</param>
            <returns>The Xuk Id of the given channel</returns>
            <exception cref="T:urakawa.exception.ChannelDoesNotExistException">
            Thrown when the given channel is not managed by <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsManager.getChannelByName(System.String)">
            <summary>
            this is a helper function for getting one or more channels by its localName
            </summary>
            <param localName="channelName">The localName of the channel to get</param>
            <returns>An array of the </returns>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsManager.XukIn(System.Xml.XmlReader)">
            <summary>
            Reads the <see cref="T:urakawa.properties.channel.ChannelsManager"/> instance state from the ChannelsManager element 
            of a XUK XML document
            </summary>
            <param localName="source">A <see cref="T:System.Xml.XmlReader"/> with which to read the ChannelsManager element</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the read was succesful</returns>
            <remarks>The cursor of the <paramref localName="source"/> must be positioned 
            at the start of the ChannelsManager element</remarks>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsManager.XukOut(System.Xml.XmlWriter)">
            <summary>
            Write the state of the <see cref="T:urakawa.properties.channel.ChannelsManager"/> instance state 
            to a ChannelsMaanger element in a XUK XML document
            </summary>
            <param localName="destination"></param>
            <returns></returns>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsManager.getXukLocalName">
            <summary>
            Gets the local localName part of the QName representing a <see cref="T:urakawa.properties.channel.ChannelsManager"/> in Xuk
            </summary>
            <returns>The local localName part</returns>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsManager.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName representing a <see cref="T:urakawa.properties.channel.ChannelsManager"/> in Xuk
            </summary>
            <returns>The namespace uri part</returns>
        </member>
        <member name="T:urakawa.Project">
            <summary>
            Represents a projects - part of the facade API, provides methods for opening and saving XUK files
            </summary>
        </member>
        <member name="M:urakawa.Project.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.Project.#ctor(urakawa.Presentation,urakawa.metadata.MetadataFactory)">
            <summary>
            Constructor which initializes the project with a presentation
            and metadata factory.
            </summary>
            <param name="pres">The presentation object</param>
            <param name="metaFact">The metadata factory</param>
        </member>
        <member name="M:urakawa.Project.getMetadataFactory">
            <summary>
            Retrieves the <see cref="T:urakawa.metadata.IMetadataFactory"/> creating <see cref="T:urakawa.metadata.IMetadata"/> 
            for the <see cref="T:urakawa.Project"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.Project.openXUK(System.Uri)">
            <summary>
            Opens an XUK file and loads the project from this
            </summary>
            <param name="fileUri">The <see cref="T:System.Uri"/> of the source XUK file</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the XUK 
            file was succesfully opened and loaded</returns>
        </member>
        <member name="M:urakawa.Project.openXUK(System.Xml.XmlReader)">
            <summary>
            Opens the <see cref="T:urakawa.Project"/> from an <see cref="T:System.Xml.XmlReader"/>
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the <see cref="T:urakawa.Project"/> 
            was succesfully opened</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the source <see cref="T:System.Xml.XmlReader"/> is null</exception>
        </member>
        <member name="M:urakawa.Project.saveXUK(System.Uri)">
            <summary>
            Saves the <see cref="T:urakawa.Project"/> to a XUK file
            </summary>
            <param name="fileUri">The <see cref="T:System.Uri"/> of the destination XUK file</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the <see cref="T:urakawa.Project"/> was succesfully saved to XUK</returns>
        </member>
        <member name="M:urakawa.Project.saveXUK(System.Xml.XmlWriter)">
            <summary>
            Saves the project to XUK via. a <see cref="T:System.Xml.XmlWriter"/>
            </summary>
            <param name="writer">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the <see cref="T:urakawa.Project"/> was succesfully saved to XUK</returns>
        </member>
        <member name="M:urakawa.Project.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.Presentation"/> of the <see cref="T:urakawa.Project"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.Project.appendMetadata(urakawa.metadata.IMetadata)">
            <summary>
            Appends a <see cref="T:urakawa.metadata.IMetadata"/> to the <see cref="T:urakawa.Project"/>
            </summary>
            <param name="metadata">The <see cref="T:urakawa.metadata.IMetadata"/> to add</param>
        </member>
        <member name="M:urakawa.Project.getMetadataList">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IList`1"/> of all <see cref="T:urakawa.metadata.IMetadata"/>
            in the <see cref="T:urakawa.Project"/>
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/> of metadata <see cref="T:urakawa.metadata.IMetadata"/></returns>
        </member>
        <member name="M:urakawa.Project.getMetadataList(System.String)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IList`1"/> of all <see cref="T:urakawa.metadata.IMetadata"/>
            in the <see cref="T:urakawa.Project"/> with a given name
            </summary>
            <param name="name">The given name</param>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:urakawa.metadata.IMetadata"/></returns>
        </member>
        <member name="M:urakawa.Project.deleteMetadata(System.String)">
            <summary>
            Deletes all <see cref="T:urakawa.metadata.IMetadata"/>s with a given name
            </summary>
            <param name="name">The given name</param>
        </member>
        <member name="M:urakawa.Project.deleteMetadata(urakawa.metadata.IMetadata)">
            <summary>
            Deletes a given <see cref="T:urakawa.metadata.IMetadata"/>
            </summary>
            <param name="metadata">The given <see cref="T:urakawa.metadata.IMetadata"/></param>
        </member>
        <member name="T:urakawa.metadata.IMetadataFactory">
            <summary>
            Interface of factory for constructing <see cref="T:urakawa.metadata.IMetadata"/>
            </summary>
        </member>
        <member name="M:urakawa.metadata.IMetadataFactory.createMetadata(System.String,System.String)">
            <summary>
            Creates an <see cref="T:urakawa.metadata.IMetadata"/> matching a given QName
            </summary>
            <param name="localName">The local part of the QName</param>
            <param name="namespaceUri">The namespace uri part of the QName</param>
            <returns>The created <see cref="T:urakawa.metadata.IMetadata"/> instance or <c>null</c> if the given QName is not supported</returns>
        </member>
        <member name="M:urakawa.metadata.IMetadataFactory.createMetadata">
            <summary>
            Creates a <see cref="T:urakawa.metadata.IMetadata"/> instance of default type
            </summary>
            <returns>The instance</returns>
        </member>
        <member name="T:urakawa.media.TextMedia">
            <summary>
            TextMedia represents a text string
            </summary>
        </member>
        <member name="M:urakawa.media.TextMedia.#ctor(urakawa.media.IMediaFactory)">
            <summary>
            Constructor setting the associated <see cref="T:urakawa.media.IMediaFactory"/>
            </summary>
            <param localName="fact">
            The <see cref="T:urakawa.media.IMediaFactory"/> to associate the <see cref="T:urakawa.media.TextMedia"/> with
            </param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="fact"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.TextMedia.ToString">
            <summary>
            This override is useful while debugging
            </summary>
            <returns>The textual content of the <see cref="T:urakawa.media.ITextMedia"/></returns>
        </member>
        <member name="M:urakawa.media.TextMedia.getText">
            <summary>
            Return the text string
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.TextMedia.setText(System.String)">
            <summary>
            Set the text string
            </summary>
            <param localName="text"></param>
        </member>
        <member name="M:urakawa.media.TextMedia.getMediaFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.IMediaFactory"/> associated with the <see cref="T:urakawa.media.IMedia"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.IMediaFactory"/></returns>
        </member>
        <member name="M:urakawa.media.TextMedia.isContinuous">
            <summary>
            This always returns false, because
            text media is never considered continuous
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.TextMedia.isDiscrete">
            <summary>
            This always returns true, because
            text media is always considered discrete
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.TextMedia.isSequence">
            <summary>
            This always returns false, because
            a single media object is never considered to be a sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.TextMedia.getMediaType">
            <summary>
            Return the urakawa media type
            </summary>
            <returns>always returns <see cref="F:urakawa.media.MediaType.TEXT"/></returns>
        </member>
        <member name="M:urakawa.media.TextMedia.copy">
            <summary>
            Make a copy of this text object
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.TextMedia.XukIn(System.Xml.XmlReader)">
            <summary>
            Fill in audio data from an XML source.
            Assume that the XmlReader cursor is at the opening audio tag.
            </summary>
            <param localName="source">the input XML source</param>
            <returns>true or false, depending on whether the data could be processed</returns>
        </member>
        <member name="M:urakawa.media.TextMedia.XukOut(System.Xml.XmlWriter)">
            <summary>
            The opposite of <see cref="M:urakawa.media.TextMedia.XukIn(System.Xml.XmlReader)"/>, this function writes the object's data
            to an XML file
            </summary>
            <param localName="destination">the XML source for outputting data</param>
            <returns>so far, this function always returns true</returns>
        </member>
        <member name="M:urakawa.media.TextMedia.getXukLocalName">
            <summary>
            Gets the local localName part of the QName representing a <see cref="T:urakawa.media.TextMedia"/> in Xuk
            </summary>
            <returns>The local localName part</returns>
        </member>
        <member name="M:urakawa.media.TextMedia.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName representing a <see cref="T:urakawa.media.TextMedia"/> in Xuk
            </summary>
            <returns>The namespace uri part</returns>
        </member>
        <member name="M:urakawa.media.TextMedia.ValueEquals(urakawa.media.IMedia)">
            <summary>
            Conpares <c>this</c> with a given other <see cref="T:urakawa.media.IMedia"/> for equality
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.IMedia"/></param>
            <returns><c>true</c> if equal, otherwise <c>false</c></returns>
        </member>
        <member name="T:urakawa.media.data.MediaData">
            <summary>
            Abstract implementation of <see cref="T:urakawa.media.data.IMediaData"/> that provides the common functionality 
            needed by any implementation of <see cref="T:urakawa.media.data.IMediaData"/>
            </summary>
        </member>
        <member name="T:urakawa.media.data.IMediaData">
            <summary>
            Interface for a generic <see cref="T:urakawa.media.data.IMediaData"/>. Uses <see cref="T:urakawa.media.data.IDataProvider"/>s to store actual data
            </summary>
        </member>
        <member name="M:urakawa.media.data.IMediaData.getMediaDataManager">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaDataManager"/> associated with <c>this</c>
            </summary>
            <returns>The assicoated <see cref="T:urakawa.media.data.IMediaDataManager"/></returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when <c>this</c> has not been associated with a <see cref="T:urakawa.media.data.IMediaDataManager"/>
            </exception>
        </member>
        <member name="M:urakawa.media.data.IMediaData.setMediaDataManager(urakawa.media.data.IMediaDataManager)">
            <summary>
            Associates <c>this</c> with a <see cref="T:urakawa.media.data.IMediaDataManager"/> - 
            initializer that is called in method <see cref="M:urakawa.media.data.IMediaDataManager.addMediaData(urakawa.media.data.IMediaData)"/> method. 
            Calling the initializer elsewhere may corrupt the data model.
            </summary>
            <param name="mngr">The <see cref="T:urakawa.media.data.IMediaDataManager"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="mngr"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when <c>this</c> has already been associated with a <see cref="T:urakawa.media.data.IMediaDataManager"/>
            </exception>
        </member>
        <member name="M:urakawa.media.data.IMediaData.getUid">
            <summary>
            Gets the UID of <c>this</c>.
            Convenience for <c><see cref="M:urakawa.media.data.IMediaData.getMediaDataManager"/>().<see cref="M:urakawa.media.data.IMediaDataManager.getUidOfMediaData(urakawa.media.data.IMediaData)"/>(this)</c>
            </summary>
            <returns>The UID</returns>
        </member>
        <member name="M:urakawa.media.data.IMediaData.getName">
            <summary>
            Gets the name of <c>this</c>
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.data.IMediaData.setName(System.String)">
            <summary>
            Sets the name of <c>this</c>
            </summary>
            <param name="newName">The new name - must not be <c>null</c></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="newName"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.IMediaData.delete">
            <summary>
            Deletes <c>this</c> including any underlying <see cref="T:urakawa.media.data.IDataProvider"/>s
            </summary>
        </member>
        <member name="M:urakawa.media.data.IMediaData.copy">
            <summary>
            Copies <c>this</c> including any underlying <see cref="T:urakawa.media.data.IDataProvider"/>s
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.data.MediaData.getMediaDataManager">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaDataManager"/> associated with <c>this</c>
            </summary>
            <returns>The assicoated <see cref="T:urakawa.media.data.IMediaDataManager"/></returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when <c>this</c> has not been associated with a <see cref="T:urakawa.media.data.IMediaDataManager"/>
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaData.setMediaDataManager(urakawa.media.data.IMediaDataManager)">
            <summary>
            Associates <c>this</c> with a <see cref="T:urakawa.media.data.IMediaDataManager"/> - 
            initializer that is called in method <see cref="M:urakawa.media.data.IMediaDataManager.addMediaData(urakawa.media.data.IMediaData)"/> method. 
            Calling the initializer elsewhere may corrupt the data model.
            </summary>
            <param name="mngr">The <see cref="T:urakawa.media.data.IMediaDataManager"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="mngr"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when <c>this</c> has already been associated with a <see cref="T:urakawa.media.data.IMediaDataManager"/>
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaData.getUid">
            <summary>
            Gets the UID of <c>this</c>.
            Convenience for <c><see cref="M:urakawa.media.data.MediaData.getMediaDataManager"/>().<see cref="M:urakawa.media.data.IMediaDataManager.getUidOfMediaData(urakawa.media.data.IMediaData)"/>(this)</c>
            </summary>
            <returns>The UID</returns>
        </member>
        <member name="M:urakawa.media.data.MediaData.getName">
            <summary>
            Gets the name of <c>this</c>
            </summary>
            <returns>The name</returns>
        </member>
        <member name="M:urakawa.media.data.MediaData.setName(System.String)">
            <summary>
            Sets the name of <c>this</c>
            </summary>
            <param name="newName">The new name</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the new name is <c>null</c></exception>
        </member>
        <member name="M:urakawa.media.data.MediaData.getUsedDataProviders">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IList`1"/> of the <see cref="T:urakawa.media.data.IDataProvider"/>s used by <c>this</c>
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/></returns>
        </member>
        <member name="M:urakawa.media.data.MediaData.delete">
            <summary>
            Deletes the <see cref="T:urakawa.media.data.MediaData"/> and all <see cref="T:urakawa.media.data.IDataProvider"/>s associated with <c>this</c>
            </summary>
        </member>
        <member name="M:urakawa.media.data.MediaData.XukIn(System.Xml.XmlReader)">
            <summary>
            Reads the <see cref="T:urakawa.media.data.MediaData"/> from a xuk element
            </summary>
            <param localName="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the read was succesful</returns>
        </member>
        <member name="M:urakawa.media.data.MediaData.XukOut(System.Xml.XmlWriter)">
            <summary>
            Write a element to a XUK file representing the <see cref="T:urakawa.media.data.MediaData"/> instance
            </summary>
            <param localName="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the write was succesful</returns>
        </member>
        <member name="M:urakawa.media.data.MediaData.getXukLocalName">
            <summary>
            Gets the local name part of the QName representing a <see cref="T:urakawa.media.data.MediaData"/> in Xuk
            </summary>
            <returns>The local name part</returns>
        </member>
        <member name="M:urakawa.media.data.MediaData.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName representing a <see cref="T:urakawa.media.data.MediaData"/> in Xuk
            </summary>
            <returns>The namespace uri part</returns>
        </member>
        <member name="T:urakawa.media.data.codec.audio.WavAudioMediaData">
            <summary>
            Implementation of <see cref="T:urakawa.media.data.AudioMediaData"/> that supports sequences of RIFF WAVE PCM audio data clips
            </summary>
        </member>
        <member name="T:urakawa.media.data.AudioMediaData">
            <summary>
            Abstract implementation of interface <see cref="T:urakawa.media.data.IAudioMediaData"/>.
            Implements PCM format accessors (number of channels, bit depth, sample rate) 
            and leaves all other methods abstract
            </summary>
        </member>
        <member name="T:urakawa.media.data.IAudioMediaData">
            <summary>
            Interface for a generic Audio <see cref="T:urakawa.media.data.IMediaData"/>
            </summary>
        </member>
        <member name="M:urakawa.media.data.IAudioMediaData.getNumberOfChannels">
            <summary>
            Gets the number of channels of audio
            </summary>
            <returns>The number of channels</returns>
        </member>
        <member name="M:urakawa.media.data.IAudioMediaData.setNumberOfChannels(System.Int32)">
            <summary>
            Sets the number of channels of audio
            </summary>
            <param name="newNumberOfChannels">The new number of channels</param>
        </member>
        <member name="M:urakawa.media.data.IAudioMediaData.getBitDepth">
            <summary>
            Gets the bit depth, that is the number of bits per sample
            </summary>
            <returns>The bit depth</returns>
        </member>
        <member name="M:urakawa.media.data.IAudioMediaData.setBitDepth(System.Int32)">
            <summary>
            Sets the bit depth
            </summary>
            <param name="newBitDepth">The new bit depth</param>
        </member>
        <member name="M:urakawa.media.data.IAudioMediaData.getSampleRate">
            <summary>
            Gets the sample rate in Hz
            </summary>
            <returns>The sample rate</returns>
        </member>
        <member name="M:urakawa.media.data.IAudioMediaData.setSampleRate(System.Int32)">
            <summary>
            Sets the sample rate in Hz
            </summary>
            <param name="newSampleRate">The new sample rate</param>
        </member>
        <member name="M:urakawa.media.data.IAudioMediaData.getAudioDuration">
            <summary>
            Gets the intrinsic duration of <c>this</c>
            </summary>
            <returns>The duration</returns>
        </member>
        <member name="M:urakawa.media.data.IAudioMediaData.getAudioData">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> providing read access to all the audio as raw PCM data
            </summary>
            <returns>The <see cref="T:System.IO.Stream"/></returns>
        </member>
        <member name="M:urakawa.media.data.IAudioMediaData.getAudioData(urakawa.media.timing.ITime)">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> providing read access to all audio after a given clip begin <see cref="T:urakawa.media.timing.ITime"/> as raw PCM data
            </summary>
            <param name="clipBegin">The given clip begin <see cref="T:urakawa.media.timing.ITime"/></param>
            <returns>The <see cref="T:System.IO.Stream"/></returns>
        </member>
        <member name="M:urakawa.media.data.IAudioMediaData.getAudioData(urakawa.media.timing.ITime,urakawa.media.timing.ITime)">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> providing read access to all audio between given clip begin and end <see cref="T:urakawa.media.timing.ITime"/>s
            as raw PCM data
            </summary>
            <param name="clipBegin">The given clip begin <see cref="T:urakawa.media.timing.ITime"/></param>
            <param name="clipEnd">The given clip end <see cref="T:urakawa.media.timing.ITime"/></param>
            <returns>The <see cref="T:System.IO.Stream"/></returns>
        </member>
        <member name="M:urakawa.media.data.IAudioMediaData.appendAudioData(System.IO.Stream,urakawa.media.timing.ITimeDelta)">
            <summary>
            Appends audio of a given duration to <c>this</c>
            </summary>
            <param name="pcmData">A <see cref="T:System.IO.Stream"/> providing read access to the input raw PCM audio data</param>
            <param name="duration">The duration of the audio to add</param>
        </member>
        <member name="M:urakawa.media.data.IAudioMediaData.insertAudioData(System.IO.Stream,urakawa.media.timing.ITime,urakawa.media.timing.ITimeDelta)">
            <summary>
            Inserts audio of a given duration at a given <see cref="T:urakawa.media.timing.ITime"/>
            </summary>
            <param name="pcmData">A <see cref="T:System.IO.Stream"/> providing read access to the input raw PCM audio data</param>
            <param name="insertPoint"></param>
            <param name="duration"></param>
        </member>
        <member name="M:urakawa.media.data.IAudioMediaData.replaceAudioData(System.IO.Stream,urakawa.media.timing.ITime,urakawa.media.timing.ITimeDelta)">
            <summary>
            Replaces audio with a given duration at a given replace point in <see cref="T:urakawa.media.timing.ITime"/>
            </summary>
            <param name="pcmData">A <see cref="T:System.IO.Stream"/> providing read access to the input raw PCM audio data</param>
            <param name="replacePoint">The given replkace point in <see cref="T:urakawa.media.timing.ITime"/></param>
            <param name="duration">The duration of the audio to replace</param>
        </member>
        <member name="M:urakawa.media.data.IAudioMediaData.removeAudio(urakawa.media.timing.ITime)">
            <summary>
            Removes all audio after a given clip begin <see cref="T:urakawa.media.timing.ITime"/>
            </summary>
            <param name="clipBegin">The clip begin</param>
        </member>
        <member name="M:urakawa.media.data.IAudioMediaData.removeAudio(urakawa.media.timing.ITime,urakawa.media.timing.ITime)">
            <summary>
            Removes all audio between given clip begin and end <see cref="T:urakawa.media.timing.ITime"/>
            </summary>
            <param name="clipBegin">The givne clip begin <see cref="T:urakawa.media.timing.ITime"/></param>
            <param name="clipEnd">The givne clip end <see cref="T:urakawa.media.timing.ITime"/></param>
        </member>
        <member name="M:urakawa.media.data.AudioMediaData.getMediaDataFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaDataFactory"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.data.AudioMediaData.getNumberOfChannels">
            <summary>
            Gets the number of channels of audio
            </summary>
            <returns>The number of channels</returns>
        </member>
        <member name="M:urakawa.media.data.AudioMediaData.setNumberOfChannels(System.Int32)">
            <summary>
            Sets the number of channels of audio
            </summary>
            <param name="newNumberOfChannels">The new number of channels</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new number of channels is not positive or in derived classes when otherwise out of bounds
            </exception>
        </member>
        <member name="M:urakawa.media.data.AudioMediaData.getBitDepth">
            <summary>
            Gets the number of bits used to store each sample of audio data
            </summary>
            <returns>The bit depth</returns>
        </member>
        <member name="M:urakawa.media.data.AudioMediaData.setBitDepth(System.Int32)">
            <summary>
            Sets the number of bits used to store each sample of audio data
            </summary>
            <param name="newBitDepth">The new bit depth</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new bit depth is not positive or in derived classes when otherwise out of bounds
            </exception>
        </member>
        <member name="M:urakawa.media.data.AudioMediaData.getSampleRate">
            <summary>
            Gets the sample rate of the audio data
            </summary>
            <returns>The sample rate in Hz</returns>
        </member>
        <member name="M:urakawa.media.data.AudioMediaData.setSampleRate(System.Int32)">
            <summary>
            Sets the sample rate of the audio data
            </summary>
            <param name="newSampleRate">The new sample rate</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new sample rate is not positive or in derived classes when otherwise out of bounds
            </exception>
        </member>
        <member name="M:urakawa.media.data.AudioMediaData.getAudioDuration">
            <summary>
            Gets the intrinsic duration of the audio data
            </summary>
            <returns>The duration as an <see cref="T:urakawa.media.timing.ITimeDelta"/></returns>
        </member>
        <member name="M:urakawa.media.data.AudioMediaData.getAudioData">
            <summary>
            Gets an input <see cref="T:System.IO.Stream"/> giving access to all audio data as raw PCM
            </summary>
            <returns>The input <see cref="T:System.IO.Stream"/></returns>
        </member>
        <member name="M:urakawa.media.data.AudioMediaData.getAudioData(urakawa.media.timing.ITime)">
            <summary>
            Gets an input <see cref="T:System.IO.Stream"/> giving access to the audio data after a given <see cref="T:urakawa.media.timing.ITime"/> 
            as raw PCM
            </summary>
            <returns>The input <see cref="T:System.IO.Stream"/></returns>
        </member>
        <member name="M:urakawa.media.data.AudioMediaData.getAudioData(urakawa.media.timing.ITime,urakawa.media.timing.ITime)">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> providing read access to all audio between given clip begin and end <see cref="T:urakawa.media.timing.ITime"/>s
            as raw PCM data
            </summary>
            <param name="clipBegin">The given clip begin <see cref="T:urakawa.media.timing.ITime"/></param>
            <param name="clipEnd">The given clip end <see cref="T:urakawa.media.timing.ITime"/></param>
            <returns>The <see cref="T:System.IO.Stream"/></returns>
        </member>
        <member name="M:urakawa.media.data.AudioMediaData.appendAudioData(System.IO.Stream,urakawa.media.timing.ITimeDelta)">
            <summary>
            Appends audio of a given duration to <c>this</c>
            </summary>
            <param name="pcmData">A <see cref="T:System.IO.Stream"/> providing read access to the input raw PCM audio data</param>
            <param name="duration">The duration of the audio to add</param>
        </member>
        <member name="M:urakawa.media.data.AudioMediaData.insertAudioData(System.IO.Stream,urakawa.media.timing.ITime,urakawa.media.timing.ITimeDelta)">
            <summary>
            Inserts audio data of a given duration at a given insert point
            </summary>
            <param name="pcmData">A <see cref="T:System.IO.Stream"/> providing read access to the audio data as RAW PCM</param>
            <param name="insertPoint"></param>
            <param name="duration"></param>
        </member>
        <member name="F:urakawa.media.data.codec.audio.WavAudioMediaData.mWavClips">
            <summary>
            Stores the <see cref="T:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip"/>s of <c>this</c>
            </summary>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.parseWavData(urakawa.media.data.IDataProvider,urakawa.media.data.utillities.PCMDataInfo@)">
            <summary>
            Parses a RIFF WAVE PCM header of a given input <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="input">The input <see cref="T:System.IO.Stream"/> - must be positioned at the start of the RIFF chunk</param>
            <param name="pcmInfo">A <see cref="!:AudioMediaData.PCMDataInfo"/> in which to return the parsed data</param>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.#ctor(urakawa.media.data.IMediaDataManager)">
            <summary>
            Constructor associating the newly constructed <see cref="T:urakawa.media.data.codec.audio.WavAudioMediaData"/> 
            with a given <see cref="T:urakawa.media.data.IMediaDataManager"/> 
            </summary>
            <param name="mngr"></param>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.copy">
            <summary>
            Creates a copy of <c>this</c>, including copies of all <see cref="T:urakawa.media.data.IDataProvider"/>s used by <c>this</c>
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.XukIn(System.Xml.XmlReader)">
            <summary>
            Reads the <see cref="T:urakawa.media.data.codec.audio.WavAudioMediaData"/> from a WavAudioMediaData xuk element
            </summary>
            <param localName="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the read was succesful</returns>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.XukOut(System.Xml.XmlWriter)">
            <summary>
            Write a WavAudioMediaData element to a XUK file representing the <see cref="T:urakawa.media.data.codec.audio.WavAudioMediaData"/> instance
            </summary>
            <param localName="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the write was succesful</returns>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.getAudioData(urakawa.media.timing.ITime,urakawa.media.timing.ITime)">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> providing read access to all audio between given clip begin and end <see cref="T:urakawa.media.timing.ITime"/>s
            as raw PCM data
            </summary>
            <param name="clipBegin">The given clip begin <see cref="T:urakawa.media.timing.ITime"/></param>
            <param name="clipEnd">The given clip end <see cref="T:urakawa.media.timing.ITime"/></param>
            <returns>The <see cref="T:System.IO.Stream"/></returns>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.getAudioDuration">
            <summary>
            Gets the intrinsic duration of the audio data
            </summary>
            <returns>The duration as an <see cref="T:urakawa.media.timing.ITimeDelta"/></returns>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.getUsedDataProviders">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IList`1"/> of the <see cref="T:urakawa.media.data.IDataProvider"/>s
            used to store the Wav audio data
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="T:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip">
            <summary>
            Represents a RIFF WAVE PCM audio data clip
            </summary>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip.#ctor(urakawa.media.data.IDataProvider)">
            <summary>
            Constructor setting the <see cref="T:urakawa.media.data.IDataProvider"/>, 
            clip begin and clip end will in this case be initialized to <c>null</c>,
            which means beginning/end if the RIFF WAVE PCM data
            </summary>
            <param name="clipDataProvider">The <see cref="T:urakawa.media.data.IDataProvider"/></param>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip.#ctor(urakawa.media.data.IDataProvider,urakawa.media.timing.Time,urakawa.media.timing.Time)">
            <summary>
            Constructor setting the <see cref="T:urakawa.media.data.IDataProvider"/> and clip begin/end values
            </summary>
            <param name="clipDataProvider">The <see cref="T:urakawa.media.data.IDataProvider"/> - can not be <c>null</c></param>
            <param name="clipBegin">The clip begin <see cref="T:urakawa.media.timing.Time"/> - can not be <c>null</c></param>
            <param name="clipEnd">
            The clip end <see cref="T:urakawa.media.timing.Time"/>
            - a <c>null</c> value ties clip end to the end of the underlying wave audio</param>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip.getClipBegin">
            <summary>
            Gets (a copy of) the clip begin <see cref="T:urakawa.media.timing.Time"/> of <c>this</c>
            </summary>
            <returns>
            The clip begin <see cref="T:urakawa.media.timing.Time"/> - can not be <c>null</c>
            </returns>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip.setClipBegin(urakawa.media.timing.Time)">
            <summary>
            Sets the clip begin <see cref="T:urakawa.media.timing.Time"/> of <c>this</c>
            </summary>
            <param name="newClipBegin">The new clip begin <see cref="T:urakawa.media.timing.Time"/> - can not be <c>null</c></param>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip.getClipEnd">
            <summary>
            Gets (a copy of) the clip end <see cref="T:urakawa.media.timing.Time"/> of <c>this</c>
            </summary>
            <returns>The clip end <see cref="T:urakawa.media.timing.Time"/></returns>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip.isClipEndTiedToEOWA">
            <summary>
            Determines if clip end is tied to the end of the underlying wave audio
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> indicating if clip end is tied to the end of the underlying wave audio
            </returns>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip.setClipEnd(urakawa.media.timing.Time)">
            <summary>
            Sets the clip end <see cref="T:urakawa.media.timing.Time"/> of <c>this</c>
            </summary>
            <param name="newClipEnd">
            The new clip end <see cref="T:urakawa.media.timing.Time"/> 
            - a <c>null</c> ties the clip end to the end of the underlying wave audio
            </param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new clip end <see cref="T:urakawa.media.timing.Time"/> is less that the current clip begin <see cref="T:urakawa.media.timing.Time"/>
            </exception>
            <remarks>
            There is not check to see if the new clip end <see cref="T:urakawa.media.timing.Time"/> 
            is beyond the end of the underlyind wave audio
            </remarks>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip.getDataProvider">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IDataProvider"/> storing the RIFF WAVE PCM audio data of <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IDataProvider"/></returns>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip.getAudioDuration">
            <summary>
            Gets the duration of audio that <c>this</c> is representing
            </summary>
            <returns>The duration of as a <see cref="T:urakawa.media.timing.TimeDelta"/></returns>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip.getAudioData">
            <summary>
            Gets an input <see cref="T:System.IO.Stream"/> providing read access to the raw PCM audio data
            </summary>
            <returns>The raw PCM audio data <see cref="T:System.IO.Stream"/></returns>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip.getAudioData(urakawa.media.timing.Time)">
            <summary>
            Gets an input <see cref="T:System.IO.Stream"/> providing read access to the raw PCM audio data
            after a given sub-clip begin time
            </summary>
            <param name="subClipBegin"></param>
            <returns>The raw PCM audio data <see cref="T:System.IO.Stream"/></returns>
            <seealso cref="M:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip.getAudioData(urakawa.media.timing.Time,urakawa.media.timing.Time)"/>
        </member>
        <member name="M:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip.getAudioData(urakawa.media.timing.Time,urakawa.media.timing.Time)">
            <summary>
            Gets an input <see cref="T:System.IO.Stream"/> providing read access to the raw PCM audio data
            between given sub-clip begin and end times
            </summary>
            <param name="subClipBegin">The beginning of the sub-clip</param>
            <param name="subClipEnd">The end of the sub-clip</param>
            <returns>The raw PCM audio data <see cref="T:System.IO.Stream"/></returns>
            <remarks>
            <para>Sub-clip times must be in the interval <c>[0;<see cref="M:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip.getAudioDuration"/>()]</c>.</para>
            <para>
            The sub-clip is
            relative to clip begin of the <see cref="T:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip"/>, that if <c>this.<see cref="M:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip.getClipBegin"/>()</c>
            returns <c>00:00:10</c>, <c>this.<see cref="M:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip.getClipEnd"/>()</c> returns <c>00:00:50</c>, 
            <c>x</c> and <c>y</c> is <c>00:00:05</c> and <c>00:00:30</c> respectively, 
            then <c>this.<see cref="M:urakawa.media.data.codec.audio.WavAudioMediaData.WavClip.getAudioData(urakawa.media.timing.Time,urakawa.media.timing.Time)"/>(x, y)</c> will get the audio in the underlying wave audio between
            <c>00:00:15</c> and <c>00:00:40</c>
            </para>
            </remarks>
        </member>
        <member name="T:urakawa.properties.xml.XmlProperty">
            <summary>
            Default implementation of <see cref="T:urakawa.properties.xml.IXmlProperty"/> interface
            </summary>
        </member>
        <member name="T:urakawa.properties.xml.IXmlProperty">
            <summary>
            Interface for a <see cref="T:urakawa.core.property.IProperty"/> containing XML structural information
            about a <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
        </member>
        <member name="T:urakawa.core.property.IProperty">
            <summary>
            Common interface for properties
            </summary>
        </member>
        <member name="M:urakawa.core.property.IProperty.copy">
            <summary>
            The actual Property object implementations must define the semantics of such copy,
            as it has critical implications in terms of memory management, shared object pools, etc.
            e.g.: a ChannelsProperty that has Media objects pointing to actual files (like MP3 audio files)
            => Media should be sufficiently abstract and well-managed via the some sort of MediaAssetManager
            to guarantee that sharing conflicts are resolved transparently.
            </summary>
            <returns>A copy/clone of the current instance</returns>
        </member>
        <member name="M:urakawa.core.property.IProperty.getOwner">
            <summary>
            Gets the owner <see cref="T:urakawa.core.ICoreNode"/> of the <see cref="T:urakawa.core.property.IProperty"/> instance
            </summary>
            <returns>The owner</returns>
        </member>
        <member name="M:urakawa.core.property.IProperty.setOwner(urakawa.core.ICoreNode)">
            <summary>
            Sets the owner <see cref="T:urakawa.core.ICoreNode"/> of the <see cref="T:urakawa.core.property.IProperty"/> instance
            </summary>
            <param localName="newOwner">The new owner</param>
            <remarks>This function is intended for internal purposes only 
            and should not be called by users of the toolkit</remarks>
        </member>
        <member name="M:urakawa.properties.xml.IXmlProperty.getXmlType">
            <summary>
            Gets the <see cref="T:urakawa.properties.xml.XmlType"/> of the <see cref="T:urakawa.properties.xml.IXmlProperty"/>
            </summary>
            <returns>The <see cref="T:urakawa.properties.xml.XmlType"/></returns>
        </member>
        <member name="M:urakawa.properties.xml.IXmlProperty.getLocalName">
            <summary>
            Gets the local localName of the <see cref="T:urakawa.properties.xml.IXmlProperty"/>
            </summary>
            <returns>The local localName</returns>
        </member>
        <member name="M:urakawa.properties.xml.IXmlProperty.getNamespaceUri">
            <summary>
            Gets the namespace uri of the <see cref="T:urakawa.properties.xml.IXmlProperty"/>
            </summary>
            <returns>The namespace uri</returns>
        </member>
        <member name="M:urakawa.properties.xml.IXmlProperty.setQName(System.String,System.String)">
            <summary>
            Sets the QName of the <see cref="T:urakawa.properties.xml.IXmlProperty"/>
            </summary>
            <param localName="newName">The local localName part of the QName</param>
            <param localName="newNamespace">The namespace uri part of the QName</param>
        </member>
        <member name="M:urakawa.properties.xml.IXmlProperty.getListOfAttributes">
            <summary>
            Gets a <see cref="T:System.Collections.IList"/> of the <see cref="T:urakawa.properties.xml.IXmlAttribute"/>s
            of the <see cref="T:urakawa.properties.xml.IXmlProperty"/>
            </summary>
            <returns>The <see cref="T:System.Collections.IList"/></returns>
        </member>
        <member name="M:urakawa.properties.xml.IXmlProperty.setAttribute(urakawa.properties.xml.IXmlAttribute)">
            <summary>
            Sets an <see cref="T:urakawa.properties.xml.IXmlAttribute"/> of the <see cref="T:urakawa.properties.xml.IXmlProperty"/>
            </summary>
            <param localName="newAttribute">The new <see cref="T:urakawa.properties.xml.IXmlAttribute"/> </param>
            <returns>A <see cref="T:System.Boolean"/> indicating if an existing <see cref="T:urakawa.properties.xml.IXmlAttribute"/> was overwritten</returns>
        </member>
        <member name="M:urakawa.properties.xml.IXmlProperty.setAttribute(System.String,System.String,System.String)">
            <summary>
            Sets an <see cref="T:urakawa.properties.xml.IXmlAttribute"/> of the <see cref="T:urakawa.properties.xml.IXmlProperty"/>
            </summary>
            <param localName="localName">The local localName of the new <see cref="T:urakawa.properties.xml.IXmlAttribute"/></param>
            <param localName="namespaceUri">The namespace of the new <see cref="T:urakawa.properties.xml.IXmlAttribute"/></param>
            <param localName="value">The value of the new <see cref="T:urakawa.properties.xml.IXmlAttribute"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if an existing <see cref="T:urakawa.properties.xml.IXmlAttribute"/> was overwritten</returns>
        </member>
        <member name="M:urakawa.properties.xml.IXmlProperty.getAttribute(System.String,System.String)">
            <summary>
            Gets an <see cref="T:urakawa.properties.xml.IXmlAttribute"/> by QName
            </summary>
            <param localName="localName">The local localName of the <see cref="T:urakawa.properties.xml.IXmlAttribute"/> to get</param>
            <param localName="namespaceUri">The namespace of the <see cref="T:urakawa.properties.xml.IXmlAttribute"/> to get</param>
            <returns>The <see cref="T:urakawa.properties.xml.IXmlAttribute"/> with the given QName</returns>
        </member>
        <member name="M:urakawa.properties.xml.IXmlProperty.getXmlPropertyFactory">
            <summary>
            Gets the <see cref="T:urakawa.properties.xml.IXmlPropertyFactory"/> associated with <c>this</c> via the <see cref="T:urakawa.core.ICorePresentation"/>
            of the owning <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <returns>The <see cref="T:urakawa.properties.xml.IXmlPropertyFactory"/></returns>
            <exception cref="T:urakawa.exception.FactoryCanNotCreateTypeException">
            Thrown when the <see cref="T:urakawa.core.property.ICorePropertyFactory"/> of the <see cref="T:urakawa.core.ICorePresentation"/>
            of the <see cref="T:urakawa.core.ICoreNode"/> that owns <c>this</c> is not a subclass of <see cref="T:urakawa.properties.xml.IXmlPropertyFactory"/>
            </exception>
            <remarks>
            This method is conveniencs for 
            <c>(IXmlPropertyFactory)getOwner().getPresentation().getPropertyFactory()</c></remarks>
        </member>
        <member name="M:urakawa.properties.xml.XmlProperty.getXmlType">
            <summary>
            Gets the <see cref="T:urakawa.properties.xml.XmlType"/> of the <see cref="T:urakawa.properties.xml.XmlProperty"/>
            </summary>
            <returns>Always <see cref="F:urakawa.properties.xml.XmlType.ELEMENT"/></returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlProperty.getLocalName">
            <summary>
            Gets the local localName of <c>this</c>
            </summary>
            <returns>The local localName</returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlProperty.getNamespaceUri">
            <summary>
            Gets the namespace uri of <c>this</c>
            </summary>
            <returns>The namespace uri</returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlProperty.getXmlPropertyFactory">
            <summary>
            Gets the <see cref="T:urakawa.properties.xml.IXmlPropertyFactory"/> associated with <c>this</c> via the <see cref="T:urakawa.core.ICorePresentation"/>
            of the owning <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <returns>The <see cref="T:urakawa.properties.xml.IXmlPropertyFactory"/></returns>
            <exception cref="T:urakawa.exception.FactoryCanNotCreateTypeException">
            Thrown when the <see cref="T:urakawa.core.property.ICorePropertyFactory"/> of the <see cref="T:urakawa.core.ICorePresentation"/>
            of the <see cref="T:urakawa.core.ICoreNode"/> that owns <c>this</c> is not a subclass of <see cref="T:urakawa.properties.xml.IXmlPropertyFactory"/>
            </exception>
            <remarks>
            This method is conveniencs for 
            <c>(IXmlPropertyFactory)getOwner().getPresentation().getPropertyFactory()</c></remarks>
        </member>
        <member name="M:urakawa.properties.xml.XmlProperty.setQName(System.String,System.String)">
            <summary>
            Sets the QName of <c>this</c> (i.e. the local localName and namespace uri)
            </summary>
            <param localName="newName">
            The local localName part of the new QName
            - must not be <c>null</c> or <see cref="F:System.String.Empty"/>
            </param>
            <param localName="newNamespace">
            The namespace uri part of the new QName - must not be <c>null</c>
            </param>
        </member>
        <member name="M:urakawa.properties.xml.XmlProperty.getListOfAttributes">
            <summary>
            Gets a list of the <see cref="T:urakawa.properties.xml.IXmlAttribute"/>s of <c>this</c>
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlProperty.setAttribute(urakawa.properties.xml.IXmlAttribute)">
            <summary>
            Sets an <see cref="T:urakawa.properties.xml.IXmlAttribute"/>, possibly overwriting an existing one
            </summary>
            <param localName="newAttribute">The <see cref="T:urakawa.properties.xml.IXmlAttribute"/> to set</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if an existing <see cref="T:urakawa.properties.xml.IXmlAttribute"/> was overwritten</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the <see cref="T:urakawa.properties.xml.IXmlAttribute"/> to set is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.properties.xml.XmlProperty.setAttribute(System.String,System.String,System.String)">
            <summary>
            Sets an <see cref="T:urakawa.properties.xml.IXmlAttribute"/>, possibly overwriting an existing one
            </summary>
            <param localName="localName">The local localName of the new attribute</param>
            <param localName="namespaceUri">The namespace uri part of the new attribute</param>
            <param localName="value">The value of the new attribute</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if an existing <see cref="T:urakawa.properties.xml.IXmlAttribute"/> was overwritten</returns>
            <exception cref="T:urakawa.exception.FactoryCanNotCreateTypeException">
            <see cref="M:urakawa.properties.xml.XmlProperty.getXmlPropertyFactory"/> for information on when this <see cref="T:System.Exception"/> is thrown
            </exception>
        </member>
        <member name="M:urakawa.properties.xml.XmlProperty.getAttribute(System.String,System.String)">
            <summary>
            Gets the <see cref="T:urakawa.properties.xml.IXmlAttribute"/> with a given QName
            </summary>
            <param localName="localName">The local localName part of the given QName</param>
            <param localName="namespaceUri">The namespce uri part of the given QName</param>
            <returns>The <see cref="T:urakawa.properties.xml.IXmlAttribute"/> if found, otherwise <c>null</c></returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlProperty.copy">
            <summary>
            Creates a copy of <c>this</c> including copies of any <see cref="T:urakawa.properties.xml.IXmlAttribute"/>s
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlProperty.getOwner">
            <summary>
            Gets the owner <see cref="T:urakawa.core.ICoreNode"/> of <c>this</c>
            </summary>
            <returns>The owner</returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlProperty.setOwner(urakawa.core.ICoreNode)">
            <summary>
            Sets the owner <see cref="T:urakawa.core.ICoreNode"/> of <c>this</c> - intended for internal use,
            setting the owner manually may corrupt the core model
            </summary>
            <param localName="newOwner">The new owner</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the new owner is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.properties.xml.XmlProperty.XukIn(System.Xml.XmlReader)">
            <summary>
            Reads <c>this</c> from an xuk xml element
            </summary>
            <param localName="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the read was succesful</returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlProperty.XukOut(System.Xml.XmlWriter)">
            <summary>
            Writes <c>this</c> to a xuk xml element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the write was succesful</returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlProperty.getXukLocalName">
            <summary>
            Gets the local localName part of the QName representing a <see cref="T:urakawa.properties.xml.XmlProperty"/> in Xuk
            </summary>
            <returns>The local localName part</returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlProperty.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName representing a <see cref="T:urakawa.properties.xml.XmlProperty"/> in Xuk
            </summary>
            <returns>The namespace uri part</returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlProperty.ValueEquals(urakawa.core.property.IProperty)">
            <summary>
            Compares <c>this</c> with another <see cref="T:urakawa.core.property.IProperty"/> for equality.
            </summary>
            <param name="other">The other <see cref="T:urakawa.core.property.IProperty"/></param>
            <returns><c>true</c> if the <see cref="T:urakawa.core.property.IProperty"/>s are equal, otherwise <c>false</c></returns>
        </member>
        <member name="T:urakawa.media.SequenceMedia">
            <summary>
            SequenceMedia is a collection of same-type media objects
            The first object in the collection determines the collection's type.
            </summary>
        </member>
        <member name="T:urakawa.media.ISequenceMedia">
            <summary>
            A sequence is a collection of any media object.
            All objects in the collection must be of the same type.
            </summary>
        </member>
        <member name="M:urakawa.media.ISequenceMedia.getItem(System.Int32)">
            <summary>
            Return the media object at a given index.
            </summary>
            <param localName="index">The given index</param>
            <returns>The <see cref="T:urakawa.media.IMedia"/> item at the given index</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the given index is out of bounds
            </exception>
        </member>
        <member name="M:urakawa.media.ISequenceMedia.insertItem(System.Int32,urakawa.media.IMedia)">
            <summary>
            Inserts a given <see cref="T:urakawa.media.IMedia"/> item at a given index
            </summary>
            <param localName="index">The given index</param>
            <param localName="newItem">The given <see cref="T:urakawa.media.IMedia"/> item</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the given <see cref="T:urakawa.media.IMedia"/> to insert is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the given index is out of bounds
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsWrongTypeException">
            The <see cref="T:urakawa.media.IMedia"/> item to insert has a <see cref="T:urakawa.media.MediaType"/> that 
            is incompatible with the <see cref="T:urakawa.media.ISequenceMedia"/>
            </exception>
            <remarks>
            The first <see cref="T:urakawa.media.IMedia"/> inserted into an <see cref="T:urakawa.media.ISequenceMedia"/> 
            determines it's <see cref="T:urakawa.media.MediaType"/>. 
            Prior to the first insertion an <see cref="T:urakawa.media.ISequenceMedia"/> has <see cref="T:urakawa.media.MediaType"/>
            <see cref="F:urakawa.media.MediaType.EMPTY_SEQUENCE"/>
            </remarks>
        </member>
        <member name="M:urakawa.media.ISequenceMedia.removeItem(System.Int32)">
            <summary>
            Remove the <see cref="T:urakawa.media.IMedia"/> item at a given index.
            </summary>
            <param localName="index">The given index</param>
            <returns>The <see cref="T:urakawa.media.IMedia"/> item that was removed</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the given index is out of bounds
            </exception>
        </member>
        <member name="M:urakawa.media.ISequenceMedia.getCount">
            <summary>
            Return the number of <see cref="T:urakawa.media.IMedia"/> items in the sequence
            </summary>
            <returns>The number of <see cref="T:urakawa.media.IMedia"/> items</returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.#ctor(urakawa.media.IMediaFactory)">
            <summary>
            Constructor setting the associated <see cref="T:urakawa.media.IMediaFactory"/>
            </summary>
            <param localName="fact">
            The <see cref="T:urakawa.media.IMediaFactory"/> to associate the <see cref="T:urakawa.media.SequenceMedia"/> with
            </param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="fact"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.SequenceMedia.getItem(System.Int32)">
            <summary>
            Get the item at the given index
            </summary>
            <param localName="index">Index of the item to return</param>
            <returns>The <see cref="T:urakawa.media.IMedia"/> item at the given index</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the given index is out of bounds
            </exception>
        </member>
        <member name="M:urakawa.media.SequenceMedia.insertItem(System.Int32,urakawa.media.IMedia)">
            <summary>
            Inserts a given <see cref="T:urakawa.media.IMedia"/> item at a given index
            </summary>
            <param localName="index">The given index</param>
            <param localName="newItem">The given <see cref="T:urakawa.media.IMedia"/> item</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the given <see cref="T:urakawa.media.IMedia"/> to insert is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the given index is out of bounds
            </exception>
            <exception cref="T:urakawa.exception.MediaTypeIsIllegalException">
            The <see cref="T:urakawa.media.IMedia"/> item to insert has a <see cref="T:urakawa.media.MediaType"/> that 
            is incompatible with the <see cref="T:urakawa.media.SequenceMedia"/>
            </exception>
            <remarks>
            The first <see cref="T:urakawa.media.IMedia"/> inserted into an <see cref="T:urakawa.media.SequenceMedia"/> 
            determines it's <see cref="T:urakawa.media.MediaType"/>. 
            Prior to the first insertion an <see cref="T:urakawa.media.SequenceMedia"/> has <see cref="T:urakawa.media.MediaType"/>
            <see cref="F:urakawa.media.MediaType.EMPTY_SEQUENCE"/>
            </remarks>
        </member>
        <member name="M:urakawa.media.SequenceMedia.removeItem(System.Int32)">
            <summary>
            Remove an item from the sequence.
            </summary>
            <param localName="index">The index of the item to remove.</param>
            <returns>The removed <see cref="T:urakawa.media.IMedia"/> item</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the given index is out of bounds
            </exception>
        </member>
        <member name="M:urakawa.media.SequenceMedia.getCount">
            <summary>
            Return the number of items in the sequence.
            </summary>
            <returns>The number of items</returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.getMediaFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.IMediaFactory"/> associated with the <see cref="T:urakawa.media.ISequenceMedia"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.IMediaFactory"/></returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.isContinuous">
            <summary>
            Use the first item in the collection to determine if this sequence is continuous or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.isDiscrete">
            <summary>
            Use the first item in the collection to determine if this 
            sequence is discrete or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.isSequence">
            <summary>
            This function always returns true, because this 
            object is always considered to be a sequence (even if it contains only one item).
            </summary>
            <returns><c>true</c></returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.getMediaType">
            <summary>
            If the sequence is non-empty, then this function will return the <see cref="T:urakawa.media.MediaType"/> of
            <see cref="T:urakawa.media.IMedia"/> items it contains (it will only contain one type at a time)
            If the sequence is empty, this function will return <see cref="F:urakawa.media.MediaType.EMPTY_SEQUENCE"/>.
            </summary>
            <returns>The <see cref="T:urakawa.media.MediaType"/></returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.copy">
            <summary>
            Make a copy of this media sequence
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.isAllowed(urakawa.media.IMedia)">
            <summary>
            test a new media object to see if it can belong to this collection 
            (only objects of the same type are allowed)
            </summary>
            <param localName="proposedAddition"></param>
            <returns></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the proposed addition is null
            </exception>
        </member>
        <member name="M:urakawa.media.SequenceMedia.XukIn(System.Xml.XmlReader)">
            <summary>
            Reads the <see cref="T:urakawa.media.SequenceMedia"/> from an xuk element
            </summary>
            <param localName="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the read was succesful</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the <paramref localName="source"/> <see cref="T:System.Xml.XmlReader"/> is null
            </exception>
        </member>
        <member name="M:urakawa.media.SequenceMedia.XukOut(System.Xml.XmlWriter)">
            <summary>
            Writes the <see cref="T:urakawa.media.SequenceMedia"/> to an xuk element
            </summary>
            <param localName="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the swrite was succesful</returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.getXukLocalName">
            <summary>
            Gets the local localName part of the QName representing a <see cref="T:urakawa.media.SequenceMedia"/> in Xuk
            </summary>
            <returns>The local localName part</returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName representing a <see cref="T:urakawa.media.SequenceMedia"/> in Xuk
            </summary>
            <returns>The namespace uri part</returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.ValueEquals(urakawa.media.IMedia)">
            <summary>
            Conpares <c>this</c> with a given other <see cref="T:urakawa.media.IMedia"/> for equality
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.IMedia"/></param>
            <returns><c>true</c> if equal, otherwise <c>false</c></returns>
        </member>
        <member name="T:urakawa.media.data.IDataProviderFactory">
            <summary>
            Interface for a factory creating <see cref="T:urakawa.media.data.IDataProvider"/>s
            </summary>
        </member>
        <member name="M:urakawa.media.data.IDataProviderFactory.getDataProviderManager">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IDataProviderManager"/> associated with the <see cref="T:urakawa.media.data.IDataProviderFactory"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IDataProviderManager"/></returns>
        </member>
        <member name="M:urakawa.media.data.IDataProviderFactory.createDataProvider">
            <summary>
            Creates a <see cref="T:urakawa.media.data.IDataProvider"/> instance of default <see cref="T:System.Type"/>
            </summary>
            <returns>The created instance</returns>
        </member>
        <member name="M:urakawa.media.data.IDataProviderFactory.createDataProvider(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.media.data.IDataProvider"/> instance of <see cref="T:System.Type"/> matching a given XUK QName
            </summary>
            <param name="xukLocalName">The local name part of the given XUK QName</param>
            <param name="xukNamespaceUri">The namespace uri part of the given XUK QName</param>
            <returns>The created instance</returns>
        </member>
        <member name="T:urakawa.exception.CheckedException">
            <summary>
            Summary description for CheckedException.
            Exceptions of this type must be caught.
            </summary>
        </member>
        <member name="M:urakawa.exception.CheckedException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.CheckedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.NodeDoesNotExistException">
            <summary>
            Exception thrown when a node does not exists in a child collection
            </summary>
        </member>
        <member name="M:urakawa.exception.NodeDoesNotExistException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.NodeDoesNotExistException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.NodeNotDetachedException">
            <summary>
            Exception thrown when trying to insert a node that is not detached
            </summary>
        </member>
        <member name="M:urakawa.exception.NodeNotDetachedException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.NodeNotDetachedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.NodeAlreadyExistException">
            <summary>
            Exception thrown when a previous matching node exists in a child collection, where nodes are supposed to be exclusive
            </summary>
        </member>
        <member name="M:urakawa.exception.NodeAlreadyExistException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.NodeAlreadyExistException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.MethodParameterIsInvalidException">
            <summary>
            Abstract class to encapsulate errors related to wrong values for method parameters.
            This class cannot be instanciated and should be sub-classed.
            The aim is to avoid situations where values that are potentially
            detrimental to software integrity are silently ignored, or "swallowed".
            </summary>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsInvalidException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.MethodParameterIsWrongTypeException">
            <summary>
            Some methods have stricter type rules than specified by the method signature.
            This exception should be raised when such type rules are broken.
            </summary>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsWrongTypeException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsWrongTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.MethodParameterIsNullException">
            <summary>
            Some methods forbid passing NULL values.
            This exception should be raised when NULL values are passed.
            </summary>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsNullException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsNullException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            <summary>
            Some methods have parameters of numeric type (float, int, uint, etc.).
            This exception should be thrown when values are out of allowed bounds.
            </summary>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsOutOfBoundsException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsOutOfBoundsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.MethodParameterIsEmptyStringException">
            <summary>
            Some methods forbid passing empty String values.
             This exception should be thrown when empty String values are passed.
            </summary>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsEmptyStringException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsEmptyStringException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.ChannelDoesNotExistException">
            <summary>
            This exception should be thrown when trying to remove a Channel
            whose localName does not exist in the list of current channels.
            </summary>
        </member>
        <member name="M:urakawa.exception.ChannelDoesNotExistException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.ChannelDoesNotExistException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.ChannelAlreadyExistsException">
            <summary>
            This exception should be thrown when trying to add a Channel
            whose localName is already used in the list of current channels.
            </summary>
        </member>
        <member name="M:urakawa.exception.ChannelAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.ChannelAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.MediaTypeIsIllegalException">
            <summary>
            This exception should be raised when trying to use a MediaType that is not legal in the current context.
            </summary>
        </member>
        <member name="M:urakawa.exception.MediaTypeIsIllegalException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.MediaTypeIsIllegalException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.TimeOffsetIsNegativeException">
            <summary>
            This exception should be raised when trying to use a time offset that is not allowed to be negative.
            </summary>
        </member>
        <member name="M:urakawa.exception.TimeOffsetIsNegativeException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.TimeOffsetIsNegativeException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.TimeStringRepresentationIsInvalidException">
            <summary>
            This exception should be raised when trying to parse an invalid time string representation
            </summary>
        </member>
        <member name="M:urakawa.exception.TimeStringRepresentationIsInvalidException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.TimeStringRepresentationIsInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.UncheckedException">
            <summary>
            Unchecked exceptions do not require catching and handling
            </summary>
        </member>
        <member name="M:urakawa.exception.UncheckedException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.UncheckedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.OperationNotValidException">
            <summary>
            (from the design docs)
            This exception should be thrown/raised when trying to
            call an operation (aka class method) on an object that does not
            allow a specific modification of the state in the current context.
            ...
            Wherever a "canDoXXX()" method can be found, the corresponding operation "doXXX()"
            should use this exception/error to let the user-agent of the API/Toolkit
            know about the non-permitted operation for which there was an attempt to execute.
            </summary>
        </member>
        <member name="M:urakawa.exception.OperationNotValidException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.OperationNotValidException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.PropertyTypeIsIllegalException">
            <summary>
            This exception should be raised when trying to use a PropertyType that is not legal in the current context.
            </summary>
        </member>
        <member name="M:urakawa.exception.PropertyTypeIsIllegalException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.PropertyTypeIsIllegalException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.FactoryCanNotCreateTypeException">
            <summary>
            Exception thrown when a factory unexpectedly can not create an object of the desired type
            </summary>
        </member>
        <member name="M:urakawa.exception.FactoryCanNotCreateTypeException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.FactoryCanNotCreateTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.FactoryIsMissingException">
            <summary>
            Exception thrown when a factory is missing
            </summary>
        </member>
        <member name="M:urakawa.exception.FactoryIsMissingException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.FactoryIsMissingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.NodeInDifferentPresentationException">
            <summary>
            Exception thrown when a node belongs to a different presentation than expected
            </summary>
        </member>
        <member name="M:urakawa.exception.NodeInDifferentPresentationException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.NodeInDifferentPresentationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.NodeIsAncestorException">
            <summary>
            Exception thrown when a node belongs to a different presentation than expected
            </summary>
        </member>
        <member name="M:urakawa.exception.NodeIsAncestorException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.NodeIsAncestorException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.NodeIsDescendantException">
            <summary>
            Exception thrown when a node belongs to a different presentation than expected
            </summary>
        </member>
        <member name="M:urakawa.exception.NodeIsDescendantException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.NodeIsDescendantException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.NodeIsSelfException">
            <summary>
            Exception thrown when a node belongs to a different presentation than expected
            </summary>
        </member>
        <member name="M:urakawa.exception.NodeIsSelfException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.NodeIsSelfException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.NodeHasParentException">
            <summary>
            Exception thrown when a node belongs to a different presentation than expected
            </summary>
        </member>
        <member name="M:urakawa.exception.NodeHasParentException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.NodeHasParentException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.NodeHasNoParentException">
            <summary>
            Exception thrown when a node belongs to a different presentation than expected
            </summary>
        </member>
        <member name="M:urakawa.exception.NodeHasNoParentException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.NodeHasNoParentException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.IsNotInitializedException">
            <summary>
            Exception thrown when an object is being used before it has been initialized
            </summary>
        </member>
        <member name="M:urakawa.exception.IsNotInitializedException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.IsNotInitializedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.IsAlreadyInitializedException">
            <summary>
            Exception thrown when trying to initialize an object that has already been initialized
            </summary>
        </member>
        <member name="M:urakawa.exception.IsAlreadyInitializedException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.IsAlreadyInitializedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.IsNotManagerOfException">
            <summary>
            Thrown when a given <see cref="T:System.Object"/> is not managed by a manager
            </summary>
        </member>
        <member name="M:urakawa.exception.IsNotManagerOfException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.IsNotManagerOfException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.InvalidDataFormatException">
            <summary>
            Thrown when data does not conform to an expected data format,
            eg. when encountering an invalid WAVE header
            </summary>
        </member>
        <member name="M:urakawa.exception.InvalidDataFormatException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.InvalidDataFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.InputStreamIsTooShortException">
            <summary>
            Thrown when an input <see cref="T:System.IO.Stream"/> is shorter than excepted,
            that is there are too few <see cref="T:System.Byte"/>s between the current <see cref="P:System.IO.Stream.Position"/> 
            and the end of the <see cref="T:System.IO.Stream"/> (<see cref="P:System.IO.Stream.Length"/>)
            </summary>
        </member>
        <member name="M:urakawa.exception.InputStreamIsTooShortException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.InputStreamIsTooShortException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.MethodParameterHasNoItemsException">
            <summary>
            Thrown when a collection/enumeration of items passed as a parameter unexpectedly contains no items
            </summary>
        </member>
        <member name="M:urakawa.exception.MethodParameterHasNoItemsException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.MethodParameterHasNoItemsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.core.ICoreNodeWriteOnlyMethods">
            <summary>
            Provides the write-only tree methods of a <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
        </member>
        <member name="M:urakawa.core.ICoreNodeWriteOnlyMethods.setParent(urakawa.core.ICoreNode)">
            <summary>
            Sets the parent <see cref="T:urakawa.core.ICoreNode"/>. For internal use only, should not be called by users
            </summary>
            <param localName="node">The new parent</param>
        </member>
        <member name="M:urakawa.core.ICoreNodeWriteOnlyMethods.insert(urakawa.core.ICoreNode,System.Int32)">
            <summary>
            Inserts a <see cref="T:urakawa.core.ICoreNode"/> child at a given index. 
            The index of any children at or after the given index are increased by one
            </summary>
            <param localName="node">The new child <see cref="T:urakawa.core.ICoreNode"/> to insert,
            must be between 0 and the number of children as returned by member method 
            <see cref="M:urakawa.core.ICoreNodeReadOnlyMethods.getChildCount"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="node"/> is null</exception>
            <param localName="insertIndex">The index at which to insert the new child</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="insertIndex"/> is out if range, 
            that is not between 0 and <c><see cref="M:urakawa.core.ICoreNodeReadOnlyMethods.getChildCount"/>()</c></exception>
        </member>
        <member name="M:urakawa.core.ICoreNodeWriteOnlyMethods.detach">
            <summary>
            Detaches the instance <see cref="T:urakawa.core.ICoreNode"/> from it's parent's children
            </summary>
            <returns>The detached <see cref="T:urakawa.core.ICoreNode"/> (i.e. <c>this</c>)</returns>
        </member>
        <member name="M:urakawa.core.ICoreNodeWriteOnlyMethods.removeChild(System.Int32)">
            <summary>
            Removes the child at a given index. 
            </summary>
            <param localName="index">The given index</param>
            <returns>The removed child</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="index"/> is out of bounds, 
            that is not the index of a child 
            (child indexes range from 0 to <c><see cref="M:urakawa.core.ICoreNodeReadOnlyMethods.getChildCount"/>()-1</c>)
            </exception>
        </member>
        <member name="M:urakawa.core.ICoreNodeWriteOnlyMethods.removeChild(urakawa.core.ICoreNode)">
            <summary>
            Removes a given <see cref="T:urakawa.core.ICoreNode"/> child. 
            </summary>
            <param localName="node">The <see cref="T:urakawa.core.ICoreNode"/> child to remove</param>
            <returns>The removed child</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paramref localName="node"/> is null</exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="node"/> is not a child of the instance <see cref="T:urakawa.core.ICoreNode"/></exception>
        </member>
        <member name="M:urakawa.core.ICoreNodeWriteOnlyMethods.insertBefore(urakawa.core.ICoreNode,urakawa.core.ICoreNode)">
            <summary>
            Inserts a new <see cref="T:urakawa.core.ICoreNode"/> child before the given child.
            </summary>
            <param localName="newChild">The new <see cref="T:urakawa.core.ICoreNode"/> child node</param>
            <param localName="anchorNode">The child before which to insert the new child</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameters <paramref localName="newChild"/> and/or <paramref localName="anchorNode"/> 
            have null values</exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="anchorNode"/> is not a child of the instance <see cref="T:urakawa.core.ICoreNode"/></exception>
        </member>
        <member name="M:urakawa.core.ICoreNodeWriteOnlyMethods.insertAfter(urakawa.core.ICoreNode,urakawa.core.ICoreNode)">
            <summary>
            Inserts a new <see cref="T:urakawa.core.ICoreNode"/> child after the given child.
            </summary>
            <param localName="newNode">The new <see cref="T:urakawa.core.ICoreNode"/> child node</param>
            <param localName="anchorNode">The child after which to insert the new child</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameters <paramref localName="newNode"/> and/or <paramref localName="anchorNode"/> 
            have null values</exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="anchorNode"/> is not a child of the instance <see cref="T:urakawa.core.ICoreNode"/></exception>
        </member>
        <member name="M:urakawa.core.ICoreNodeWriteOnlyMethods.replaceChild(urakawa.core.ICoreNode,System.Int32)">
            <summary>
            Replaces the child <see cref="T:urakawa.core.ICoreNode"/> at a given index with a new <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <param localName="node">The new <see cref="T:urakawa.core.ICoreNode"/> with which to replace</param>
            <param localName="index">The index of the child <see cref="T:urakawa.core.ICoreNode"/> to replace</param>
            <returns>The replaced child <see cref="T:urakawa.core.ICoreNode"/></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paranref localName="node"/> is null</exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when index is out if range, 
            that is when <paramref localName="index"/> is not between 0 
            and <c><see cref="M:urakawa.core.ICoreNodeReadOnlyMethods.getChildCount"/>()-1</c>c&gt;</exception>
        </member>
        <member name="M:urakawa.core.ICoreNodeWriteOnlyMethods.replaceChild(urakawa.core.ICoreNode,urakawa.core.ICoreNode)">
            <summary>
            Replaces an existing child <see cref="T:urakawa.core.ICoreNode"/> with i new one
            </summary>
            <param localName="node">The new child with which to replace</param>
            <param localName="oldNode">The existing child node to replace</param>
            <returns>The replaced <see cref="T:urakawa.core.ICoreNode"/> child</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameters <paramref localName="node"/> and/or <paramref localName="oldNode"/> 
            have null values</exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="oldNode"/> is not a child of the instance <see cref="T:urakawa.core.ICoreNode"/></exception>
        </member>
        <member name="M:urakawa.core.ICoreNodeWriteOnlyMethods.appendChild(urakawa.core.ICoreNode)">
            <summary>
            Appends a child <see cref="T:urakawa.core.ICoreNode"/> to the end of the list of children
            </summary>
            <param localName="node">The new child to append</param>
        </member>
        <member name="M:urakawa.core.ICoreNodeWriteOnlyMethods.appendChildrenOf(urakawa.core.ICoreNode)">
            <summary>
            Appends the children of a given <see cref="T:urakawa.core.ICoreNode"/> to <c>this</c>, 
            leaving the given <see cref="T:urakawa.core.ICoreNode"/> without children
            </summary>
            <param localName="node">The given <see cref="T:urakawa.core.ICoreNode"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paramref localName="node"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeInDifferentPresentationException">
            Thrown when parameter <paramref localName="node"/> belongs to a different <see cref="T:urakawa.core.ICorePresentation"/>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsAncestorException">
            Thrown when parameter <paramref localName="node"/> is an ancestor of <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsDescendantException">
            Thrown when <paramref localName="node"/> is a descendant of <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsSelfException">
            Thrown when parameter <paramref localName="node"/> is identical to <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.core.ICoreNodeWriteOnlyMethods.swapWith(urakawa.core.ICoreNode)">
            <summary>
            Swaps <c>this</c> with a given <see cref="T:urakawa.core.ICoreNode"/> 
            </summary>
            <param localName="node">The given <see cref="T:urakawa.core.ICoreNode"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paramref localName="node"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeInDifferentPresentationException">
            Thrown when parameter <paramref localName="node"/> belongs to a different <see cref="T:urakawa.core.ICorePresentation"/>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsAncestorException">
            Thrown when parameter <paramref localName="node"/> is an ancestor of <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsDescendantException">
            Thrown when <paramref localName="node"/> is a descendant of <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsSelfException">
            Thrown when parameter <paramref localName="node"/> is identical to <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.core.ICoreNodeWriteOnlyMethods.splitChildren(System.Int32,System.Boolean)">
            <summary>
            Splits <c>this</c> at the child at a given <paramref localName="index"/>, 
            producing a new <see cref="T:urakawa.core.ICoreNode"/> with the children 
            at indexes <c><paramref localName="index"/></c> to <c>getChildCount()-1</c> 
            and leaving <c>this</c> with the children at indexes <c>0</c> to <paramref localName="index"/>-1
            </summary>
            <param localName="index">The index of the child at which to split</param>
            <param localName="copyProperties">
            A <see cref="T:System.Boolean"/> indicating the <see cref="T:urakawa.core.property.IProperty"/>s of <c>this</c> 
            should be copied to the new <see cref="T:urakawa.core.ICoreNode"/>
            </param>
            <returns>
            The new <see cref="T:urakawa.core.ICoreNode"/> with the children 
            at indexes <c><paramref localName="index"/></c> to <c>getChildCount()-1</c> 
            and optionally with a copy of the <see cref="T:urakawa.core.property.IProperty"/>s
            </returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="index"/> is out of bounds, 
            that is not between <c>0</c> and <c>getChildCount()-1</c>
            </exception>
        </member>
        <member name="M:urakawa.core.ICoreNodeWriteOnlyMethods.swapWithPreviousSibling">
            <summary>
            Swaps <c>this</c> with the previous sibling of <c>this</c>
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> indicating if the swap was succesfull 
            (the swap is not succesfull when there is no previous sibling).
            </returns>
        </member>
        <member name="M:urakawa.core.ICoreNodeWriteOnlyMethods.swapWithNextSibling">
            <summary>
            Swaps <c>this</c> with the next sibling of <c>this</c>
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> indicating if the swap was succesfull 
            (the swap is not succesfull when there is no next sibling).
            </returns>
        </member>
        <member name="T:urakawa.navigation.TypeFilterNavigator`1">
            <summary>
            The <see cref="T:urakawa.navigation.TypeFilterNavigator`1"/> is an concrete implementation of the <see cref="T:urakawa.navigation.AbstractFilterNavigator"/>
            that navigates a virtual forest of trees obtained from a <see cref="T:urakawa.core.ICoreNode"/> tree by fintering
            on the basis of <see cref="T:System.Type"/>, more specifically on sub-type of <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <typeparam name="T">The <see cref="T:urakawa.core.ICoreNode"/> subclass by which to filter</typeparam>
        </member>
        <member name="T:urakawa.navigation.AbstractFilterNavigator">
            <summary>
            An abstract class providing the main functionality of a <see cref="T:urakawa.navigation.AbstractFilterNavigator"/>,
            that is a <see cref="T:urakawa.navigation.INavigator"/> navigating a forest of <see cref="T:urakawa.core.CoreNode"/> obtained by filtering
            an actual <see cref="T:urakawa.core.CoreNode"/> tree
            </summary>
        </member>
        <member name="T:urakawa.navigation.INavigator">
            <summary>
            Generic interface for a <see cref="T:urakawa.core.ICoreNode"/> forest navigator providing methods for navigation 
            but not for manipulation of virtual trees in a virtual forest
            </summary>
        </member>
        <member name="M:urakawa.navigation.INavigator.getParent(urakawa.core.ICoreNode)">
            <summary>
            Gets the parent <see cref="T:urakawa.core.ICoreNode"/> of a given context <see cref="T:urakawa.core.ICoreNode"/> in the virtual tree
            </summary>
            <param localName="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The parent <see cref="T:urakawa.core.ICoreNode"/> or <c>null</c> if no such <see cref="T:urakawa.core.ICoreNode"/> exists.</returns>
        </member>
        <member name="M:urakawa.navigation.INavigator.getPreviousSibling(urakawa.core.ICoreNode)">
            <summary>
            Gets the previous sibling of a given context <see cref="T:urakawa.core.ICoreNode"/> in the virtual tree
            </summary>
            <param localName="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The previous sibling <see cref="T:urakawa.core.ICoreNode"/> or <c>null</c> if no such <see cref="T:urakawa.core.ICoreNode"/> exists.</returns>
        </member>
        <member name="M:urakawa.navigation.INavigator.getNextSibling(urakawa.core.ICoreNode)">
            <summary>
            Gets the next sibling of a given context <see cref="T:urakawa.core.ICoreNode"/> in the virtual tree
            </summary>
            <param localName="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The next sibling <see cref="T:urakawa.core.ICoreNode"/> or <c>null</c> if no such <see cref="T:urakawa.core.ICoreNode"/> exists.</returns>
        </member>
        <member name="M:urakawa.navigation.INavigator.getChildCount(urakawa.core.ICoreNode)">
            <summary>
            Gets the number of children of a given context <see cref="T:urakawa.core.ICoreNode"/> in the virtual tree
            </summary>
            <param localName="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The number of children</returns>
        </member>
        <member name="M:urakawa.navigation.INavigator.getChild(urakawa.core.ICoreNode,System.Int32)">
            <summary>
            Gets the child of a given context <see cref="T:urakawa.core.ICoreNode"/> at a given index in the virtual tree
            </summary>
            <param localName="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <param localName="index">The given index</param>
            <returns>The child <see cref="T:urakawa.core.ICoreNode"/> at the given index</returns>
        </member>
        <member name="M:urakawa.navigation.INavigator.getPrevious(urakawa.core.ICoreNode)">
            <summary>
            Gets the previous <see cref="T:urakawa.core.ICoreNode"/> of a given context <see cref="T:urakawa.core.ICoreNode"/>
            in depth first traversal order of the virtual forest
            </summary>
            <param localName="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The previous <see cref="T:urakawa.core.ICoreNode"/></returns>
        </member>
        <member name="M:urakawa.navigation.INavigator.getNext(urakawa.core.ICoreNode)">
            <summary>
            Gets the next <see cref="T:urakawa.core.ICoreNode"/> of a given context <see cref="T:urakawa.core.ICoreNode"/>
            in depth first traversal order of the virtual forest
            </summary>
            <param localName="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The next <see cref="T:urakawa.core.ICoreNode"/></returns>
        </member>
        <member name="M:urakawa.navigation.INavigator.getSubForestIterator(urakawa.core.ICoreNode)">
            <summary>
            Gets an enumerator enumerating the virtual sub-forest starting at a given start <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <param localName="startNode">The given</param>
            <returns>The enumerator</returns>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.isIncluded(urakawa.core.ICoreNode)">
            <summary>
            Determines if a given <see cref="T:urakawa.core.ICoreNode"/> is included by the filter of the <see cref="T:urakawa.navigation.AbstractFilterNavigator"/> instance.
            Concrete classes must implement this method to determine the behaviour of the filter navigator
            </summary>
            <param localName="node">The given <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if <paramref localName="node"/> is included by the filter of the
            <see cref="T:urakawa.navigation.AbstractFilterNavigator"/> instance</returns>
            <remarks>In derived concrete classes the implementation of this abstract method defines the filter</remarks>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getParent(urakawa.core.ICoreNode)">
            <summary>
            Gets the parent <see cref="T:urakawa.core.ICoreNode"/> of a given context <see cref="T:urakawa.core.ICoreNode"/> in the filtered tree
            </summary>
            <param localName="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The parent <see cref="T:urakawa.core.ICoreNode"/> or <c>null</c> if no such <see cref="T:urakawa.core.ICoreNode"/> exists.</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="context"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getPreviousSibling(urakawa.core.ICoreNode)">
            <summary>
            Gets the previous sibling of a given context <see cref="T:urakawa.core.ICoreNode"/> in the filtered tree
            </summary>
            <param localName="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The previous sibling <see cref="T:urakawa.core.ICoreNode"/> or <c>null</c> if no such <see cref="T:urakawa.core.ICoreNode"/> exists.</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="context"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getLastChild(urakawa.core.ICoreNode)">
            <summary>
            Finds the last child <see cref="T:urakawa.core.ICoreNode"/> of a given context <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <param name="context">The context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The last child or <c>null</c> if the context <see cref="T:urakawa.core.ICoreNode"/> has no children</returns>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getNextSibling(urakawa.core.ICoreNode)">
            <summary>
            Gets the next sibling of a given context <see cref="T:urakawa.core.ICoreNode"/> in the filtered tree
            </summary>
            <param localName="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The next sibling <see cref="T:urakawa.core.ICoreNode"/> or <c>null</c> if no such <see cref="T:urakawa.core.ICoreNode"/> exists.</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="context"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getFirstChild(urakawa.core.ICoreNode)">
            <summary>
            Finds the first
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getChildCount(urakawa.core.ICoreNode)">
            <summary>
            Gets the number of children of a given context <see cref="T:urakawa.core.ICoreNode"/> in the filtered tree
            </summary>
            <param localName="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The number of children</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="context"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.findChildren(urakawa.core.ICoreNode,System.Collections.Generic.List{urakawa.core.ICoreNode})">
            <summary>
            Recursively finds the children of a given context <see cref="T:urakawa.core.ICoreNode"/> and adds 
            then to a given child list
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <param name="childList">The given child <see cref="T:System.Collections.Generic.List`1"/></param>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.indexOf(urakawa.core.ICoreNode)">
            <summary>
            Gets the index of a given context <see cref="T:urakawa.core.ICoreNode"/> as a child of it's parent <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <param name="context">The context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>
            The index or <c>-1</c> if <paramref name="context"/> does not have a parent
            </returns>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.findIndexOf(urakawa.core.ICoreNode,urakawa.core.ICoreNode,System.Int32@)">
            <summary>
            Finds the index of a given <see cref="T:urakawa.core.ICoreNode"/> as the child of a given context <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <param name="childToFind">The given <see cref="T:urakawa.core.ICoreNode"/> child</param>
            <param name="index">Reference holding the index</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the index was found,
            that is if the child <see cref="T:urakawa.core.ICoreNode"/> is in fact a child 
            of the given context <see cref="T:urakawa.core.ICoreNode"/>
            </returns>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.findChildAtIndex(urakawa.core.ICoreNode,System.Int32,System.Int32@)">
            <summary>
            Recursively finds the child <see cref="T:urakawa.core.ICoreNode"/> of a given context <see cref="T:urakawa.core.ICoreNode"/> 
            at a given index
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <param name="index">The given index</param>
            <param name="acumIndex">The accumulated index</param>
            <returns>The child <see cref="T:urakawa.core.ICoreNode"/> at the given index 
            - <c>null</c> if there is no child at the given index</returns>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getChild(urakawa.core.ICoreNode,System.Int32)">
            <summary>
            Gets the child of a given context <see cref="T:urakawa.core.ICoreNode"/> at a given index in the filtered tree
            </summary>
            <param localName="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <param localName="index">The given index</param>
            <returns>The child <see cref="T:urakawa.core.ICoreNode"/> at the given index</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="context"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getPrevious(urakawa.core.ICoreNode)">
            <summary>
            Gets the previous <see cref="T:urakawa.core.ICoreNode"/> of a given context <see cref="T:urakawa.core.ICoreNode"/>
            in depth first traversal order of the filtered forest
            </summary>
            <param localName="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The previous <see cref="T:urakawa.core.ICoreNode"/></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="context"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getUnfilteredPrevious(urakawa.core.ICoreNode)">
            <summary>
            Finds the previous <see cref="T:urakawa.core.ICoreNode"/> of a given context <see cref="T:urakawa.core.ICoreNode"/>
            in the unfiltered source tree
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The previous <see cref="T:urakawa.core.ICoreNode"/></returns>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getNext(urakawa.core.ICoreNode)">
            <summary>
            Gets the next <see cref="T:urakawa.core.ICoreNode"/> of a given context <see cref="T:urakawa.core.ICoreNode"/>
            in depth first traversal order of the filtered forest
            </summary>
            <param localName="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The next <see cref="T:urakawa.core.ICoreNode"/></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="context"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getUnfilteredNext(urakawa.core.ICoreNode)">
            <summary>
            Finds the next <see cref="T:urakawa.core.ICoreNode"/> of a given context <see cref="T:urakawa.core.ICoreNode"/>
            in the unfiltered source tree
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The next <see cref="T:urakawa.core.ICoreNode"/></returns>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getSubForestIterator(urakawa.core.ICoreNode)">
            <summary>
            Gets an enumerator enumerating the filtered sub-tree starting at a given start <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <param localName="startNode">The given</param>
            <returns>The enumerator</returns>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.generateSubtree(urakawa.core.ICoreNode,System.Collections.Generic.List{urakawa.core.ICoreNode})">
            <summary>
            Adds any included <see cref="T:urakawa.core.ICoreNode"/>s of the subtree starting at a given context <see cref="T:urakawa.core.ICoreNode"/>
            to a given <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.ICoreNode"/></param>
            <param name="subtree">The given <see cref="T:System.Collections.Generic.List`1"/></param>
        </member>
        <member name="M:urakawa.navigation.TypeFilterNavigator`1.isIncluded(urakawa.core.ICoreNode)">
            <summary>
            Determines if a given <see cref="T:urakawa.core.ICoreNode"/> is included by the filter of the <see cref="T:urakawa.navigation.TypeFilterNavigator`1"/>,
            that is if the given <see cref="T:urakawa.core.ICoreNode"/> is a <typeparamref name="T"/>
            </summary>
            <param name="node">The <see cref="T:urakawa.core.ICoreNode"/> to test</param>
            <returns><c>true</c> if <paramref name="node"/> is a <typeparamref name="T"/>, otherwise <c>false</c></returns>
        </member>
        <member name="M:urakawa.navigation.TypeFilterNavigator`1.getNext(urakawa.core.ICoreNode)">
            <summary>
            Gets the next <see cref="T:urakawa.core.ICoreNode"/> (or rather <typeparamref name="T"/>) of the filtered forest of trees
            in depth first order, following a given context <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <param name="context">The context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The next <typeparamref name="T"/> node or null if no next <typeparamref name="T"/> node exists</returns>
        </member>
        <member name="M:urakawa.navigation.TypeFilterNavigator`1.getPrevious(urakawa.core.ICoreNode)">
            <summary>
            Gets the previous <see cref="T:urakawa.core.ICoreNode"/> (or rather <typeparamref name="T"/>) of the filtered forest of trees
            in depth first order, preceding a given context <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <param name="context">The context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The previuos <typeparamref name="T"/> node or null if no previous <typeparamref name="T"/> node exists</returns>
        </member>
        <member name="M:urakawa.navigation.TypeFilterNavigator`1.getChild(urakawa.core.ICoreNode,System.Int32)">
            <summary>
            Gets the child <see cref="T:urakawa.core.ICoreNode"/> (or rather <typeparamref name="T"/>) of the filtered forest of tree
            at a given index of a given context <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <param name="context">The context <see cref="T:urakawa.core.ICoreNode"/></param>
            <param name="index">The given index</param>
            <returns>
            The child <typeparamref name="T"/> node of <paramref name="context"/> at index <paramref name="i ndex"/>,
            or <c>null</c> if no such child exists
            </returns>
        </member>
        <member name="M:urakawa.navigation.TypeFilterNavigator`1.getNextSibling(urakawa.core.ICoreNode)">
            <summary>
            Gets the next sibling <see cref="T:urakawa.core.ICoreNode"/> (or rather <typeparamref name="T"/>) in the filtered forest of trees
            of a given context <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <param name="context">The context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The next sibling <typeparamref name="T"/> node or <c>null</c> if no next sibling <typeparamref name="T"/> exists</returns>
        </member>
        <member name="M:urakawa.navigation.TypeFilterNavigator`1.getPreviousSibling(urakawa.core.ICoreNode)">
            <summary>
            Gets the previous sibling <see cref="T:urakawa.core.ICoreNode"/> (or rather <typeparamref name="T"/>) in the filtered forest of trees
            of a given context <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <param name="context">The context <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The next sibling <typeparamref name="T"/> node or <c>null</c> if no next sibling <typeparamref name="T"/> exists</returns>
        </member>
        <member name="M:urakawa.navigation.TypeFilterNavigator`1.getSubForestIterator(urakawa.core.ICoreNode)">
            <summary>
            Gets an enumerator enumerating the filtered sub-tree starting at a given start <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <param localName="startNode">The given</param>
            <returns>The enumerator</returns>
        </member>
        <member name="T:urakawa.media.IMediaLocation">
            <summary>
            Simple interface used to correlate a media object to its actual file
            </summary>
        </member>
        <member name="M:urakawa.media.IMediaLocation.copy">
            <summary>
            Copy the <see cref="T:urakawa.media.IMediaLocation"/> object.
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.IMediaLocation.getMediaFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.IMediaFactory"/> associated with the <see cref="T:urakawa.media.IMediaLocation"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.IMediaFactory"/></returns>
        </member>
        <member name="T:urakawa.IPresentation">
            <summary>
            The presentation
            </summary>
        </member>
        <member name="T:urakawa.core.ICorePresentation">
            <summary>
            Interface for a basic core presentation
            </summary>
        </member>
        <member name="M:urakawa.core.ICorePresentation.getRootNode">
            <summary>
            Gets the root <see cref="T:urakawa.core.ICoreNode"/> of the <see cref="T:urakawa.core.ICorePresentation"/>
            </summary>
            <returns>The root <see cref="T:urakawa.core.ICoreNode"/></returns>
        </member>
        <member name="M:urakawa.core.ICorePresentation.setRootNode(urakawa.core.ICoreNode)">
            <summary>
            Sets the root <see cref="T:urakawa.core.ICoreNode"/> of the <see cref="T:urakawa.core.ICorePresentation"/>
            </summary>
            <param localName="newRoot">The new root <see cref="T:urakawa.core.ICoreNode"/> or <c>null</c></param>
        </member>
        <member name="M:urakawa.core.ICorePresentation.getCoreNodeFactory">
            <summary>
            Gets the <see cref="T:urakawa.core.ICoreNodeFactory"/> creating <see cref="T:urakawa.core.ICoreNode"/>s
            for the <see cref="T:urakawa.core.ICorePresentation"/>
            </summary>
            <returns>The <see cref="T:urakawa.core.ICoreNodeFactory"/></returns>
        </member>
        <member name="M:urakawa.core.ICorePresentation.getPropertyFactory">
            <summary>
            Gets the <see cref="T:urakawa.core.property.ICorePropertyFactory"/> creating <see cref="T:urakawa.core.property.IProperty"/>s
            for the <see cref="T:urakawa.core.ICorePresentation"/>
            </summary>
            <returns>The <see cref="T:urakawa.core.property.ICorePropertyFactory"/></returns>
        </member>
        <member name="T:urakawa.media.IMediaPresentation">
            <summary>
            Interface for a presentation that supports <see cref="T:urakawa.media.IMedia"/>
            </summary>
        </member>
        <member name="M:urakawa.media.IMediaPresentation.getMediaFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.IMediaFactory"/> creating <see cref="T:urakawa.media.IMedia"/>
            for the <see cref="T:urakawa.media.IMediaPresentation"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.IMediaPresentation"/></returns>
        </member>
        <member name="T:urakawa.properties.channel.IChannelPresentation">
            <summary>
            Interface for <see cref="T:urakawa.core.ICorePresentation"/>s that supports <see cref="T:urakawa.properties.channel.Channel"/>s
            </summary>
        </member>
        <member name="M:urakawa.properties.channel.IChannelPresentation.getChannelFactory">
            <summary>
            Gets the <see cref="T:urakawa.properties.channel.IChannelFactory"/> that creates <see cref="T:urakawa.properties.channel.IChannel"/>s 
            for the <see cref="T:urakawa.properties.channel.IChannelPresentation"/>
            </summary>
            <returns>The <see cref="T:urakawa.properties.channel.IChannelFactory"/></returns>
        </member>
        <member name="M:urakawa.properties.channel.IChannelPresentation.getChannelsManager">
            <summary>
            Gets the <see cref="T:urakawa.properties.channel.IChannelsManager"/> managing the list of <see cref="T:urakawa.properties.channel.IChannel"/>s
            in the <see cref="T:urakawa.properties.channel.IChannelPresentation"/>
            </summary>
            <returns>The <see cref="T:urakawa.properties.channel.IChannelsManager"/></returns>
        </member>
        <member name="M:urakawa.properties.channel.IChannelPresentation.getChannelsPropertyFactory">
            <summary>
            Gets the <see cref="T:urakawa.properties.channel.IChannelsPropertyFactory"/> creating <see cref="T:urakawa.core.property.IProperty"/>s 
            for <see cref="T:urakawa.core.ICoreNode"/>s for the <see cref="T:urakawa.properties.channel.IChannelPresentation"/>
            </summary>
            <returns>The <see cref="T:urakawa.properties.channel.IChannelsPropertyFactory"/></returns>
        </member>
        <member name="T:urakawa.media.SrcMediaLocation">
            <summary>
            An implementation of <see cref="T:urakawa.media.IMediaLocation"/> based on a simple Src string value
            representing the uri or path of the media location
            </summary>
        </member>
        <member name="M:urakawa.media.SrcMediaLocation.#ctor(urakawa.media.IMediaFactory)">
            <summary>
            Constructor initializing the <see cref="T:urakawa.media.SrcMediaLocation"/> with a 
            </summary>
        </member>
        <member name="M:urakawa.media.SrcMediaLocation.getSrc">
            <summary>
            Gets the Src value of <c>this</c>
            </summary>
            <returns>The Src value</returns>
        </member>
        <member name="M:urakawa.media.SrcMediaLocation.setSrc(System.String)">
            <summary>
            Sets the Src value of this
            </summary>
            <param localName="newSrc">The new Src value - must not be <c>null</c></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the new Src value is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.SrcMediaLocation.ToString">
            <summary>
            Returns Src as <see cref="T:System.String"/> representation of <c>this</c>
            </summary>
            <returns>The Src value prefixed with MediaLocation=</returns>
        </member>
        <member name="M:urakawa.media.SrcMediaLocation.copy">
            <summary>
            Copy the media location object.
            </summary>
            <returns>The copy</returns>
            <exception cref="T:urakawa.exception.FactoryCanNotCreateTypeException">
            Thrown when the associated <see cref="T:urakawa.media.IMediaFactory"/> 
            can not create a <see cref="T:urakawa.media.SrcMediaLocation"/> instance
            </exception>
        </member>
        <member name="M:urakawa.media.SrcMediaLocation.getMediaFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.IMediaFactory"/> associated with the <see cref="T:urakawa.media.IMediaLocation"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.IMediaFactory"/></returns>
        </member>
        <member name="M:urakawa.media.SrcMediaLocation.XukIn(System.Xml.XmlReader)">
            <summary>
            Loads the <see cref="T:urakawa.media.SrcMediaLocation"/>from an xuk element
            </summary>
            <param localName="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the load was succesful</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the source <see cref="T:System.Xml.XmlReader"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.SrcMediaLocation.XukOut(System.Xml.XmlWriter)">
            <summary>
            Writes the <see cref="T:urakawa.media.SrcMediaLocation"/> to an xuk element
            </summary>
            <param localName="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the load was succesful</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the destination <see cref="T:System.Xml.XmlWriter"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.SrcMediaLocation.getXukLocalName">
            <summary>
            Gets the local localName part of the QName representing a <see cref="T:urakawa.media.SrcMediaLocation"/> in Xuk
            </summary>
            <returns>The local localName part</returns>
        </member>
        <member name="M:urakawa.media.SrcMediaLocation.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName representing a <see cref="T:urakawa.media.SrcMediaLocation"/> in Xuk
            </summary>
            <returns>The namespace uri part</returns>
        </member>
        <member name="M:urakawa.media.SrcMediaLocation.Equals(urakawa.media.IMediaLocation)">
            <summary>
            Compares <c>this</c> with a given other <see cref="T:urakawa.media.IMediaLocation"/> for equality
            </summary>
            <param name="other">The given other <see cref="T:urakawa.media.IMediaLocation"/></param>
            <returns><c>true</c> if equal, otherwise <c>false</c></returns>
        </member>
        <member name="T:urakawa.media.IImageMedia">
            <summary>
            Represents images which are external media and have a height and width
            </summary>
        </member>
        <member name="T:urakawa.core.CoreNodeFactory">
            <summary>
            Default implementation of <see cref="T:urakawa.core.ICoreNodeFactory"/>.
            Creates <see cref="T:urakawa.core.CoreNode"/>s belonging to a specific <see cref="T:urakawa.core.ICorePresentation"/>
            </summary>
            <remarks>
            A <see cref="T:urakawa.core.CoreNodeFactory"/> can not create <see cref="T:urakawa.core.CoreNode"/>s
            until it has been associated with a <see cref="T:urakawa.core.ICorePresentation"/> using the
            <see cref="M:urakawa.core.CoreNodeFactory.setPresentation(urakawa.core.ICorePresentation)"/> method
            </remarks>
        </member>
        <member name="T:urakawa.core.ICoreNodeFactory">
            <summary>
            Interface for a <see cref="T:urakawa.core.ICoreNode"/> factory
            </summary>
        </member>
        <member name="M:urakawa.core.ICoreNodeFactory.createNode">
            <summary>
            Creates a new <see cref="T:urakawa.core.ICoreNode"/> instance of <see cref="T:System.Type"/> 
            that is default to the <see cref="T:urakawa.core.ICoreNodeFactory"/>instance
            </summary>
            <returns>The new <see cref="T:urakawa.core.ICoreNode"/></returns>
        </member>
        <member name="M:urakawa.core.ICoreNodeFactory.createNode(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:urakawa.core.ICoreNode"/> instance of <see cref="T:System.Type"/> matching a given QName
            </summary>
            <param localName="localName">The local localName part of the QName</param>
            <param localName="namespaceUri">The namespace uri part of the QName</param>
            <returns>The new <see cref="T:urakawa.core.ICoreNode"/></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameters <paramref localName="localName"/> or <paramref localName="namespaceUri"/> 
            are <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.core.ICoreNodeFactory.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.core.ICorePresentation"/> owns <see cref="T:urakawa.core.ICoreNode"/>s created by 
            the <see cref="T:urakawa.core.ICoreNodeFactory"/> instance
            </summary>
            <returns>The <see cref="T:urakawa.core.ICorePresentation"/></returns>
        </member>
        <member name="M:urakawa.core.ICoreNodeFactory.setPresentation(urakawa.core.ICorePresentation)">
            <summary>
            Sets the see cref="ICorePresentation"/&gt; owns <see cref="T:urakawa.core.ICoreNode"/>s created by 
            the <see cref="T:urakawa.core.ICoreNodeFactory"/> instance. This method should only be used during initialization
            </summary>
            <param localName="pres">The <see cref="T:urakawa.core.ICorePresentation"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paramref localName="pres"/> is <c>null</c>
            </exception>
        </member>
        <member name="F:urakawa.core.CoreNodeFactory.mPresentation">
            <summary>
            The <see cref="T:urakawa.core.ICorePresentation"/> to which any created <see cref="T:urakawa.core.ICoreNode"/>s belongs
            </summary>
        </member>
        <member name="M:urakawa.core.CoreNodeFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.core.CoreNodeFactory.createNode">
            <summary>
            Creates a new <see cref="T:urakawa.core.CoreNode"/>
            </summary>
            <returns>The new <see cref="T:urakawa.core.ICoreNode"/></returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when the <see cref="T:urakawa.core.ICorePresentation"/> of the 
            </exception>
        </member>
        <member name="M:urakawa.core.CoreNodeFactory.createNode(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:urakawa.core.ICoreNode"/> instance of <see cref="T:System.Type"/> matching a given QName
            </summary>
            <param localName="localName">The local localName part of the QName</param>
            <param localName="namespaceUri">The namespace uri part of the QName</param>
            <returns>The created <see cref="T:urakawa.core.CoreNode"/> or <c>null</c> if the QN</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when one of the parameters <paramref localName="localName"/> <paramref name="namespaceUri"/> and  is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.core.CoreNodeFactory.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.core.ICorePresentation"/> to which created nodes belong
            </summary>
            <returns>The <see cref="T:urakawa.core.ICorePresentation"/></returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            When no <see cref="T:urakawa.core.ICorePresentation"/> has yet been associated with <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.core.CoreNodeFactory.setPresentation(urakawa.core.ICorePresentation)">
            <summary>
            Sets the <see cref="T:urakawa.core.ICorePresentation"/> to which <see cref="T:urakawa.core.CoreNode"/>s created by the factory belongs
            </summary>
            <param localName="pres">The <see cref="T:urakawa.core.ICorePresentation"/></param>
            <remarks>This method should only be used during initialization</remarks>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paramref localName="pres"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when the <see cref="T:urakawa.core.ICorePresentation"/> has already been set
            </exception>
        </member>
        <member name="T:urakawa.media.data.utillities.PCMDataInfo">
            <summary>
            Represents information describing raw PCM data
            </summary>
        </member>
        <member name="F:urakawa.media.data.utillities.PCMDataInfo.NumberOfChannels">
            <summary>
            Gets or sets the number of channels of audio
            </summary>
        </member>
        <member name="F:urakawa.media.data.utillities.PCMDataInfo.SampleRate">
            <summary>
            Gets or sets the sample rate in Hz of the audio
            </summary>
        </member>
        <member name="F:urakawa.media.data.utillities.PCMDataInfo.BitDepth">
            <summary>
            Gets or sets the depth in bits of the audio, ie. the size in bits of each sample of audio
            </summary>
        </member>
        <member name="F:urakawa.media.data.utillities.PCMDataInfo.DataLength">
            <summary>
            Gets or sets the length in bytes of the raw PCM data
            </summary>
        </member>
        <member name="M:urakawa.media.data.utillities.PCMDataInfo.getDuration">
            <summary>
            Gets the duration of the RAW PCM data
            </summary>
            <returns>The duration as a <see cref="T:System.TimeSpan"/></returns>
        </member>
        <member name="M:urakawa.media.data.utillities.PCMDataInfo.writeRiffWaveHeader(System.IO.Stream)">
            <summary>
            Writes a RIFF Wave PCM header to a given destination output <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="output">The destination output <see cref="T:System.IO.Stream"/></param>
        </member>
        <member name="M:urakawa.media.data.utillities.PCMDataInfo.parseRiffWaveHeader(System.IO.Stream)">
            <summary>
            Parses a RIFF WAVE PCM header of a given input <see cref="T:System.IO.Stream"/>
            </summary>
            <remarks>
            Upon succesful parsing the <paramref name="input"/> <see cref="T:System.IO.Stream"/> is positioned at the beginning of the actual PCM data,
            that is at the beginning of the data field of the data sub-chunk
            </remarks>
            <param name="input">The input <see cref="T:System.IO.Stream"/> - must be positioned at the start of the RIFF chunk</param>
            <returns>A <see cref="T:urakawa.media.data.utillities.PCMDataInfo"/> containing the parsed data</returns>
            <exception cref="T:urakawa.exception.InvalidDataFormatException">
            Thrown when RIFF WAVE header is invalid or is not PCM data
            </exception>
        </member>
        <member name="P:urakawa.media.data.utillities.PCMDataInfo.ByteRate">
            <summary>
            Gets the byte rate of the raw PCM data
            </summary>
        </member>
        <member name="P:urakawa.media.data.utillities.PCMDataInfo.BlockAlign">
            <summary>
            Gets the size in bytes of a single block (i.e. a sample from each channel)
            </summary>
        </member>
        <member name="T:urakawa.media.data.IMediaDataPresentation">
            <summary>
            Interface for a <see cref="T:urakawa.media.IMediaPresentation"/> that supports <see cref="T:urakawa.media.data.IMediaData"/>
            </summary>
        </member>
        <member name="M:urakawa.media.data.IMediaDataPresentation.getMediaDataManager">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaDataManager"/> managing the <see cref="T:urakawa.media.data.IMediaData"/> of the <see cref="T:urakawa.media.data.IMediaDataPresentation"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IMediaDataManager"/></returns>
        </member>
        <member name="M:urakawa.media.data.IMediaDataPresentation.getMediaDataFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaDataFactory"/> creating <see cref="T:urakawa.media.data.IMediaData"/> for the <see cref="T:urakawa.media.data.IMediaDataPresentation"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IMediaDataFactory"/></returns>
        </member>
        <member name="M:urakawa.media.data.IMediaDataPresentation.getDataProviderFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IDataProviderFactory"/> creating <see cref="T:urakawa.media.data.IDataProvider"/>s for <see cref="T:urakawa.media.data.IMediaData"/>
            of the <see cref="T:urakawa.media.data.IMediaDataPresentation"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IDataProviderFactory"/></returns>
        </member>
        <member name="T:urakawa.properties.xml.XmlAttribute">
            <summary>
            Default implementation of <see cref="T:urakawa.properties.xml.IXmlAttribute"/>
            </summary>
        </member>
        <member name="T:urakawa.properties.xml.IXmlAttribute">
            <summary>
            Represents an attribute of an <see cref="T:urakawa.properties.xml.XmlProperty"/>
            </summary>
        </member>
        <member name="M:urakawa.properties.xml.IXmlAttribute.copy">
            <summary>
            Creates a copy of the <see cref="T:urakawa.properties.xml.IXmlAttribute"/>
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.properties.xml.IXmlAttribute.getValue">
            <summary>
            Gets the value of gthe <see cref="T:urakawa.properties.xml.IXmlAttribute"/>
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:urakawa.properties.xml.IXmlAttribute.setValue(System.String)">
            <summary>
            Sets the value of the <see cref="T:urakawa.properties.xml.IXmlAttribute"/>
            </summary>
            <param localName="newValue">The new value</param>
        </member>
        <member name="M:urakawa.properties.xml.IXmlAttribute.getNamespaceUri">
            <summary>
            Gets the namespace of the <see cref="T:urakawa.properties.xml.IXmlAttribute"/>
            </summary>
            <returns>The namespace</returns>
        </member>
        <member name="M:urakawa.properties.xml.IXmlAttribute.getLocalName">
            <summary>
            Gets the local localName of the <see cref="T:urakawa.properties.xml.IXmlAttribute"/>
            </summary>
            <returns>The local localName</returns>
        </member>
        <member name="M:urakawa.properties.xml.IXmlAttribute.setQName(System.String,System.String)">
            <summary>
            Sets the QName of the <see cref="T:urakawa.properties.xml.IXmlAttribute"/> 
            </summary>
            <param localName="newNamespace">The namespace part of the new QName</param>
            <param localName="newName">The localName part of the new QName</param>
        </member>
        <member name="M:urakawa.properties.xml.IXmlAttribute.getParent">
            <summary>
            Gets the parent <see cref="T:urakawa.properties.xml.IXmlProperty"/> of the <see cref="T:urakawa.properties.xml.IXmlAttribute"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.properties.xml.IXmlAttribute.setParent(urakawa.properties.xml.IXmlProperty)">
            <summary>
            Sets the parent <see cref="T:urakawa.properties.xml.IXmlProperty"/> of <c>this</c>
            </summary>
            <param localName="newParent">The new parent</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="newParent"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttribute.#ctor(urakawa.properties.xml.IXmlProperty)">
            <summary>
            Constructor setting the parent <see cref="T:urakawa.properties.xml.IXmlProperty"/>
            </summary>
            <param localName="parent">The parent</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the parent is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttribute.copy">
            <summary>
            Creates a copy of the <see cref="T:urakawa.properties.xml.XmlAttribute"/>
            </summary>
            <returns>The copy</returns>
            <exception cref="T:urakawa.exception.FactoryCanNotCreateTypeException">
            Thrown when the <see cref="T:urakawa.core.property.ICorePropertyFactory"/> of the <see cref="T:urakawa.core.ICorePresentation"/> 
            to which <c>this</c> belongs is not a subclass of <see cref="T:urakawa.properties.xml.IXmlPropertyFactory"/>
            </exception>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttribute.getValue">
            <summary>
            Gets the value of gthe <see cref="T:urakawa.properties.xml.XmlAttribute"/>
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttribute.setValue(System.String)">
            <summary>
            Sets the value of the <see cref="T:urakawa.properties.xml.XmlAttribute"/>
            </summary>
            <param localName="newValue">The new value</param>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttribute.getNamespaceUri">
            <summary>
            Gets the namespace of the <see cref="T:urakawa.properties.xml.XmlAttribute"/>
            </summary>
            <returns>The namespace</returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttribute.getLocalName">
            <summary>
            Gets the local localName of the <see cref="T:urakawa.properties.xml.XmlAttribute"/>
            </summary>
            <returns>The local localName</returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttribute.setQName(System.String,System.String)">
            <summary>
            Sets the QName of the <see cref="T:urakawa.properties.xml.XmlAttribute"/> 
            </summary>
            <param localName="newNamespace">The namespace part of the new QName</param>
            <param localName="newName">The localName part of the new QName</param>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttribute.getParent">
            <summary>
            Gets the parent <see cref="T:urakawa.properties.xml.IXmlProperty"/> of <c>this</c>
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttribute.setParent(urakawa.properties.xml.IXmlProperty)">
            <summary>
            Sets the parent <see cref="T:urakawa.properties.xml.IXmlProperty"/> of <c>this</c>. 
            Is intended for internal use by the owning <see cref="T:urakawa.properties.xml.IXmlProperty"/>,
            calling this method may lead to corruption of the data model
            </summary>
            <param localName="newParent">The new parent</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the new parent is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttribute.XukIn(System.Xml.XmlReader)">
            <summary>
            Reads the <see cref="T:urakawa.properties.xml.XmlAttribute"/> instance from an XmlAttribute element in a XUK file
            </summary>
            <param localName="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the read was succesful</returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttribute.XukOut(System.Xml.XmlWriter)">
            <summary>
            Writes a XmlAttribute element representing the <see cref="T:urakawa.properties.xml.XmlAttribute"/> instance
            to a XUK file
            </summary>
            <param localName="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the write was succesful</returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttribute.getXukLocalName">
            <summary>
            Gets the local localName part of the QName representing a <see cref="T:urakawa.properties.xml.XmlAttribute"/> in Xuk
            </summary>
            <returns>The local localName part</returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttribute.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName representing a <see cref="T:urakawa.properties.xml.XmlAttribute"/> in Xuk
            </summary>
            <returns>The namespace uri part</returns>
        </member>
        <member name="T:urakawa.media.timing.TimeDelta">
            <summary>
            TimeDelta is the difference between two timestamps (<see cref="T:urakawa.media.timing.Time"/>s)
            </summary>
        </member>
        <member name="T:urakawa.media.timing.ITimeDelta">
            <summary>
            The difference between two <see cref="T:urakawa.media.timing.ITime"/> objects is an <see cref="T:urakawa.media.timing.ITimeDelta"/>.
            </summary>
            <remarks>The difference is considered absolute and can not be negative</remarks>
        </member>
        <member name="M:urakawa.media.timing.ITimeDelta.getTimeDeltaAsMilliseconds">
            <summary>
            Gets number of milliseconds equivalent of the <see cref="T:urakawa.media.timing.ITimeDelta"/>
            </summary>
            <returns>The number of milliseconds</returns>
        </member>
        <member name="M:urakawa.media.timing.ITimeDelta.getTimeDeltaAsMillisecondFloat">
            <summary>
            Gets the millisecond floating point number equivalent of the <see cref="T:urakawa.media.timing.ITimeDelta"/>
            </summary>
            <returns>The millisecond floating point number</returns>
        </member>
        <member name="M:urakawa.media.timing.ITimeDelta.getTimeDeltaAsTimeSpan">
            <summary>
            Gets the <see cref="T:urakawa.media.timing.TimeDelta"/> as a <see cref="T:System.TimeSpan"/>
            </summary>
            <returns>The <see cref="T:System.TimeSpan"/></returns>
        </member>
        <member name="M:urakawa.media.timing.ITimeDelta.setTimeDelta(System.Int64)">
            <summary>
            Sets the <see cref="T:urakawa.media.timing.ITimeDelta"/> from an integral number of milliseconds
            </summary>
            <param localName="timeDeltaAsMS">The number of milliseconds</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="timeDeltaAsMS"/> is negative
            </exception>
        </member>
        <member name="M:urakawa.media.timing.ITimeDelta.setTimeDelta(System.Double)">
            <summary>
            Sets the <see cref="T:urakawa.media.timing.ITimeDelta"/> from a floating point mulliseconds value
            </summary>
            <param localName="timeDeltaAsMSF">The milliseconds floating point number</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="timeDeltaAsMSF"/> is negative
            </exception>
        </member>
        <member name="M:urakawa.media.timing.ITimeDelta.addTimeDelta(urakawa.media.timing.ITimeDelta)">
            <summary>
            Adds another <see cref="T:urakawa.media.timing.ITimeDelta"/> to <c>this</c>
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.timing.ITimeDelta"/></param>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.#ctor">
            <summary>
            Default constructor, initializes the difference to 0
            </summary>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.#ctor(urakawa.media.timing.ITimeDelta)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.#ctor(System.Int64)">
            <summary>
            Constructor setting the difference to a given number of milliseconds
            </summary>
            <param localName="val">The given number of milliseconds, 
            must not be negative</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown if <paramref localName="val"/> is negative
            </exception>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.#ctor(System.Double)">
            <summary>
            Constructor setting the difference to a given millisecond value
            </summary>
            <param name="val">The millisecond valud</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown if <paramref localName="val"/> is negative
            </exception>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.#ctor(System.TimeSpan)">
            <summary>
            Constructor setting the difference to a given <see cref="T:System.TimeSpan"/> value
            </summary>
            <param localName="val">The given <see cref="T:System.TimeSpan"/> value</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown if <paramref localName="val"/> is negative
            </exception>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.getTimeDeltaAsMilliseconds">
            <summary>
            Gets the <see cref="T:urakawa.media.timing.TimeDelta"/> in milliseconds
            </summary>
            <returns>The number of milliseconds equivalent to the <see cref="T:urakawa.media.timing.TimeDelta"/>
            </returns>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.getTimeDeltaAsTimeSpan">
            <summary>
            Gets the <see cref="T:urakawa.media.timing.TimeDelta"/> as a <see cref="T:System.TimeSpan"/>
            </summary>
            <returns>The <see cref="T:System.TimeSpan"/></returns>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.setTimeDelta(System.TimeSpan)">
            <summary>
            Sets the <see cref="T:urakawa.media.timing.TimeDelta"/> to a given <see cref="T:System.TimeSpan"/> value
            </summary>
            <param localName="newTimeDelta">The given <see cref="T:System.TimeSpan"/> value</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown if <paramref localName="val"/> is negative
            </exception>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.setTimeDelta(System.Double)">
            <summary>
            Sets the <see cref="T:urakawa.media.timing.TimeDelta"/> to a given millisecond value
            </summary>
            <param name="timeDeltaAsMSF">The millisecond value</param>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.setTimeDelta(System.Int64)">
            <summary>
            Sets the <see cref="T:urakawa.media.timing.TimeDelta"/> to a given number of milliseconds
            </summary>
            <param localName="val">The given number of milliseconds</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown if <paramref localName="val"/> is negative
            </exception>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.getTimeDeltaAsMillisecondFloat">
            <summary>
            Gets <c>this</c> as a millisecond floating point value
            /// </summary>
            <returns>The millisecond value</returns>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.addTimeDelta(urakawa.media.timing.ITimeDelta)">
            <summary>
            Adds another <see cref="T:urakawa.media.timing.ITimeDelta"/> to <c>this</c>
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.timing.ITimeDelta"/></param>
        </member>
        <member name="T:urakawa.core.CorePresentation">
            <summary>
            Core presentation consisting of a <see cref="T:urakawa.core.ICoreNodeFactory"/>, a <see cref="T:urakawa.core.property.ICorePropertyFactory"/>
            and a root <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
        </member>
        <member name="M:urakawa.core.CorePresentation.#ctor(urakawa.core.ICoreNodeFactory,urakawa.core.property.ICorePropertyFactory)">
            <summary>
            Constructor constructing a <see cref="T:urakawa.core.CorePresentation"/> with given 
            <see cref="T:urakawa.core.ICoreNodeFactory"/> and <see cref="T:urakawa.core.property.ICorePropertyFactory"/>
            </summary>
            <param localName="coreNodeFact">
            The given <see cref="T:urakawa.core.ICoreNodeFactory"/>. 
            If this parameter is <c>null</c>, a new <see cref="T:urakawa.core.CoreNodeFactory"/> 
            is created for the presentation
            </param>
            <param localName="propFact">
            The given <see cref="T:urakawa.core.property.ICorePropertyFactory"/>.
            If this parameter is <c>null</c>, a new <see cref="T:urakawa.core.property.CorePropertyFactory"/> 
            is created for the presentation
            </param>
        </member>
        <member name="M:urakawa.core.CorePresentation.getRootNode">
            <summary>
            Gets the root <see cref="T:urakawa.core.ICoreNode"/> of the <see cref="T:urakawa.core.CorePresentation"/>
            </summary>
            <returns>The root <see cref="T:urakawa.core.ICoreNode"/></returns>
        </member>
        <member name="M:urakawa.core.CorePresentation.setRootNode(urakawa.core.ICoreNode)">
            <summary>
            Sets the root <see cref="T:urakawa.core.ICoreNode"/> of the <see cref="T:urakawa.core.CorePresentation"/>
            </summary>
            <param localName="newRoot">The new root <see cref="T:urakawa.core.ICoreNode"/></param>
        </member>
        <member name="M:urakawa.core.CorePresentation.getCoreNodeFactory">
            <summary>
            Gets the <see cref="T:urakawa.core.ICoreNodeFactory"/>
            creating <see cref="T:urakawa.core.ICoreNode"/>s for the <see cref="T:urakawa.core.CorePresentation"/>
            </summary>
            <returns>The <see cref="T:urakawa.core.ICoreNodeFactory"/></returns>
        </member>
        <member name="M:urakawa.core.CorePresentation.getPropertyFactory">
            <summary>
            Gets the <see cref="T:urakawa.core.property.ICorePropertyFactory"/> associated with the <see cref="T:urakawa.core.CorePresentation"/>
            </summary>
            <returns>The <see cref="T:urakawa.core.property.ICorePropertyFactory"/></returns>
        </member>
        <member name="M:urakawa.core.CorePresentation.HandleXukChild(System.Xml.XmlReader)">
            <summary>
            Handles a Xuk child during <see cref="M:urakawa.core.CorePresentation.XukIn(System.Xml.XmlReader)"/>
            </summary>
            <param localName="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <remarks>A <see cref="T:System.Boolean"/> indicating if the child was succesfully handled</remarks>
        </member>
        <member name="M:urakawa.core.CorePresentation.XukIn(System.Xml.XmlReader)">
            <summary>
            Reads the <see cref="T:urakawa.core.CorePresentation"/> instance from a CorePresentation element in a XUK file.
            <list type="table">
            <item>
            <term>Entry state</term>
            <description>
            The cursor of <paramref localName="source"/> must be at the start of the CorePresentation element
            </description>
            </item>
            <item>
            <term>Exit state</term>
            </item>
            <description>
            The cursor of  <paramref localName="source"/> must be at the end of the CorePresentation element
            </description>
            </list>
            </summary>
            <param localName="source">The <see cref="T:System.Xml.XmlReader"/> from which to read the CorePresentation element</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the instance was succesfully read</returns>
        </member>
        <member name="M:urakawa.core.CorePresentation.XukOut(System.Xml.XmlWriter)">
            <summary>
            Write a CorePresentation element to a XUK file representing the <see cref="T:urakawa.core.CorePresentation"/> instance
            </summary>
            <param localName="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the write was succesful</returns>
        </member>
        <member name="M:urakawa.core.CorePresentation.XukOutAdditionalChildren(System.Xml.XmlWriter)">
            <summary>
            Does nothing and always returns <c>true</c>.
            In derived classes this method should be overwritten to write any additional Xuk elements needed
            </summary>
            <param localName="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the write was succesful</returns>
        </member>
        <member name="M:urakawa.core.CorePresentation.getXukLocalName">
            <summary>
            Gets the local localName part of the QName identifying the type of the instance
            </summary>
            <returns>The local localName</returns>
        </member>
        <member name="M:urakawa.core.CorePresentation.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName identifying the type of the instance
            </summary>
            <returns>The namespace uri</returns>
        </member>
        <member name="T:urakawa.IPropertyFactory">
            <summary>
            Interface for a <see cref="T:urakawa.core.property.IProperty"/> factory that supports creation
            of <see cref="T:urakawa.properties.channel.IChannelsProperty"/>s and <see cref="T:urakawa.properties.xml.IXmlProperty"/>s
            </summary>
        </member>
        <member name="T:urakawa.properties.channel.IChannelsPropertyFactory">
            <summary>
            <see cref="T:urakawa.IPropertyFactory"/> that supports creation of <see cref="T:urakawa.properties.channel.IChannelsProperty"/>s
            </summary>
        </member>
        <member name="M:urakawa.properties.channel.IChannelsPropertyFactory.createChannelsProperty">
            <summary>
            Creates a <see cref="T:urakawa.properties.channel.IChannelsProperty"/> of default type
            </summary>
            <returns>The created <see cref="T:urakawa.properties.channel.IChannelsProperty"/></returns>
        </member>
        <member name="T:urakawa.media.ImageMedia">
            <summary>
            ImageMedia is the image object. 
            It has width, height, and an external source.
            </summary>
        </member>
        <member name="M:urakawa.media.ImageMedia.#ctor(urakawa.media.IMediaFactory)">
            <summary>
            Constructor initializing the <see cref="T:urakawa.media.ImageMedia"/> with <see cref="T:urakawa.media.ISized"/> <c>(0,0)</c>, 
            an empty <see cref="T:urakawa.media.SrcMediaLocation"/> and a given <see cref="T:urakawa.media.IMediaFactory"/>
            </summary>
            <param localName="fact">The given <see cref="T:urakawa.media.IMediaFactory"/></param>
        </member>
        <member name="M:urakawa.media.ImageMedia.ToString">
            <summary>
            This override is useful while debugging
            </summary>
            <returns>A <see cref="T:System.String"/> representation of the <see cref="T:urakawa.media.ImageMedia"/></returns>
        </member>
        <member name="M:urakawa.media.ImageMedia.isContinuous">
            <summary>
            This always returns <c>false</c>, because
            image media is never considered continuous
            </summary>
            <returns><c>false</c></returns>
        </member>
        <member name="M:urakawa.media.ImageMedia.isDiscrete">
            <summary>
            This always returns <c>true</c>, because
            image media is always considered discrete
            </summary>
            <returns><c>true</c></returns>
        </member>
        <member name="M:urakawa.media.ImageMedia.isSequence">
            <summary>
            This always returns <c>false</c>, because
            a single media object is never considered to be a sequence
            </summary>
            <returns><c>false</c></returns>
        </member>
        <member name="M:urakawa.media.ImageMedia.getMediaType">
            <summary>
            Return the urakawa media type
            </summary>
            <returns>always returns <see cref="F:urakawa.media.MediaType.IMAGE"/></returns>
        </member>
        <member name="M:urakawa.media.ImageMedia.copy">
            <summary>
            Return a copy of this <see cref="T:urakawa.media.ImageMedia"/> object
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.ImageMedia.getMediaFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.IMediaFactory"/> associated with <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.IMediaFactory"/></returns>
        </member>
        <member name="M:urakawa.media.ImageMedia.getWidth">
            <summary>
            Return the image width
            </summary>
            <returns>The width</returns>
        </member>
        <member name="M:urakawa.media.ImageMedia.getHeight">
            <summary>
            Return the image height
            </summary>
            <returns>The height</returns>
        </member>
        <member name="M:urakawa.media.ImageMedia.setWidth(System.Int32)">
            <summary>
            Sets the image width
            </summary>
            <param localName="width">The new width</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new width is negative
            </exception>
        </member>
        <member name="M:urakawa.media.ImageMedia.setHeight(System.Int32)">
            <summary>
            Sets the image height
            </summary>
            <param localName="height">The new height</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new height is negative
            </exception>
        </member>
        <member name="M:urakawa.media.ImageMedia.XukIn(System.Xml.XmlReader)">
            <summary>
            Fill in audio data from an XML source.
            Assume that the XmlReader cursor is at the opening audio tag.
            </summary>
            <param localName="source">the input XML source</param>
            <returns>true or false, depending on whether the data could be processed</returns>
        </member>
        <member name="M:urakawa.media.ImageMedia.XukOut(System.Xml.XmlWriter)">
            <summary>
            The opposite of <see cref="M:urakawa.media.ImageMedia.XukIn(System.Xml.XmlReader)"/>, this function writes the object's data
            to an XML file
            </summary>
            <param localName="destination">the XML source for outputting data</param>
            <returns>so far, this function always returns true</returns>
        </member>
        <member name="M:urakawa.media.ImageMedia.getXukLocalName">
            <summary>
            Gets the local localName part of the QName representing a <see cref="T:urakawa.media.ImageMedia"/> in Xuk
            </summary>
            <returns>The local localName part</returns>
        </member>
        <member name="M:urakawa.media.ImageMedia.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName representing a <see cref="T:urakawa.media.ImageMedia"/> in Xuk
            </summary>
            <returns>The namespace uri part</returns>
        </member>
        <member name="M:urakawa.media.ImageMedia.getLocation">
            <summary>
            Gets the <see cref="T:urakawa.media.IMediaLocation"/> of <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.IMediaLocation"/></returns>
        </member>
        <member name="M:urakawa.media.ImageMedia.setLocation(urakawa.media.IMediaLocation)">
            <summary>
            Sets the <see cref="T:urakawa.media.IMediaLocation"/> of <c>this</c>
            </summary>
            <param localName="location">The new <see cref="T:urakawa.media.IMediaLocation"/></param>
        </member>
        <member name="M:urakawa.media.ImageMedia.ValueEquals(urakawa.media.IMedia)">
            <summary>
            Conpares <c>this</c> with a given other <see cref="T:urakawa.media.IMedia"/> for equality
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.IMedia"/></param>
            <returns><c>true</c> if equal, otherwise <c>false</c></returns>
        </member>
        <member name="T:urakawa.properties.channel.IChannelsProperty">
            <summary>
            This property maintains a mapping from Channel object to Media object.
            Channels referenced here are pointers to existing channels in the presentation.
            </summary>
        </member>
        <member name="M:urakawa.properties.channel.IChannelsProperty.getMedia(urakawa.properties.channel.IChannel)">
            <summary>
            Retrieves the <see cref="T:urakawa.media.IMedia"/> of a given <see cref="T:urakawa.properties.channel.IChannel"/>
            </summary>
            <param localName="channel">The given <see cref="T:urakawa.properties.channel.IChannel"/></param>
            <returns>The <see cref="T:urakawa.media.IMedia"/> associated with the given channel, 
            <c>null</c> if no <see cref="T:urakawa.media.IMedia"/> is associated</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="channel"/> is null
            </exception>
            <exception cref="T:urakawa.exception.ChannelDoesNotExistException">
            Thrown when <paramref localName="channel"/> is not managed by the associated <see cref="T:urakawa.properties.channel.IChannelsManager"/>
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.IChannelsProperty.setMedia(urakawa.properties.channel.IChannel,urakawa.media.IMedia)">
            <summary>
            Associates a given <see cref="T:urakawa.media.IMedia"/> with a given <see cref="T:urakawa.properties.channel.IChannel"/>
            </summary>
            <param localName="channel">The given <see cref="T:urakawa.properties.channel.IChannel"/></param>
            <param localName="media">The given <see cref="T:urakawa.media.IMedia"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameters <paramref localName="channel"/> or <paramref localName="media"/>
            </exception>
            <exception cref="T:urakawa.exception.ChannelDoesNotExistException">
            Thrown when <paramref localName="channel"/> is not managed by the associated <see cref="T:urakawa.properties.channel.IChannelsManager"/>
            </exception>
            <exception cref="T:urakawa.exception.MediaTypeIsIllegalException">
            Thrown when <paramref localName="channel"/> does not support the <see cref="T:urakawa.media.MediaType"/> 
            of <paramref localName="media"/>
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.IChannelsProperty.getListOfUsedChannels">
            <summary>
            Gets the list of <see cref="T:urakawa.properties.channel.IChannel"/>s used by this instance of <see cref="T:urakawa.properties.channel.IChannelsProperty"/>
            </summary>
            <returns>The list of used <see cref="T:urakawa.properties.channel.IChannel"/>s</returns>
        </member>
        <member name="T:urakawa.properties.channel.ChannelsProperty">
            <summary>
            Default implementation of <see cref="T:urakawa.properties.channel.IChannelsProperty"/>
            </summary>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsProperty.getOwner">
            <summary>
            Gets the owner <see cref="T:urakawa.core.ICoreNode"/> of the <see cref="T:urakawa.properties.channel.ChannelsProperty"/>
            </summary>
            <returns>The owner</returns>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsProperty.setOwner(urakawa.core.ICoreNode)">
            <summary>
            Sets the owner <see cref="T:urakawa.core.ICoreNode"/> of the <see cref="T:urakawa.properties.channel.ChannelsProperty"/> instance
            </summary>
            <param localName="newOwner">The new owner</param>
            <remarks>This function is intended for internal purposes only 
            and should not be called by users of the toolkit</remarks>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsProperty.#ctor(urakawa.properties.channel.IChannelPresentation,System.Collections.Generic.IDictionary{urakawa.properties.channel.IChannel,urakawa.media.IMedia})">
            <summary>
            Constructor using a given <see cref="T:System.Collections.Generic.IDictionary`2"/> for channels to media mapping
            </summary>
            <param localName="pres">The <see cref="T:urakawa.properties.channel.IChannelPresentation"/> 
            associated with the <see cref="T:urakawa.properties.channel.ChannelsProperty"/></param>
            <param localName="chToMediaMapper">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> used to map channels and media</param>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsProperty.#ctor(urakawa.properties.channel.IChannelPresentation)">
            <summary>
            Constructor using a <see cref="T:System.Collections.Specialized.ListDictionary"/>
            for mapping channels to media
            </summary>
            <param localName="pres">The <see cref="T:urakawa.properties.channel.IChannelPresentation"/> 
            associated with the <see cref="T:urakawa.properties.channel.ChannelsProperty"/></param>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsProperty.copy">
            <summary>
            Creates a "deep" copy of the <see cref="T:urakawa.properties.channel.ChannelsProperty"/> instance 
            - deep meaning that all associated are copies and not just referenced
            </summary>
            <returns>The deep copy</returns>
            <exception cref="T:urakawa.exception.FactoryCanNotCreateTypeException">
            Thrown when the <see cref="T:urakawa.properties.channel.IChannelsPropertyFactory"/> of the <see cref="T:urakawa.properties.channel.IChannelPresentation"/>
            associated with <c>this</c> can not create a <see cref="T:urakawa.properties.channel.ChannelsProperty"/> or sub-type
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsProperty.getMedia(urakawa.properties.channel.IChannel)">
            <summary>
            Retrieves the <see cref="T:urakawa.media.IMedia"/> of a given <see cref="T:urakawa.properties.channel.IChannel"/>
            </summary>
            <param localName="channel">The given <see cref="T:urakawa.properties.channel.IChannel"/></param>
            <returns>The <see cref="T:urakawa.media.IMedia"/> associated with the given channel, 
            <c>null</c> if no <see cref="T:urakawa.media.IMedia"/> is associated</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="channel"/> is null
            </exception>
            <exception cref="T:urakawa.exception.ChannelDoesNotExistException">
            Thrown when <paramref localName="channel"/> is not managed by the associated <see cref="T:urakawa.properties.channel.IChannelsManager"/>
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsProperty.setMedia(urakawa.properties.channel.IChannel,urakawa.media.IMedia)">
            <summary>
            Associates a given <see cref="T:urakawa.media.IMedia"/> with a given <see cref="T:urakawa.properties.channel.IChannel"/>
            </summary>
            <param localName="channel">The given <see cref="T:urakawa.properties.channel.IChannel"/></param>
            <param localName="media">The given <see cref="T:urakawa.media.IMedia"/>, 
            pass <c>null</c> if you want to remove <see cref="T:urakawa.media.IMedia"/>
            from the given <see cref="T:urakawa.properties.channel.IChannel"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameters <paramref localName="channel"/> is null
            </exception>
            <exception cref="T:urakawa.exception.ChannelDoesNotExistException">
            Thrown when <paramref localName="channel"/> is not managed by the associated <see cref="T:urakawa.properties.channel.IChannelsManager"/>
            </exception>
            <exception cref="T:urakawa.exception.MediaTypeIsIllegalException">
            Thrown when <paramref localName="channel"/> does not support the <see cref="T:urakawa.media.MediaType"/> 
            of <paramref localName="media"/>
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsProperty.getListOfUsedChannels">
            <summary>
            Gets the list of <see cref="T:urakawa.properties.channel.IChannel"/>s used by this instance of <see cref="T:urakawa.properties.channel.IChannelsProperty"/>
            </summary>
            <returns>The list of used <see cref="T:urakawa.properties.channel.IChannel"/>s</returns>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsProperty.XukIn(System.Xml.XmlReader)">
            <summary>
            Reads the <see cref="T:urakawa.properties.channel.ChannelsProperty"/> from a ChannelsProperty element in a XUK file
            </summary>
            <param localName="source">The source <see cref="T:System.Xml.XmlReader"/> with cursor at the ChannelsProperty element
            </param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the read was succesful</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="source"/> is null
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsProperty.XUKInChannelMapping(System.Xml.XmlReader)">
            <summary>
            helper function which is called once per ChannelMapping element
            </summary>
            <param localName="source"></param>
            <returns></returns>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsProperty.XukOut(System.Xml.XmlWriter)">
            <summary>
            Write a ChannelsProperty element to a XUK file representing the <see cref="T:urakawa.properties.channel.ChannelsProperty"/> instance
            </summary>
            <param localName="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the write was succesful</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="destination"/> is null
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsProperty.getXukLocalName">
            <summary>
            Gets the local name part of the QName representing a <see cref="T:urakawa.properties.channel.ChannelsProperty"/> in Xuk
            </summary>
            <returns>The local name part</returns>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsProperty.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName representing a <see cref="T:urakawa.properties.channel.ChannelsProperty"/> in Xuk
            </summary>
            <returns>The namespace uri part</returns>
        </member>
        <member name="M:urakawa.properties.channel.ChannelsProperty.ValueEquals(urakawa.core.property.IProperty)">
            <summary>
            Conpares <c>this</c> with a given other <see cref="T:urakawa.core.property.IProperty"/> for value equality
            </summary>
            <param name="other">The other <see cref="T:urakawa.core.property.IProperty"/></param>
            <returns><c>true</c> if equal, otherwise <c>false</c></returns>
        </member>
        <member name="T:urakawa.metadata.MetadataFactory">
            <summary>
            Default <see cref="T:urakawa.metadata.IMetadata"/> factory - supports creation of <see cref="T:urakawa.metadata.Metadata"/> instances
            </summary>
        </member>
        <member name="M:urakawa.metadata.MetadataFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.metadata.MetadataFactory.createMetadata(System.String,System.String)">
            <summary>
            Creates an <see cref="T:urakawa.metadata.IMetadata"/> matching a given QName
            </summary>
            <param name="localName">The local part of the QName</param>
            <param name="namespaceUri">The namespace uri part of the QName</param>
            <returns>The created <see cref="T:urakawa.metadata.IMetadata"/> instance or <c>null</c> if the given QName is not supported</returns>
        </member>
        <member name="M:urakawa.metadata.MetadataFactory.createMetadata">
            <summary>
            Creates an <see cref="T:urakawa.metadata.Metadata"/> instance
            </summary>
            <returns>The created instance</returns>
        </member>
        <member name="T:urakawa.media.data.IDataProviderManager">
            <summary>
            Interface for a <see cref="T:urakawa.media.data.IDataProviderManager"/>
            </summary>
        </member>
        <member name="M:urakawa.media.data.IDataProviderManager.getMediaDataPresentation">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaDataPresentation"/> that owns the <see cref="T:urakawa.media.data.IDataProviderManager"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IMediaDataPresentation"/> that owns <c>this</c></returns>
        </member>
        <member name="M:urakawa.media.data.IDataProviderManager.setMediaDataPresentation(urakawa.media.data.IMediaDataPresentation)">
            <summary>
            Initializes the <see cref="T:urakawa.media.data.IDataProviderManager"/> with 
            a owning the <see cref="T:urakawa.media.data.IMediaDataPresentation"/>.
            </summary>
            <param name="ownerPres">The <see cref="T:urakawa.media.data.IMediaDataPresentation"/> that owns <c>this</c></param>
        </member>
        <member name="M:urakawa.media.data.IDataProviderManager.getDataProviderFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IDataProviderFactory"/> of the <see cref="T:urakawa.media.data.IDataProviderManager"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IDataProviderFactory"/></returns>
        </member>
        <member name="M:urakawa.media.data.IDataProviderManager.deleteDataProvider(urakawa.media.data.IDataProvider)">
            <summary>
            Deletes one of the <see cref="T:urakawa.media.data.IDataProvider"/>s managed by the <see cref="T:urakawa.media.data.IDataProviderManager"/>
            </summary>
            <param name="provider">The <see cref="T:urakawa.media.data.IDataProvider"/> to delete</param>
        </member>
        <member name="M:urakawa.media.data.IDataProviderManager.addDataProvider(urakawa.media.data.IDataProvider)">
            <summary>
            Adds a <see cref="T:urakawa.media.data.IDataProvider"/> to the <see cref="T:urakawa.media.data.IDataProviderManager"/>
            </summary>
            <param name="provider">The <see cref="T:urakawa.media.data.IDataProvider"/> to add</param>
        </member>
        <member name="M:urakawa.media.data.IDataProviderManager.getListOfManagedDataProvider">
            <summary>
            Gets a list of the <see cref="T:urakawa.media.data.IDataProvider"/>s that is managed by the <see cref="T:urakawa.media.data.IDataProviderManager"/>
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> conatining the managed <see cref="T:urakawa.media.data.IDataProvider"/>s</returns>
        </member>
        <member name="T:urakawa.media.IAudioMedia">
            <summary>
            Audio media - in any implementation, <see cref="M:urakawa.media.IMedia.getMediaType"/>
            should return <see cref="F:urakawa.media.MediaType.AUDIO"/>
            </summary>
        </member>
        <member name="T:urakawa.core.ICoreNode">
            <summary>
            Interface for the core node of the Urakawa model
            </summary>
        </member>
        <member name="T:urakawa.core.visitor.IVisitableCoreNode">
            <summary>
            Provides methods for accepting <see cref="T:urakawa.core.visitor.ICoreNodeVisitor"/>s
            </summary>
        </member>
        <member name="M:urakawa.core.visitor.IVisitableCoreNode.acceptDepthFirst(urakawa.core.visitor.ICoreNodeVisitor)">
            <summary>
            Accept a <see cref="T:urakawa.core.visitor.ICoreNodeVisitor"/> in depth first mode
            </summary>
            <param localName="visitor">The <see cref="T:urakawa.core.visitor.ICoreNodeVisitor"/></param>
        </member>
        <member name="M:urakawa.core.visitor.IVisitableCoreNode.acceptBreadthFirst(urakawa.core.visitor.ICoreNodeVisitor)">
            <summary>
            Accept a <see cref="T:urakawa.core.visitor.ICoreNodeVisitor"/> in breadth first mode
            </summary>
            <param localName="visitor">The <see cref="T:urakawa.core.visitor.ICoreNodeVisitor"/></param>
        </member>
        <member name="M:urakawa.core.visitor.IVisitableCoreNode.acceptDepthFirst(urakawa.core.visitor.preVisitDelegate,urakawa.core.visitor.postVisitDelegate)">
            <summary>
            Visits the <see cref="T:urakawa.core.visitor.IVisitableCoreNode"/> depth first
            </summary>
            <param localName="preVisit">The pre-visit delegate</param>
            <param localName="postVisit">The post visit delegate</param>
        </member>
        <member name="M:urakawa.core.ICoreNode.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.core.ICorePresentation"/> that owns the core node
            </summary>
            <returns>The owner</returns>
        </member>
        <member name="M:urakawa.core.ICoreNode.getProperty(System.Type)">
            <summary>
            Gets the <see cref="T:urakawa.core.property.IProperty"/> of the given <see cref="T:System.Type"/>
            </summary>
            <param localName="propType">The given <see cref="T:System.Type"/></param>
            <returns>The <see cref="T:urakawa.core.property.IProperty"/> of the given <see cref="T:System.Type"/>,
            <c>null</c> if no property of the given <see cref="T:System.Type"/> has been set</returns>
        </member>
        <member name="M:urakawa.core.ICoreNode.getListOfUsedPropertyTypes">
            <summary>
            Gets an array of the <see cref="T:System.Type"/>s of <see cref="T:urakawa.core.property.IProperty"/> set for the <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <returns>The array</returns>
        </member>
        <member name="M:urakawa.core.ICoreNode.setProperty(urakawa.core.property.IProperty)">
            <summary>
            Sets a <see cref="T:urakawa.core.property.IProperty"/>, possible overwriting previously set <see cref="T:urakawa.core.property.IProperty"/>
            of the same <see cref="T:System.Type"/>
            </summary>
            <param localName="prop">The <see cref="T:urakawa.core.property.IProperty"/> to set. 
            If <c>null</c> is passed, an <see cref="T:urakawa.exception.MethodParameterIsNullException"/> is thrown</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if a previously set <see cref="T:urakawa.core.property.IProperty"/>
            was overwritten
            </returns>
        </member>
        <member name="M:urakawa.core.ICoreNode.removeProperty(System.Type)">
            <summary>
            Remove a <see cref="T:urakawa.core.property.IProperty"/> of a given <see cref="T:System.Type"/>
            </summary>
            <param localName="propType">The given <see cref="T:System.Type"/></param>
            <returns>The <see cref="T:urakawa.core.property.IProperty"/> that was just removed,
            <c>null</c> if no <see cref="T:urakawa.core.property.IProperty"/> of the given type existed</returns>
        </member>
        <member name="T:urakawa.PropertyFactory">
            <summary>
            <para>Default implementation of <see cref="T:urakawa.IPropertyFactory"/>.</para>
            <para>
            Supports creation of <see cref="T:urakawa.properties.channel.ChannelsProperty"/> matching 
            QName <see cref="F:urakawa.ToolkitSettings.XUK_NS"/>:ChannelsProperty
            and <see cref="T:urakawa.properties.xml.XmlProperty"/> matching </para>
            QName <see cref="F:urakawa.ToolkitSettings.XUK_NS"/>:XmlProperty
            </summary>
        </member>
        <member name="M:urakawa.PropertyFactory.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.IPresentation"/> associated with <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.IPresentation"/></returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when the <c>this</c> has not been initialized with a <see cref="T:urakawa.IPresentation"/></exception>
        </member>
        <member name="M:urakawa.PropertyFactory.setPresentation(urakawa.IPresentation)">
            <summary>
            Sets the <see cref="T:urakawa.IPresentation"/> of <c>this</c>
            </summary>
            <param localName="newPres"></param>
        </member>
        <member name="M:urakawa.PropertyFactory.createChannelsProperty">
            <summary>
            Creates a <see cref="T:urakawa.properties.channel.ChannelsProperty"/>
            </summary>
            <returns>The created <see cref="T:urakawa.properties.channel.ChannelsProperty"/></returns>
        </member>
        <member name="M:urakawa.PropertyFactory.createProperty(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.core.property.IProperty"/> of type matching a given QName
            </summary>
            <param localName="localName">The local localName part of the QName</param>
            <param localName="namespaceUri">The namespace uri part of the QName</param>
            <returns>The created <see cref="T:urakawa.core.property.IProperty"/> or <c>null</c> is the given QName is not recognized</returns>
        </member>
        <member name="M:urakawa.PropertyFactory.createXmlProperty">
            <summary>
            Creates an <see cref="T:urakawa.properties.xml.XmlProperty"/> instance
            </summary>
            <returns>The created instance</returns>
        </member>
        <member name="M:urakawa.PropertyFactory.createXmlAttribute(urakawa.properties.xml.IXmlProperty)">
            <summary>
            Creates an <see cref="T:urakawa.properties.xml.XmlAttribute"/> instance with a given <see cref="T:urakawa.properties.xml.IXmlProperty"/> parent
            </summary>
            <param localName="parent">The parent</param>
            <returns>The created instance</returns>
        </member>
        <member name="M:urakawa.PropertyFactory.createXmlAttribute(urakawa.properties.xml.IXmlProperty,System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.properties.xml.IXmlAttribute"/> of type matching a given QName with a given parent <see cref="T:urakawa.properties.xml.IXmlProperty"/>
            </summary>
            <param localName="parent">The parent</param>
            <param localName="localName">The local localName part of the QName</param>
            <param localName="namespaceUri">The namespace uri part of the QName</param>
            <returns>The created instance or <c>null</c> if the QName is not recognized</returns>
        </member>
        <member name="T:urakawa.media.data.MediaDataFactory">
            <summary>
            <para>Default implmentation of <see cref="T:urakawa.media.data.IMediaDataFactory"/>.</para>
            <para>Supports creation of the following <see cref="T:urakawa.media.data.IMediaData"/> types:
            <list type="ul">
            <item><see cref="T:urakawa.media.data.codec.audio.WavAudioMediaData"/></item>
            <item><see cref="T:urakawa.media.data.PlainTextMediaData"/></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:urakawa.media.data.IMediaDataFactory">
            <summary>
            Factory creating <see cref="T:urakawa.media.data.IMediaData"/>s
            </summary>
        </member>
        <member name="M:urakawa.media.data.IMediaDataFactory.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaDataPresentation"/> asociated <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IMediaDataPresentation"/></returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when no <see cref="T:urakawa.media.data.IMediaDataPresentation"/> has yet been associated with <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.IMediaDataFactory.setPresentation(urakawa.media.data.IMediaDataPresentation)">
            <summary>
            Associates a <see cref="T:urakawa.media.data.IMediaDataPresentation"/> with <c>this</c>
            </summary>
            <param name="pres">The <see cref="T:urakawa.media.data.IMediaDataPresentation"/></param>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when <c>this</c> has already been associated with a <see cref="T:urakawa.media.data.IMediaDataPresentation"/></exception>
        </member>
        <member name="M:urakawa.media.data.IMediaDataFactory.getMediaDataManager">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaDataManager"/> associated with <c>this</c> 
            (via. the <see cref="T:urakawa.media.data.IMediaDataPresentation"/> associated with <c>this</c>.
            This is convenience for <c>this.<see cref="M:urakawa.media.data.IMediaDataFactory.getPresentation"/>().<see cref="M:urakawa.media.data.IMediaDataFactory.getMediaDataManager"/>getMediaDataManager()</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IMediaDataManager"/></returns>
        </member>
        <member name="M:urakawa.media.data.IMediaDataFactory.createMediaData(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.media.data.IMediaData"/>
            </summary>
            <param name="xukLocalName"></param>
            <param name="xukNamespaceUri"></param>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataFactory.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaDataPresentation"/> associated with <c>this</c>
            </summary>
            <returns>The associated <see cref="T:urakawa.media.data.IMediaDataPresentation"/></returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when no <see cref="T:urakawa.media.data.IMediaDataPresentation"/> has been associated with <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataFactory.setPresentation(urakawa.media.data.IMediaDataPresentation)">
            <summary>
            Initializer - associates <c>this</c> with a given <see cref="T:urakawa.media.data.IMediaDataPresentation"/>
            </summary>
            <param name="pres">The given <see cref="T:urakawa.media.data.IMediaDataPresentation"/></param>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when <c>this</c> has previously been associated with a <see cref="T:urakawa.media.data.IMediaDataPresentation"/>
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataFactory.getMediaDataManager">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaDataManager"/> associated with <c>this</c>
            (via the <see cref="T:urakawa.media.data.IMediaDataPresentation"/> associated with <c>this</c>.
            Convenience for <c><see cref="M:urakawa.media.data.MediaDataFactory.getPresentation"/>().<see cref="M:urakawa.media.data.IMediaDataPresentation.getMediaDataManager"/>()</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IMediaDataManager"/></returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataFactory.createMediaData(System.String,System.String)">
            <summary>
            Creates an instance of a <see cref="T:urakawa.media.data.IMediaData"/> of type matching a given XUK QName
            </summary>
            <param name="xukLocalName">The local name part of the QName</param>
            <param name="xukNamespaceUri">The namespace uri part of the QName</param>
            <returns>The created <see cref="T:urakawa.media.data.IMediaData"/> instance or <c>null</c> if the given QName is supported</returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataFactory.createMediaData(System.Type)">
            <summary>
            Creates a <see cref="T:urakawa.media.data.IMediaData"/> instance of a given <see cref="T:System.Type"/>
            </summary>
            <param name="mt">The given <see cref="T:System.Type"/></param>
            <returns>
            The created <see cref="T:urakawa.media.data.IMediaData"/> instance 
            or <c>null</c> if the given media <see cref="T:System.Type"/> is not supported
            </returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataFactory.createDataProvider">
            <summary>
            Creates a <see cref="T:urakawa.media.data.FileDataProvider"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.FileDataProvider"/></returns>
        </member>
        <member name="T:urakawa.properties.xml.XmlAttributeList">
            <summary>
            Summary description for XmlAttributeList.
            </summary>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttributeList.op_Addition(urakawa.properties.xml.XmlAttributeList,urakawa.properties.xml.IXmlAttribute)">
            <summary>
            Adds an <see cref="T:urakawa.properties.xml.IXmlAttribute"/> to a <see cref="T:urakawa.properties.xml.XmlAttributeList"/>
            </summary>
            <param localName="shouldBeThis">
            The <see cref="T:urakawa.properties.xml.XmlAttributeList"/> to which to add an <see cref="T:urakawa.properties.xml.IXmlAttribute"/>
            </param>
            <param localName="newAttr">
            The <see cref="T:urakawa.properties.xml.IXmlAttribute"/> to add
            </param>
            <returns>
            The <see cref="T:urakawa.properties.xml.XmlAttributeList"/> to which the <see cref="T:urakawa.properties.xml.IXmlAttribute"/> was added
            </returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttributeList.op_Subtraction(urakawa.properties.xml.XmlAttributeList,urakawa.properties.xml.IXmlAttribute)">
            <summary>
            Removes an <see cref="T:urakawa.properties.xml.IXmlAttribute"/> from a <see cref="T:urakawa.properties.xml.XmlAttributeList"/>
            </summary>
            <param localName="shouldBeThis">
            The <see cref="T:urakawa.properties.xml.XmlAttributeList"/> from which to remove an <see cref="T:urakawa.properties.xml.IXmlAttribute"/>
            </param>
            <param localName="oldAttr">
            The <see cref="T:urakawa.properties.xml.IXmlAttribute"/> to remove
            </param>
            <returns>
            The <see cref="T:urakawa.properties.xml.XmlAttributeList"/> from which an <see cref="T:urakawa.properties.xml.IXmlAttribute"/> was removed
            </returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttributeList.getByQName(System.String,System.String)">
            <summary>
            Gets an <see cref="T:urakawa.properties.xml.IXmlAttribute"/> by it's QName
            </summary>
            <param localName="localName">The local localName part of the QName</param>
            <param localName="namespaceUri">The namespace part of the QName</param>
            <returns>
            The <see cref="T:urakawa.properties.xml.IXmlAttribute"/> with the given QName, 
            <c>null</c> if no such <see cref="T:urakawa.properties.xml.IXmlAttribute"/> exists
            </returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttributeList.Insert(System.Int32,urakawa.properties.xml.IXmlAttribute)">
            <summary>
            Inserts a given <see cref="T:urakawa.properties.xml.IXmlAttribute"/> at a given index. 
            </summary>
            <param localName="index">The given index. Must be between <c>0</c> and <c><see cref="P:urakawa.properties.xml.XmlAttributeList.Count"/></c>. </param>
            <param localName="attr">The given <see cref="T:urakawa.properties.xml.IXmlAttribute"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="attr"/> is null
            </exception>
            <exception cref="T:urakawa.exception.NodeAlreadyExistException">
            Thrown when another <see cref="T:urakawa.properties.xml.IXmlAttribute"/> already exists with the sane QName
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="index"/> is out of bounds
            </exception>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttributeList.Remove(urakawa.properties.xml.IXmlAttribute)">
            <summary>
            Removes a given <see cref="T:urakawa.properties.xml.IXmlAttribute"/>
            </summary>
            <param localName="attr">The <see cref="T:urakawa.properties.xml.IXmlAttribute"/> to remove</param>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttributeList.Add(urakawa.properties.xml.IXmlAttribute)">
            <summary>
            Adds a <see cref="T:urakawa.properties.xml.IXmlAttribute"/>
            </summary>
            <param localName="attr">The <see cref="T:urakawa.properties.xml.IXmlAttribute"/> to add</param>
            <returns>The index at which the <see cref="T:urakawa.properties.xml.IXmlAttribute"/> was added</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="attr"/> is null
            </exception>
            <exception cref="T:urakawa.exception.NodeAlreadyExistException">
            Thrown when another <see cref="T:urakawa.properties.xml.IXmlAttribute"/> already exists with the sane QName
            </exception>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttributeList.Contains(urakawa.properties.xml.IXmlAttribute)">
            <summary>
            Determines if the list contains a given <see cref="T:urakawa.properties.xml.IXmlAttribute"/>
            </summary>
            <param localName="attr">The given <see cref="T:urakawa.properties.xml.IXmlAttribute"/></param>
            <returns>
            A <see cref="T:System.Boolean"/> indicating if the list contains the given <see cref="T:urakawa.properties.xml.IXmlAttribute"/>
            </returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttributeList.RemoveAt(System.Int32)">
            <summary>
            Removes the 
            </summary>
            <param localName="index"></param>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttributeList.Clear">
            <summary>
            Clears the <see cref="T:urakawa.properties.xml.IXmlAttribute"/>s from the list
            </summary>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttributeList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the <see cref="T:urakawa.properties.xml.IXmlAttribute"/>s in the list to an <see cref="T:System.Array"/>
            </summary>
            <param localName="array">The destination <see cref="T:System.Array"/></param>
            <param localName="index">The index in the destination <see cref="T:System.Array"/> at which to start the copy</param>
        </member>
        <member name="M:urakawa.properties.xml.XmlAttributeList.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:urakawa.properties.xml.XmlAttributeList"/>
            </summary>
            <returns>The <see cref="T:System.Collections.IEnumerator"/></returns>
        </member>
        <member name="P:urakawa.properties.xml.XmlAttributeList.Item(System.Int32)">
            <summary>
            Default indexed - retrieves <see cref="T:urakawa.properties.xml.IXmlAttribute"/>s by index
            </summary>
        </member>
        <member name="P:urakawa.properties.xml.XmlAttributeList.IsReadOnly">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating if the <see cref="T:urakawa.properties.xml.XmlAttributeList"/> is read-only
            (which it never is)
            </summary>
        </member>
        <member name="P:urakawa.properties.xml.XmlAttributeList.IsFixedSize">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating if the list has fixed size (which it never has)
            </summary>
        </member>
        <member name="P:urakawa.properties.xml.XmlAttributeList.IsSynchronized">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating if th list is syncronized
            </summary>
        </member>
        <member name="P:urakawa.properties.xml.XmlAttributeList.Count">
            <summary>
            Gets the number of <see cref="T:urakawa.properties.xml.IXmlAttribute"/>s in the list
            </summary>
        </member>
        <member name="P:urakawa.properties.xml.XmlAttributeList.SyncRoot">
            <summary>
            An object that can be used to synchronize access to 
            the <see cref="T:urakawa.properties.xml.XmlAttributeList"/>
            </summary>
        </member>
        <member name="T:urakawa.media.AudioMedia">
            <summary>
            AudioMedia is the audio object.
            It is time-based and comes from an external source.
            </summary>
        </member>
        <member name="M:urakawa.media.AudioMedia.#ctor(urakawa.media.IMediaFactory)">
            <summary>
            Constructor setting the associated <see cref="T:urakawa.media.IMediaFactory"/>
            </summary>
            <param name="fact">The <see cref="T:urakawa.media.IMediaFactory"/> with which to associate</param>
        </member>
        <member name="M:urakawa.media.AudioMedia.isContinuous">
            <summary>
            This always returns true, because
            audio media is always considered continuous
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.AudioMedia.isDiscrete">
            <summary>
            This always returns false, because
            audio media is never considered discrete
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.AudioMedia.isSequence">
            <summary>
            This always returns false, because
            a single media object is never considered to be a sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.AudioMedia.getMediaType">
            <summary>
            Return the urakawa media type
            </summary>
            <returns>always returns <see cref="F:urakawa.media.MediaType.AUDIO"/></returns>
        </member>
        <member name="M:urakawa.media.AudioMedia.copy">
            <summary>
            Copy function which returns an <see cref="T:urakawa.media.IAudioMedia"/> object
            </summary>
            <returns>A copy of this</returns>
            <exception cref="T:urakawa.exception.FactoryCanNotCreateTypeException">
            Thrown when the <see cref="T:urakawa.media.IMediaFactory"/> associated with this 
            can not create an <see cref="T:urakawa.media.IAudioMedia"/> matching the QName of <see cref="T:urakawa.media.AudioMedia"/>
            </exception>
        </member>
        <member name="M:urakawa.media.AudioMedia.getMediaFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.IMediaFactory"/> associated with <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.IMediaFactory"/></returns>
        </member>
        <member name="M:urakawa.media.AudioMedia.XukIn(System.Xml.XmlReader)">
            <summary>
            Fill in audio data from an XML source.
            Assume that the XmlReader cursor is at the opening audio tag.
            </summary>
            <param localName="source">the input XML source</param>
            <returns>true or false, depending on whether the data could be processed</returns>
        </member>
        <member name="M:urakawa.media.AudioMedia.XukOut(System.Xml.XmlWriter)">
            <summary>
            The opposite of <see cref="M:urakawa.media.AudioMedia.XukIn(System.Xml.XmlReader)"/>, this function writes the object's data
            to an XML file
            </summary>
            <param localName="destination">the XML source for outputting data</param>
            <returns>so far, this function always returns true</returns>
        </member>
        <member name="M:urakawa.media.AudioMedia.getXukLocalName">
            <summary>
            Gets the local localName part of the QName representing a <see cref="T:urakawa.media.AudioMedia"/> in Xuk
            </summary>
            <returns>The local localName part</returns>
        </member>
        <member name="M:urakawa.media.AudioMedia.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName representing a <see cref="T:urakawa.media.AudioMedia"/> in Xuk
            </summary>
            <returns>The namespace uri part</returns>
        </member>
        <member name="M:urakawa.media.AudioMedia.getLocation">
            <summary>
            Gets the <see cref="T:urakawa.media.IMediaLocation"/> of <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.IMediaLocation"/></returns>
        </member>
        <member name="M:urakawa.media.AudioMedia.setLocation(urakawa.media.IMediaLocation)">
            <summary>
            Sets the <see cref="T:urakawa.media.IMediaLocation"/> of <c>this</c>
            </summary>
            <param localName="location">The new <see cref="T:urakawa.media.IMediaLocation"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="location"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.AudioMedia.getClipDuration">
            <summary>
            Gets the duration of <c>this</c>
            </summary>
            <returns>A <see cref="T:urakawa.media.timing.ITimeDelta"/> representing the duration</returns>
        </member>
        <member name="M:urakawa.media.AudioMedia.getClipBegin">
            <summary>
            Gets the clip begin <see cref="T:urakawa.media.timing.ITime"/> of <c>this</c>
            </summary>
            <returns>Clip begin</returns>
        </member>
        <member name="M:urakawa.media.AudioMedia.getClipEnd">
            <summary>
            Gets the clip end <see cref="T:urakawa.media.timing.ITime"/> of <c>this</c>
            </summary>
            <returns>Clip end</returns>
        </member>
        <member name="M:urakawa.media.AudioMedia.setClipBegin(urakawa.media.timing.ITime)">
            <summary>
            Sets the clip begin <see cref="T:urakawa.media.timing.ITime"/>
            </summary>
            <param localName="beginPoint">The new clip begin <see cref="T:urakawa.media.timing.ITime"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="beginPoint"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="beginPoint"/> is beyond clip end of <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.media.AudioMedia.setClipEnd(urakawa.media.timing.ITime)">
            <summary>
            Sets the clip end <see cref="T:urakawa.media.timing.ITime"/>
            </summary>
            <param localName="endPoint">The new clip end <see cref="T:urakawa.media.timing.ITime"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="endPoint"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="endPoint"/> is before clip begin of <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.media.AudioMedia.split(urakawa.media.timing.ITime)">
            <summary>
            Splits <c>this</c> at a given <see cref="T:urakawa.media.timing.ITime"/>
            </summary>
            <param localName="splitPoint">The <see cref="T:urakawa.media.timing.ITime"/> at which to split - 
            must be between clip begin and clip end <see cref="T:urakawa.media.timing.ITime"/>s</param>
            <returns>
            A newly created <see cref="T:urakawa.media.IAudioMedia"/> containing the audio after,
            <c>this</c> retains the audio before <paramref localName="splitPoint"/>.
            </returns>
        </member>
        <member name="M:urakawa.media.AudioMedia.ValueEquals(urakawa.media.IMedia)">
            <summary>
            Conpares <c>this</c> with a given other <see cref="T:urakawa.media.IMedia"/> for equality
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.IMedia"/></param>
            <returns><c>true</c> if equal, otherwise <c>false</c></returns>
        </member>
        <member name="T:urakawa.core.visitor.preVisitDelegate">
            <summary>
            Delegate for pre-visit
            </summary>
            <param localName="node">The <see cref="T:urakawa.core.ICoreNode"/> being visited</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the children of <paramref localName="node"/>
            should be visited</returns>
        </member>
        <member name="T:urakawa.core.visitor.postVisitDelegate">
            <summary>
            Delegate for post-visit
            </summary>
            <param localName="node">The <see cref="T:urakawa.core.ICoreNode"/> being visited</param>
        </member>
        <member name="T:urakawa.properties.channel.ChannelFactory">
            <summary>
            The actual implementation to be implemented by the implementation team ;)
            All method bodies must be completed for realizing the required business logic.
            -
            This is the DEFAULT implementation for the API/Toolkit:
            end-users should feel free to use this class as such,
            or they can sub-class it in order to specialize the instance creation process.
            -
            In addition, an end-user has the possibility to implement the
            singleton factory pattern, so that only one instance of the factory
            is used throughout the application life
            (by adding a method like "static Factory getFactory()").
            <seealso cref="T:urakawa.properties.channel.IChannel"/> 
            <seealso cref="T:urakawa.properties.channel.Channel"/>
            <seealso cref="T:urakawa.properties.channel.IChannelsManager"/>
            </summary>
        </member>
        <member name="M:urakawa.properties.channel.ChannelFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.properties.channel.ChannelFactory.getChannelsManager">
            <summary>
            Gets the <see cref="T:urakawa.properties.channel.IChannelsManager"/> assigned the <see cref="T:urakawa.properties.channel.IChannel"/>s created
            by the <see cref="T:urakawa.properties.channel.ChannelFactory"/>
            </summary>
            <returns>The <see cref="T:urakawa.properties.channel.IChannelsManager"/></returns>
        </member>
        <member name="M:urakawa.properties.channel.ChannelFactory.createChannel(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:urakawa.properties.channel.IChannel"/> matching a given QName.
            </summary>
            <param localName="localName">The local part of the QName</param>
            <param localName="namespaceUri">The namespace uri part of the QName</param>
            <returns>The created <see cref="T:urakawa.properties.channel.IChannel"/> or <c>null</c> is the given QName is not supported</returns>
            <remarks>
            The only supported QName is <c><see cref="F:urakawa.ToolkitSettings.XUK_NS"/>:Channel</c> which matches <see cref="T:urakawa.properties.channel.Channel"/>
            </remarks>
        </member>
        <member name="M:urakawa.properties.channel.ChannelFactory.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.properties.channel.IChannelPresentation"/> associated with <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.properties.channel.IChannelPresentation"/></returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when no <see cref="T:urakawa.properties.channel.IChannelPresentation"/> has been associated with <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.ChannelFactory.setPresentation(urakawa.properties.channel.IChannelPresentation)">
            <summary>
            Associates a <see cref="T:urakawa.properties.channel.IChannelPresentation"/> with <c>this</c>
            </summary>
            <param name="pres">The <see cref="T:urakawa.properties.channel.IChannelPresentation"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when trying to associate <c>this</c> with a <c>null</c> <see cref="T:urakawa.properties.channel.IChannelPresentation"/>
            </exception>
        </member>
        <member name="T:urakawa.ToolkitSettings">
            <summary>
            Provides a place holder for toolkit wide settings - class is not instanciable
            </summary>
        </member>
        <member name="F:urakawa.ToolkitSettings.XUK_NS">
            <summary>
            Default namespace of XUK files
            </summary>
        </member>
        <member name="F:urakawa.ToolkitSettings.XUK_XSD_PATH">
            <summary>
            Path of XUK Xml-Schema - leaving this member empty will produce XUK files with no schema location
            </summary>
        </member>
        <member name="T:urakawa.metadata.IMetadata">
            <summary>
            Metadata item interface
            </summary>
        </member>
        <member name="M:urakawa.metadata.IMetadata.getName">
            <summary>
            Gets the name of the <see cref="T:urakawa.metadata.IMetadata"/>
            </summary>
            <returns>The name</returns>
        </member>
        <member name="M:urakawa.metadata.IMetadata.setName(System.String)">
            <summary>
            Sets the name of the <see cref="T:urakawa.metadata.IMetadata"/>
            </summary>
            <param name="newName">The new name</param>
        </member>
        <member name="M:urakawa.metadata.IMetadata.getContent">
            <summary>
            Gets the textual content of the <see cref="T:urakawa.metadata.IMetadata"/> item.
            Convenience for <c><see cref="M:urakawa.metadata.IMetadata.getOptionalAttributeValue(System.String)"/>("Content")</c>
            </summary>
            <returns>The textual content</returns>
        </member>
        <member name="M:urakawa.metadata.IMetadata.setContent(System.String)">
            <summary>
            Sets the textual content of the <see cref="T:urakawa.metadata.IMetadata"/> item.
            Convenience for <c><see cref="M:urakawa.metadata.IMetadata.setOptionalAttributeValue(System.String,System.String)"/>("Content", <paramref name="value"/>)</c>
            </summary>
            <param name="value">The new content value</param>
        </member>
        <member name="M:urakawa.metadata.IMetadata.getOptionalAttributeValue(System.String)">
            <summary>
            Gets an attribute value of the <see cref="T:urakawa.metadata.IMetadata"/> item by name
            </summary>
            <param name="name">The name of the attribute to get</param>
            <returns>The attribute value - <see cref="F:System.String.Empty"/> if no attribute exists with the given name</returns>
        </member>
        <member name="M:urakawa.metadata.IMetadata.setOptionalAttributeValue(System.String,System.String)">
            <summary>
            Sets the value of a named attribute
            </summary>
            <param name="name">The name of the attribute</param>
            <param name="value">The new value</param>
        </member>
        <member name="M:urakawa.metadata.IMetadata.getOptionalAttributeNames">
            <summary>
            Gets the names of all set attributes
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/> of names</returns>
        </member>
        <member name="T:urakawa.media.data.utillities.SubStream">
            <summary>
            A <see cref="T:System.IO.Stream"/> that implements reading a sub-chunk of a source <see cref="T:System.IO.Stream"/>.
            The source <see cref="T:System.IO.Stream"/> must support seeking
            </summary>
        </member>
        <member name="M:urakawa.media.data.utillities.SubStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Constructor setting the source <see cref="T:System.IO.Stream"/> as well as the start position and length
            of the sub-chunk specifying the <see cref="T:urakawa.media.data.utillities.SubStream"/>
            </summary>
            <param name="source">The source <see cref="T:System.IO.Stream"/></param>
            <param name="start">The start position of the sub-chunk</param>
            <param name="len">The length of the sub-chunk</param>
        </member>
        <member name="M:urakawa.media.data.utillities.SubStream.Flush">
            <summary>
            Does nothing since a <see cref="T:urakawa.media.data.utillities.SubStream"/> is read-only
            </summary>
        </member>
        <member name="M:urakawa.media.data.utillities.SubStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current <see cref="T:urakawa.media.data.utillities.SubStream"/> and 
            advances the position within the stream by the number of bytes read
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, 
            the buffer contains the specified byte array with the values between 
            <c><paramref name="offset"/></c> and <c>(<paramref name="offset"/> + <paramref name="count"/> - 1)</c> 
            replaced by the bytes read from the current <see cref="T:urakawa.media.data.utillities.SubStream"/>.
            </param>
            <param name="offset">
            The zero-based byte offset in <paramref name="buffer"/> 
            at which to begin storing the data read from the current <see cref="T:urakawa.media.data.utillities.SubStream"/>.
            </param>
            <param name="count">The maximum number of bytes to be read from the current <see cref="T:urakawa.media.data.utillities.SubStream"/>.</param>
            <returns>The number of <see cref="T:System.Byte"/>s read</returns>
        </member>
        <member name="M:urakawa.media.data.utillities.SubStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the <see cref="P:urakawa.media.data.utillities.SubStream.Position"/> within the current stream.
            </summary>
            <param name="offset">
            A byte <paramref name="offset"/> relative to the origin parameter.
            </param>
            <param name="origin">
            A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.
            </param>
            <returns>The new <see cref="P:urakawa.media.data.utillities.SubStream.Position"/> within the current stream.</returns>
        </member>
        <member name="M:urakawa.media.data.utillities.SubStream.SetLength(System.Int64)">
            <summary>
            Sets the <see cref="P:urakawa.media.data.utillities.SubStream.Length"/> of the <see cref="T:urakawa.media.data.utillities.SubStream"/>.
            Since a <see cref="T:urakawa.media.data.utillities.SubStream"/> is read-only, 
            calling this method will thorw an <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="value">The new <see cref="P:urakawa.media.data.utillities.SubStream.Length"/> </param>
        </member>
        <member name="M:urakawa.media.data.utillities.SubStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            Since a <see cref="T:urakawa.media.data.utillities.SubStream"/> is read only, 
            calling this method will thorw an <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="buffer">
            An array of <see cref="T:System.Byte"/>s. 
            This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.
            </param>
            <param name="offset">
            The zero-based byte offset in <paramref name="buffer"/> at which to begin copying <see cref="T:System.Byte"/>s 
            to the current stream.
            </param>
            <param name="count">The number of <see cref="T:System.Byte"/>s to be written to the current stream.</param>
        </member>
        <member name="M:urakawa.media.data.utillities.SubStream.Close">
            <summary>
            Closes the <see cref="T:urakawa.media.data.utillities.SubStream"/> and it's underlying source <see cref="T:System.IO.Stream"/>
            </summary>
        </member>
        <member name="P:urakawa.media.data.utillities.SubStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading. 
            </summary>
        </member>
        <member name="P:urakawa.media.data.utillities.SubStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking. 
            </summary>
        </member>
        <member name="P:urakawa.media.data.utillities.SubStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing - always returns <c>false</c>
            </summary>
        </member>
        <member name="P:urakawa.media.data.utillities.SubStream.Length">
            <summary>
            Gets the length in bytes of the <see cref="T:urakawa.media.data.utillities.SubStream"/>
            </summary>
        </member>
        <member name="P:urakawa.media.data.utillities.SubStream.Position">
            <summary>
            Gets or sets the position within the <see cref="T:urakawa.media.data.utillities.SubStream"/>
            </summary>
        </member>
        <member name="T:urakawa.media.data.IDataProvider">
            <summary>
            Interface for a generic <see cref="T:urakawa.media.data.IDataProvider"/> providing access to data storage 
            via input and output <see cref="T:System.IO.Stream"/>s
            </summary>
        </member>
        <member name="M:urakawa.media.data.IDataProvider.getDataProviderManager">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IDataProviderManager"/> associated with <c>this</c>
            </summary>
            <returns>The associated <see cref="T:urakawa.media.data.IDataProviderManager"/></returns>
        </member>
        <member name="M:urakawa.media.data.IDataProvider.getInputStream">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> providing read access to the data
            </summary>
            <returns>The input <see cref="T:System.IO.Stream"/></returns>
        </member>
        <member name="M:urakawa.media.data.IDataProvider.getOutputStream">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> providing write access to the data
            </summary>
            <returns>The output <see cref="T:System.IO.Stream"/></returns>
        </member>
        <member name="M:urakawa.media.data.IDataProvider.delete">
            <summary>
            Deletes any resources associated with <c>this</c> permanently
            </summary>
        </member>
        <member name="M:urakawa.media.data.IDataProvider.copy">
            <summary>
            Creates a copy of <c>this</c>including a copy of the data
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="T:urakawa.media.MediaType">
            <summary>
            Enumeration of basic media types.
            </summary>
        </member>
        <member name="F:urakawa.media.MediaType.AUDIO">
            <summary>
            AudioMedia
            </summary>
        </member>
        <member name="F:urakawa.media.MediaType.VIDEO">
            <summary>
            VideoMedia
            </summary>
        </member>
        <member name="F:urakawa.media.MediaType.TEXT">
            <summary>
            TextMedia
            </summary>
        </member>
        <member name="F:urakawa.media.MediaType.IMAGE">
            <summary>
            VideoMedia
            </summary>
        </member>
        <member name="F:urakawa.media.MediaType.EMPTY_SEQUENCE">
            <summary>
            An empty SequenceMedia
            </summary>
        </member>
        <member name="M:urakawa.media.data.FileDataProvider.getFilePath">
            <summary>
            Gets the full path of the file storing the data the instance
            </summary>
            <returns>The full path</returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProvider.getInputStream">
            <summary>
            Gets an input <see cref="T:System.IO.Stream"/> providing read access to the <see cref="T:urakawa.media.data.FileDataProvider"/>
            </summary>
            <returns>The input <see cref="T:System.IO.Stream"/></returns>
        </member>
        <member name="T:urakawa.properties.xml.XmlPropertyElementNameVisitor">
            <summary>
            Summary description for XmlPropertyElementNameVisitor.
            </summary>
        </member>
        <member name="M:urakawa.properties.xml.XmlPropertyElementNameVisitor.#ctor">
            <summary>
            The constructor
            </summary>
        </member>
        <member name="M:urakawa.properties.xml.XmlPropertyElementNameVisitor.setXmlPropertyType(System.Type)">
            <summary>
            Sets the <see cref="T:System.Type"/> of the <see cref="T:urakawa.properties.xml.IXmlProperty"/> to inspect upon visitation
            </summary>
            <param name="newType">The <see cref="T:System.Type"/> - must implement <see cref="T:urakawa.properties.xml.IXmlProperty"/></param>
        </member>
        <member name="M:urakawa.properties.xml.XmlPropertyElementNameVisitor.addElementName(System.String,System.String)">
            <summary>
            Add an element localName to the collection of search terms.  
            The search terms should be considered an "OR"-list.
            </summary>
            <param localName="localName">The local localName part of the element localName</param>
            <param localName="namespaceUri">The namespace uri part of the element localName</param>
        </member>
        <member name="M:urakawa.properties.xml.XmlPropertyElementNameVisitor.getResults">
            <summary>
            Get the results of the tree visit to see if any nodes were found
            whose XML properties matched the search request.
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlPropertyElementNameVisitor.preVisit(urakawa.core.ICoreNode)">
            <summary>
            Look at the current node and see if it has an <see cref="T:urakawa.properties.xml.IXmlProperty"/> 
            that is interesting to us.  if so, add it to our internal list.
            </summary>
            <param localName="node">The <see cref="T:urakawa.core.ICoreNode"/> bwing visited</param>
            <returns><c>true</c></returns>
        </member>
        <member name="M:urakawa.properties.xml.XmlPropertyElementNameVisitor.postVisit(urakawa.core.ICoreNode)">
            <summary>
            This visitor does nothing post-visit
            </summary>
            <param localName="node">The <see cref="T:urakawa.core.ICoreNode"/> being visited</param>
        </member>
        <member name="T:urakawa.Presentation">
            <summary>
            Default implementation of interface <see cref="T:urakawa.IPresentation"/>
            </summary>
        </member>
        <member name="M:urakawa.Presentation.#ctor">
            <summary>
            Default constructor - initializes the
            </summary>
        </member>
        <member name="M:urakawa.Presentation.#ctor(urakawa.core.ICoreNodeFactory,urakawa.IPropertyFactory,urakawa.properties.channel.IChannelFactory,urakawa.properties.channel.IChannelsManager,urakawa.media.MediaFactory)">
            <summary>
            Constructor setting given factories and managers
            </summary>
            <param name="coreNodeFact">
            The <see cref="T:urakawa.core.ICoreNodeFactory"/> of the <see cref="T:urakawa.Presentation"/> -
            if <c>null</c> a newly created <see cref="T:urakawa.core.CoreNodeFactory"/> is used
            </param>
            <param name="propFact">
            The <see cref="T:urakawa.IPropertyFactory"/> of the <see cref="T:urakawa.Presentation"/> -
            if <c>null</c> a newly created <see cref="T:urakawa.PropertyFactory"/> is used
            </param>
            <param name="chFact">
            The <see cref="T:urakawa.properties.channel.IChannelFactory"/> of the <see cref="T:urakawa.Presentation"/> -
            if <c>null</c> a newly created <see cref="T:urakawa.properties.channel.ChannelFactory"/> is used
            </param>
            <param name="chMgr">
            The <see cref="T:urakawa.properties.channel.IChannelsManager"/> of the <see cref="T:urakawa.Presentation"/> -
            if <c>null</c> a newly created <see cref="T:urakawa.properties.channel.ChannelsManager"/> is used
            </param>
            <param name="mediaFact">
            The <see cref="T:urakawa.media.IMediaFactory"/> of the <see cref="T:urakawa.Presentation"/> -
            if <c>null</c> a newly created <see cref="T:urakawa.media.MediaFactory"/> is used
            </param>
        </member>
        <member name="M:urakawa.Presentation.XukIn(System.Xml.XmlReader)">
            <summary>
            Reads the <see cref="T:urakawa.Presentation"/> from a Presentation xuk element
            </summary>
            <param localName="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the read was succesful</returns>
        </member>
        <member name="M:urakawa.Presentation.XukInChannelsManager(System.Xml.XmlReader)">
            <summary>
            Reads the <see cref="T:urakawa.properties.channel.IChannelsManager"/> from a <c>mChannelsManager</c> xuk element
            </summary>
            <param localName="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the read was succesful</returns>
        </member>
        <member name="M:urakawa.Presentation.XukInRootNode(System.Xml.XmlReader)">
            <summary>
            Reads the root <see cref="T:urakawa.core.ICoreNode"/> of <c>this</c> from a <c>mRootNode</c> xuk xml element
            </summary>
            <param localName="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the read was succesful</returns>
            <remarks>The read is considered succesful even if no valid root node is found</remarks>
        </member>
        <member name="M:urakawa.Presentation.XukOut(System.Xml.XmlWriter)">
            <summary>
            Write a Presentation element to a XUK file representing the <see cref="T:urakawa.Presentation"/> instance
            </summary>
            <param localName="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the write was succesful</returns>
        </member>
        <member name="M:urakawa.Presentation.getXukLocalName">
            <summary>
            Gets the local localName part of the QName representing a <see cref="T:urakawa.Presentation"/> in Xuk
            </summary>
            <returns>The local localName part</returns>
        </member>
        <member name="M:urakawa.Presentation.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName representing a <see cref="T:urakawa.Presentation"/> in Xuk
            </summary>
            <returns>The namespace uri part</returns>
        </member>
        <member name="M:urakawa.Presentation.getRootNode">
            <summary>
            Gets the root <see cref="T:urakawa.core.ICoreNode"/> of <c>this</c>
            </summary>
            <returns>The root</returns>
        </member>
        <member name="M:urakawa.Presentation.setRootNode(urakawa.core.ICoreNode)">
            <summary>
            Sets the root <see cref="T:urakawa.core.ICoreNode"/> of <c>this</c>
            </summary>
            <param localName="newRoot">The new root - a <c>null</c> value is allowed</param>
            <remarks>If the new root <see cref="T:urakawa.core.ICoreNode"/> has a parent it is detached</remarks>
        </member>
        <member name="M:urakawa.Presentation.getCoreNodeFactory">
            <summary>
            Gets the <see cref="T:urakawa.core.ICoreNodeFactory"/> of <c>this</c>
            </summary>
            <returns>The factory</returns>
        </member>
        <member name="M:urakawa.Presentation.getPropertyFactory">
            <summary>
            Gets the <see cref="T:urakawa.core.property.ICorePropertyFactory"/> of <c>this</c>, 
            which is in fact always a <see cref="T:urakawa.IPropertyFactory"/> instance
            </summary>
            <returns>The <see cref="T:urakawa.IPropertyFactory"/></returns>
        </member>
        <member name="M:urakawa.Presentation.getMediaFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.IMediaFactory"/> of <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.IMediaFactory"/></returns>
        </member>
        <member name="M:urakawa.Presentation.getChannelFactory">
            <summary>
            Gets the <see cref="T:urakawa.properties.channel.IChannelFactory"/> of <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.properties.channel.IChannelFactory"/></returns>
        </member>
        <member name="M:urakawa.Presentation.getChannelsManager">
            <summary>
            Gets the <see cref="T:urakawa.properties.channel.IChannelsManager"/> of <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.properties.channel.IChannelsManager"/></returns>
        </member>
        <member name="M:urakawa.Presentation.getChannelsPropertyFactory">
            <summary>
            Gets the <see cref="T:urakawa.properties.channel.IChannelsPropertyFactory"/> of <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.properties.channel.IChannelsPropertyFactory"/></returns>
        </member>
        <member name="T:urakawa.properties.channel.IChannel">
            <summary>
            Interface for a channel used to storing <see cref="T:urakawa.media.IMedia"/>s 
            on <see cref="T:urakawa.core.ICoreNode"/>s via. the <see cref="T:urakawa.properties.channel.IChannelsProperty"/>
            </summary>
        </member>
        <member name="M:urakawa.properties.channel.IChannel.setName(System.String)">
            <summary>
            Sets the localName of the <see cref="T:urakawa.properties.channel.IChannel"/>
            </summary>
            <param localName="localName">The new localName</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="localName"/> is null
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsEmptyStringException">
            Thrown when <paramref localName="localName"/> is an empty string
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.IChannel.getName">
            <summary>
            Gets the localName of the <see cref="T:urakawa.properties.channel.IChannel"/>
            </summary>
            <returns>The localName</returns>
        </member>
        <member name="M:urakawa.properties.channel.IChannel.isMediaTypeSupported(urakawa.media.MediaType)">
            <summary>
            Checks of a given <see cref="T:urakawa.media.MediaType"/> is supported by the channel
            </summary>
            <param localName="type">The <see cref="T:urakawa.media.MediaType"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the <see cref="T:urakawa.media.MediaType"/>
            is supported</returns>
        </member>
        <member name="M:urakawa.properties.channel.IChannel.addSupportedMediaType(urakawa.media.MediaType)">
            <summary>
            Adds a <see cref="T:urakawa.media.MediaType"/> to the list of <see cref="T:urakawa.media.MediaType"/>s 
            supported by the <see cref="T:urakawa.properties.channel.IChannel"/>
            </summary>
            <param name="newType"></param>
        </member>
        <member name="M:urakawa.properties.channel.IChannel.getChannelsManager">
            <summary>
            Gets the <see cref="T:urakawa.properties.channel.IChannelsManager"/> managing the <see cref="T:urakawa.properties.channel.IChannel"/>
            </summary>
            <returns>The <see cref="T:urakawa.properties.channel.IChannelsManager"/></returns>
        </member>
        <member name="M:urakawa.properties.channel.IChannel.getUid">
            <summary>
            Gets the Xuk id of the <see cref="T:urakawa.properties.channel.IChannel"/>
            </summary>
            <returns>The Xuk Id as calculated by 
            <c>this.getChannelsManager().getUidOfChannel(this)</c></returns>
        </member>
        <member name="T:urakawa.properties.channel.Channel">
            <summary>
            Default implementation of the <see cref="T:urakawa.properties.channel.IChannel"/> interface 
            - supports at most a single <see cref="T:urakawa.media.MediaType"/>
            </summary>
        </member>
        <member name="F:urakawa.properties.channel.Channel.mSupportedMediaType">
            <summary>
            Holds the supported <see cref="T:urakawa.media.MediaType"/> for the channel,
            the value <see cref="F:urakawa.media.MediaType.EMPTY_SEQUENCE"/> signifies that 
            all <see cref="T:urakawa.media.MediaType"/>s are supported 
            </summary>
        </member>
        <member name="M:urakawa.properties.channel.Channel.getChannelsManager">
            <summary>
            Gets the <see cref="T:urakawa.properties.channel.IChannelsManager"/> managing the <see cref="T:urakawa.properties.channel.Channel"/>
            </summary>
            <returns>The <see cref="T:urakawa.properties.channel.IChannelsManager"/></returns>
        </member>
        <member name="M:urakawa.properties.channel.Channel.setName(System.String)">
            <summary>
            Sets the localName of the <see cref="T:urakawa.properties.channel.IChannel"/>
            </summary>
            <param localName="localName">The new localName</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="localName"/> is null
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.Channel.getName">
            <summary>
            Gets the localName of the <see cref="T:urakawa.properties.channel.IChannel"/>
            </summary>
            <returns>The localName</returns>
        </member>
        <member name="M:urakawa.properties.channel.Channel.isMediaTypeSupported(urakawa.media.MediaType)">
            <summary>
            Checks of a given <see cref="T:urakawa.media.MediaType"/> is supported by the channel
            </summary>
            <param localName="type">The <see cref="T:urakawa.media.MediaType"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the <see cref="T:urakawa.media.MediaType"/>
            is supported</returns>
        </member>
        <member name="M:urakawa.properties.channel.Channel.addSupportedMediaType(urakawa.media.MediaType)">
            <summary>
            Sets the <see cref="T:urakawa.media.MediaType"/> supported by the <see cref="T:urakawa.properties.channel.Channel"/>
            </summary>
            <param localName="newType">The new <see cref="T:urakawa.media.MediaType"/> supported</param>
            <exception cref="T:urakawa.exception.MediaTypeIsIllegalException">
            Thrown when the <see cref="T:urakawa.properties.channel.Channel"/> has already been assigned 
            a <see cref="T:urakawa.media.MediaType"/> to support that is different from <paramref localName="newType"/>. 
            Alternatively if <paramref localName="newType"/> has the illegal 
            value <see cref="F:urakawa.media.MediaType.EMPTY_SEQUENCE"/>
            </exception>
        </member>
        <member name="M:urakawa.properties.channel.Channel.getUid">
            <summary>
            Gets the Xuk id of the <see cref="T:urakawa.properties.channel.Channel"/>
            </summary>
            <returns>The Xuk Id as calculated by 
            <c>this.getChannelsManager.getUidOfChannel(this)</c></returns>
        </member>
        <member name="M:urakawa.properties.channel.Channel.XukIn(System.Xml.XmlReader)">
            <summary>
            Reads the <see cref="T:urakawa.properties.channel.Channel"/> from a Channel element in a XUK document
            </summary>
            <param localName="source">An <see cref="T:System.Xml.XmlReader"/> from which to read the Channel element</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the <see cref="T:urakawa.properties.channel.Channel"/> was succesfully read</returns>
        </member>
        <member name="M:urakawa.properties.channel.Channel.XukOut(System.Xml.XmlWriter)">
            <summary>
            Writes the <see cref="T:urakawa.properties.channel.Channel"/> to a Channel element in a XUK document
            </summary>
            <param localName="destination"></param>
            <returns></returns>
        </member>
        <member name="M:urakawa.properties.channel.Channel.getXukLocalName">
            <summary>
            Gets the local localName part of the QName representing a <see cref="T:urakawa.properties.channel.Channel"/> in Xuk
            </summary>
            <returns>The local localName part</returns>
        </member>
        <member name="M:urakawa.properties.channel.Channel.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName representing a <see cref="T:urakawa.properties.channel.Channel"/> in Xuk
            </summary>
            <returns>The namespace uri part</returns>
        </member>
        <member name="T:urakawa.media.data.MediaDataManager">
            <summary>
            Default implementation of a <see cref="T:urakawa.media.data.IMediaDataManager"/>
            </summary>
        </member>
        <member name="T:urakawa.media.data.IMediaDataManager">
            <summary>
            Manager for <see cref="T:urakawa.media.data.IMediaData"/>. 
            </summary>
        </member>
        <member name="M:urakawa.media.data.IMediaDataManager.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaDataPresentation"/> associated with <c>this</c>
            </summary>
            <returns>The associated <see cref="T:urakawa.media.data.IMediaDataPresentation"/></returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when no <see cref="T:urakawa.media.data.IMediaDataPresentation"/> has been associated with <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.IMediaDataManager.setPresentation(urakawa.media.data.IMediaDataPresentation)">
            <summary>
            Associates a <see cref="T:urakawa.media.data.IMediaDataPresentation"/> with <c>this</c> - Initializer
            </summary>
            <param name="pres">The <see cref="T:urakawa.media.data.IMediaDataPresentation"/> with which to associate <c>this</c></param>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when <c>this</c> has already been associated with a <see cref="T:urakawa.media.data.IMediaDataPresentation"/></exception>
        </member>
        <member name="M:urakawa.media.data.IMediaDataManager.getMediaDataFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaDataFactory"/> associated with <c>this</c> 
            (via. the <see cref="T:urakawa.media.data.IMediaDataPresentation"/> associated with <c>this</c>).
            Convenience for <c><see cref="M:urakawa.media.data.IMediaDataManager.getPresentation"/>().<see cref="M:urakawa.media.data.IMediaDataPresentation.getMediaDataFactory"/>()</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IMediaDataFactory"/></returns>
        </member>
        <member name="M:urakawa.media.data.IMediaDataManager.getDataProviderFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IDataProviderFactory"/> associated with <c>this</c> 
            (via. the <see cref="T:urakawa.media.data.IMediaDataPresentation"/> associated with <c>this</c>).
            Convenience for <c><see cref="M:urakawa.media.data.IMediaDataManager.getPresentation"/>().<see cref="M:urakawa.media.data.IMediaDataPresentation.getDataProviderFactory"/>()</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IDataProviderFactory"/></returns>
        </member>
        <member name="M:urakawa.media.data.IMediaDataManager.getMediaData(System.String)">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaData"/> with a given UID
            </summary>
            <param name="uid">The given UID</param>
            <returns>The <see cref="T:urakawa.media.data.IMediaData"/> with the given UID or <c>null</c> if no such <see cref="T:urakawa.media.data.IMediaData"/> exists</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="uid"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.IMediaDataManager.getUidOfMediaData(urakawa.media.data.IMediaData)">
            <summary>
            Gets the UID of a given <see cref="T:urakawa.media.data.IMediaData"/>
            </summary>
            <param name="data">The given <see cref="T:urakawa.media.data.IMediaData"/></param>
            <returns>The UID of <see cref="T:urakawa.media.data.IMediaData"/> <paramref name="data"/></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="data"/> is <c>null</c>
            </exception>
            <exception cref="!:exception.IsNotManagerException">
            Thrown when <c>this</c> is not the manager of <paramref name="data"/>
            </exception>
        </member>
        <member name="M:urakawa.media.data.IMediaDataManager.addMediaData(urakawa.media.data.IMediaData)">
            <summary>
            Adds a <see cref="T:urakawa.media.data.IMediaData"/> to the <see cref="T:urakawa.media.data.IMediaDataManager"/>
            </summary>
            <param name="data">The <see cref="T:urakawa.media.data.IMediaData"/> to add</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="data"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.IMediaDataManager.deleteMediaData(urakawa.media.data.IMediaData)">
            <summary>
            Deletes a <see cref="T:urakawa.media.data.IMediaData"/>
            </summary>
            <param name="data">The <see cref="T:urakawa.media.data.IMediaData"/> to delete</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="data"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.IMediaDataManager.deleteMediaData(System.String)">
            <summary>
            Deletes a <see cref="T:urakawa.media.data.IMediaData"/>
            </summary>
            <param name="uid">The UID of the <see cref="T:urakawa.media.data.IMediaData"/> to delete</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="uid"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">
            Thrown when no <see cref="T:urakawa.media.data.IMediaData"/> managed by <c>this</c> has the given UID
            </exception>
        </member>
        <member name="M:urakawa.media.data.IMediaDataManager.copyMediaData(urakawa.media.data.IMediaData)">
            <summary>
            Creates a copy of a <see cref="T:urakawa.media.data.IMediaData"/>
            </summary>
            <param name="data">The <see cref="T:urakawa.media.data.IMediaData"/> to copy</param>
            <returns>The copy</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="data"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.IMediaDataManager.copyMediaData(System.String)">
            <summary>
            Creates a copy of a <see cref="T:urakawa.media.data.IMediaData"/>
            </summary>
            <param name="uid">The UID of the <see cref="T:urakawa.media.data.IMediaData"/> to copy</param>
            <returns>The copy</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="uid"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">
            Thrown when no <see cref="T:urakawa.media.data.IMediaData"/> managed by <c>this</c> has the given UID
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:urakawa.media.data.MediaDataManager.getPresentation" -->
        <member name="M:urakawa.media.data.MediaDataManager.setPresentation(urakawa.media.data.IMediaDataPresentation)">
            <summary>
            Associates a <see cref="T:urakawa.media.data.IMediaDataPresentation"/> with <c>this</c> - Initializer
            </summary>
            <param name="pres">The <see cref="T:urakawa.media.data.IMediaDataPresentation"/> with which to associate <c>this</c></param>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when <c>this</c> has already been associated with a <see cref="T:urakawa.media.data.IMediaDataPresentation"/>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="pres"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.getMediaDataFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaDataFactory"/> associated with <c>this</c> 
            (via. the <see cref="T:urakawa.media.data.IMediaDataPresentation"/> associated with <c>this</c>).
            Convenience for <c><see cref="M:urakawa.media.data.MediaDataManager.getPresentation"/>().<see cref="M:urakawa.media.data.IMediaDataPresentation.getMediaDataFactory"/>()</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IMediaDataFactory"/></returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.getDataProviderFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IDataProviderFactory"/> associated with <c>this</c> 
            (via. the <see cref="T:urakawa.media.data.IMediaDataPresentation"/> associated with <c>this</c>).
            Convenience for <c><see cref="M:urakawa.media.data.MediaDataManager.getPresentation"/>().<see cref="M:urakawa.media.data.IMediaDataPresentation.getDataProviderFactory"/>()</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IDataProviderFactory"/></returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.getMediaData(System.String)">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaData"/> with a given UID
            </summary>
            <param name="uid">The given UID</param>
            <returns>The <see cref="T:urakawa.media.data.IMediaData"/> with the given UID or <c>null</c> if no such <see cref="T:urakawa.media.data.IMediaData"/> exists</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="uid"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.getUidOfMediaData(urakawa.media.data.IMediaData)">
            <summary>
            Gets the UID of a given <see cref="T:urakawa.media.data.IMediaData"/>
            </summary>
            <param name="data">The given <see cref="T:urakawa.media.data.IMediaData"/></param>
            <returns>The UID of <see cref="T:urakawa.media.data.IMediaData"/> <paramref name="data"/></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="data"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">
            Thrown when <c>this</c> is not the manager of <paramref name="data"/>
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.addMediaData(urakawa.media.data.IMediaData)">
            <summary>
            Adds a <see cref="T:urakawa.media.data.IMediaData"/> to the <see cref="T:urakawa.media.data.IMediaDataManager"/>
            </summary>
            <param name="data">The <see cref="T:urakawa.media.data.IMediaData"/> to add</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="data"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.deleteMediaData(urakawa.media.data.IMediaData)">
            <summary>
            Deletes a <see cref="T:urakawa.media.data.IMediaData"/>
            </summary>
            <param name="data">The <see cref="T:urakawa.media.data.IMediaData"/> to delete</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="data"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.deleteMediaData(System.String)">
            <summary>
            Deletes a <see cref="T:urakawa.media.data.IMediaData"/>
            </summary>
            <param name="uid">The UID of the <see cref="T:urakawa.media.data.IMediaData"/> to delete</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="uid"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">
            Thrown when no <see cref="T:urakawa.media.data.IMediaData"/> managed by <c>this</c> has the given UID
            </exception>
        </member>
        <member name="T:urakawa.media.data.MediaDataLocation">
            <summary>
            Default implementation of <see cref="T:urakawa.media.data.IMediaDataLocation"/>
            </summary>
        </member>
        <member name="T:urakawa.media.data.IMediaDataLocation">
            <summary>
            Interface for a generic <see cref="T:urakawa.media.IMediaLocation"/> that points to <see cref="T:urakawa.media.data.IMediaData"/>
            </summary>
        </member>
        <member name="M:urakawa.media.data.IMediaDataLocation.getMediaData">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaData"/> pointed to by <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IMediaData"/></returns>
        </member>
        <member name="M:urakawa.media.data.IMediaDataLocation.setMediaData(urakawa.media.data.IMediaData)">
            <summary>
            Sets the <see cref="T:urakawa.media.data.IMediaData"/> pointed to by this
            </summary>
            <param name="newData">The new <see cref="T:urakawa.media.data.IMediaData"/> that <c>this</c> should point to</param>
        </member>
        <member name="M:urakawa.media.data.IMediaDataLocation.getMediaDataFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaDataFactory"/> associated with <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IMediaDataFactory"/></returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataLocation.#ctor(urakawa.media.IMediaFactory,urakawa.media.data.IMediaDataFactory)">
            <summary>
            Constructor associating <c>this</c> with a <see cref="T:urakawa.media.IMediaFactory"/> and a <see cref="T:urakawa.media.data.IMediaDataFactory"/>
            </summary>
            <param name="mediaFact"></param>
            <param name="mediaDataFact"></param>
        </member>
        <member name="M:urakawa.media.data.MediaDataLocation.getMediaData">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaData"/> pointed to by <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IMediaData"/></returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataLocation.setMediaData(urakawa.media.data.IMediaData)">
            <summary>
            Sets the <see cref="T:urakawa.media.data.IMediaData"/> pointed to by this
            </summary>
            <param name="newData">The new <see cref="T:urakawa.media.data.IMediaData"/> that <c>this</c> should point to</param>
        </member>
        <member name="M:urakawa.media.data.MediaDataLocation.copy">
            <summary>
            Creates a copy of this including a copy of the <see cref="T:urakawa.media.data.IMediaData"/> pointed to by <c>this</c>
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataLocation.getMediaFactory">
            <summary>
            Return the <see cref="!:IMediaFacotry"/> associated with <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.IMediaFactory"/></returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataLocation.getMediaDataFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IMediaDataFactory"/> associated with <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IMediaDataFactory"/></returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataLocation.XukIn(System.Xml.XmlReader)">
            <summary>
            Reads the <see cref="T:urakawa.media.data.MediaDataLocation"/> from a MediaDataLocation xuk element
            </summary>
            <param localName="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the read was succesful</returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataLocation.XukOut(System.Xml.XmlWriter)">
            <summary>
            Write a MediaDataLocation element to a XUK file representing the <see cref="T:urakawa.media.data.MediaDataLocation"/> instance
            </summary>
            <param localName="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the write was succesful</returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataLocation.getXukLocalName">
            <summary>
            Gets the local name part of the QName representing a <see cref="T:urakawa.media.data.MediaDataLocation"/> in Xuk
            </summary>
            <returns>The local name part</returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataLocation.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName representing a <see cref="T:urakawa.media.data.MediaDataLocation"/> in Xuk
            </summary>
            <returns>The namespace uri part</returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataLocation.ValueEquals(urakawa.media.IMediaLocation)">
            <summary>
            Determines if another <see cref="T:urakawa.media.IMediaLocation"/> has the same value as <c>this</c>
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.IMediaLocation"/></param>
            <returns><c>true</c> if <c>this</c>  and <paramref name="other"/> have the same value, 
            <c>false</c> else</returns>
        </member>
        <member name="T:urakawa.core.CoreNode">
            <summary>
            Implementation of	<see cref="T:urakawa.core.CoreNode"/> interface
            </summary>
        </member>
        <member name="F:urakawa.core.CoreNode.mProperties">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> storing the <see cref="T:urakawa.core.property.IProperty"/>s of <c>this</c>
            </summary>
        </member>
        <member name="F:urakawa.core.CoreNode.mPresentation">
            <summary>
            The	owner	<see cref="T:urakawa.core.ICorePresentation"/>
            </summary>
        </member>
        <member name="F:urakawa.core.CoreNode.mChildren">
            <summary>
            Contains the children of the node
            </summary>
            <remarks>All items in <see cref="F:urakawa.core.CoreNode.mChildren"/> MUST be <see cref="T:urakawa.core.ICoreNode"/>s</remarks>
        </member>
        <member name="F:urakawa.core.CoreNode.mParent">
            <summary>
            The parent <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
        </member>
        <member name="M:urakawa.core.CoreNode.#ctor(urakawa.core.ICorePresentation)">
            <summary>
            Constructor	setting	the	owner	<see cref="T:urakawa.core.ICorePresentation"/>
            </summary>
            <param localName="pres">The presentation of the constructed <see cref="T:urakawa.core.CoreNode"/></param>
        </member>
        <member name="M:urakawa.core.CoreNode.getListOfUsedPropertyTypes">
            <summary>
            Gets an array of the <see cref="T:System.Type"/>s of <see cref="T:urakawa.core.property.IProperty"/> set for the <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <returns>The array</returns>
        </member>
        <member name="M:urakawa.core.CoreNode.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.core.ICorePresentation"/>	owning the <see cref="T:urakawa.core.CoreNode"/>
            </summary>
            <returns>The owner</returns>
        </member>
        <member name="M:urakawa.core.CoreNode.getProperty(System.Type)">
            <summary>
            Gets the <see cref="T:urakawa.core.property.IProperty"/> of	the	given	<see cref="T:System.Type"/>
            </summary>
            <param localName="propType">The given <see cref="T:System.Type"/></param>
            <returns>The <see cref="T:urakawa.core.property.IProperty"/> of	the	given	<see cref="T:System.Type"/>,
            <c>null</c>	if no	property of	the	given	<see cref="T:System.Type"/> has been	set</returns>
        </member>
        <member name="M:urakawa.core.CoreNode.setProperty(urakawa.core.property.IProperty)">
            <summary>
            Sets a <see cref="T:urakawa.core.property.IProperty"/>,	possible overwriting previously	set	<see cref="T:urakawa.core.property.IProperty"/>
            of the same	<see cref="T:System.Type"/>
            </summary>
            <param localName="prop">The <see cref="T:urakawa.core.property.IProperty"/> to	set. 
            If <c>null</c> is	passed,	an <see cref="T:urakawa.exception.MethodParameterIsNullException"/>	is thrown</param>
            <returns>A <see cref="T:System.Boolean"/>	indicating if	a	previously set <see cref="T:urakawa.core.property.IProperty"/>
            was	overwritten
            </returns>
        </member>
        <member name="M:urakawa.core.CoreNode.removeProperty(System.Type)">
            <summary>
            Remove a property	from the node's	properties array
            </summary>
            <param localName="propType">Specify the type	of property	to remove</param>
            <returns>The property	which	was	just removed,	or null	if it	did	not	exist</returns>
        </member>
        <member name="M:urakawa.core.CoreNode.copyChildren(urakawa.core.ICoreNode)">
            <summary>
            Copies the children of the current instance to a given destination <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <param localName="destinationNode">The destination <see cref="T:urakawa.core.CoreNode"/></param>
            <remarks>The children are copied deep and any existing children of the destination <see cref="T:urakawa.core.ICoreNode"/>
            are not removed</remarks>
        </member>
        <member name="M:urakawa.core.CoreNode.acceptDepthFirst(urakawa.core.visitor.ICoreNodeVisitor)">
            <summary>
            Accept a <see cref="T:urakawa.core.visitor.ICoreNodeVisitor"/>	in depth first mode
            </summary>
            <param localName="visitor">The	<see cref="T:urakawa.core.visitor.ICoreNodeVisitor"/></param>
        </member>
        <member name="M:urakawa.core.CoreNode.acceptBreadthFirst(urakawa.core.visitor.ICoreNodeVisitor)">
            <summary>
            Accept a <see cref="T:urakawa.core.visitor.ICoreNodeVisitor"/>	in breadth first mode
            </summary>
            <param localName="visitor">The	<see cref="T:urakawa.core.visitor.ICoreNodeVisitor"/></param>
            <remarks>HACK: Not yet implemented,	does nothing!!!!</remarks>
        </member>
        <member name="M:urakawa.core.CoreNode.acceptDepthFirst(urakawa.core.visitor.preVisitDelegate,urakawa.core.visitor.postVisitDelegate)">
            <summary>
            Visits the <see cref="T:urakawa.core.visitor.IVisitableCoreNode"/> depth first
            </summary>
            <param localName="preVisit">The pre-visit delegate - may be null</param>
            <param localName="postVisit">The post visit delegate - may be null</param>
        </member>
        <member name="M:urakawa.core.CoreNode.XUKInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of the CoreNode xml element (there are in fact none)
            </summary>
            <param localName="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the attributes were succesfully read</returns>
            <remarks>
            This method is intended to be overridden in subclasses of <see cref="T:urakawa.core.CoreNode"/> that need to store
            data in attributes of their XUK xml element
            </remarks>
        </member>
        <member name="M:urakawa.core.CoreNode.XukIn(System.Xml.XmlReader)">
            <summary>
            Reads	the	<see cref="T:urakawa.core.CoreNode"/> instance	from a CoreNode	xml	element
            <list type="table">
            <item>
            <term>Entry	state</term>
            <description>
            The	cursor of	<paramref localName="source"/>	must be	at the start of	the	CoreNode element
            </description>
            </item>
            <item>
            <term>Exit state</term>
            </item>
            <description>
            The	cursor of	 <paramref localName="source"/> must	be at	the	end	of the CoreNode	element
            </description>
            </list>
            </summary>
            <param localName="source">The <see cref="T:System.Xml.XmlReader"/> from	which	to read	the	core node</param>
            <returns>A <see cref="T:System.Boolean"/>	indicating if	the	properties were	succesfully	read</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when	<paramref localName="source"/>	is null
            </exception>
            <remarks>
            This method should be overridden in subclasses of <see cref="T:urakawa.core.CoreNode"/> if there is need to store data in 
            other XUK child elements that the standard <c>mProperties</c> and <c>mChildren</c> child elements.
            </remarks>
        </member>
        <member name="M:urakawa.core.CoreNode.XUKInProperties(System.Xml.XmlReader)">
            <summary>
            Helper function	to read	in the properties	and	invoke their respective	XUKIn	methods. 
            Reads	the	<see cref="T:urakawa.core.property.IProperty"/>s of	the	<see cref="T:urakawa.core.CoreNode"/> instance	from a mProperties xml element
            <list type="table">
            <item>
            <term>Entry	state</term>
            <description>
            The	cursor of	<paramref localName="source"/>	must be	at the start of	the	mProperties	element
            </description>
            </item>
            <item>
            <term>Exit state</term>
            </item>
            <description>
            The	cursor of	 <paramref localName="source"/> must	be at	the	end	of the mProperties element
            </description>
            </list>
            </summary>
            <remarks>If	the	mProperties	element	is empty,	the	start	and	the	end	of of	it are the nsame positions</remarks>
            <param localName="source">The <see cref="T:System.Xml.XmlReader"/> from	which	to read	the	properties</param>
            <returns>A <see cref="T:System.Boolean"/>	indicating if	the	properties were	succesfully	read</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when	the	<paramref localName="source"/>	<see cref="T:System.Xml.XmlReader"/>	is null
            </exception>
        </member>
        <member name="M:urakawa.core.CoreNode.XUKInChildren(System.Xml.XmlReader)">
            <summary>
            Reads the children of the <see cref="T:urakawa.core.CoreNode"/> from a mChildren XUK element
            </summary>
            <param localName="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the children were succesfully read</returns>
        </member>
        <member name="M:urakawa.core.CoreNode.XUKOutAttributes(System.Xml.XmlWriter)">
            <summary>
            Writes the attributes of the CoreNode element representing the instance (there are currently no attributes)
            </summary>
            <param localName="wr">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the attributes were succesfully written</returns>
            <remarks>
            This method is intended to be overridden in subclasses of <see cref="T:urakawa.core.CoreNode"/> that need to store
            data in attributes of their XUK xml element
            </remarks>
        </member>
        <member name="M:urakawa.core.CoreNode.XukOut(System.Xml.XmlWriter)">
            <summary>
            Writes the CoreNode	element	to a XUK file	representing the <see cref="T:urakawa.core.CoreNode"/>	instance
            </summary>
            <param localName="destination">The	destination	<see cref="T:System.Xml.XmlWriter"/></param>
            <returns>A <see cref="T:System.Boolean"/>	indicating the write was succesful</returns>
            <remarks>
            This method should be overridden in subclasses of <see cref="T:urakawa.core.CoreNode"/> if there is need to store data in 
            other XUK child elements that the standard <c>mProperties</c> and <c>mChildren</c> child elements.
            </remarks>
        </member>
        <member name="M:urakawa.core.CoreNode.getXukLocalName">
            <summary>
            Gets the local localName part of the QName representing a <see cref="T:urakawa.core.CoreNode"/> in Xuk
            </summary>
            <returns>The local localName part</returns>
        </member>
        <member name="M:urakawa.core.CoreNode.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName representing a <see cref="T:urakawa.core.CoreNode"/> in Xuk
            </summary>
            <returns>The namespace uri part</returns>
        </member>
        <member name="M:urakawa.core.CoreNode.indexOf(urakawa.core.ICoreNode)">
            <summary>
            Gets the index of a given child <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <param localName="node">The given child <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns>The index of the given child</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paranref localName="node"/> is null</exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="node"/> is not a child of the <see cref="T:urakawa.core.ICoreNode"/></exception>
        </member>
        <member name="M:urakawa.core.CoreNode.getChild(System.Int32)">
            <summary>
            Gets the child <see cref="T:urakawa.core.ICoreNode"/> at a given index
            </summary>
            <param localName="index">The given index</param>
            <returns>The child <see cref="T:urakawa.core.ICoreNode"/> at the given index</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="index"/> is out if range, 
            that is not between 0 and <c><see cref="M:urakawa.core.CoreNode.getChildCount"/>()-1</c></exception>
        </member>
        <member name="M:urakawa.core.CoreNode.getParent">
            <summary>
            Gets the parent <see cref="T:urakawa.core.ICoreNode"/> of the instance
            </summary>
            <returns>The parent</returns>
        </member>
        <member name="M:urakawa.core.CoreNode.getChildCount">
            <summary>
            Gets the number of children
            </summary>
            <returns>The number of children</returns>
        </member>
        <member name="M:urakawa.core.CoreNode.copy(System.Boolean,System.Boolean)">
            <summary>
            Make a copy	of the node. The copy has the same presentation and no parent.
            </summary>
            <param localName="deep">If	true,	then copy the node's	entire subtree.	 
            Otherwise, just	copy the node	itself.</param>
            <param localName="inclProperties">If true, then copy the nodes properties. 
            Otherwise, the copy has no properties</param>
            <returns>A <see cref="T:urakawa.core.CoreNode"/>	containing the copied	data.</returns>
        </member>
        <member name="M:urakawa.core.CoreNode.copy(System.Boolean)">
            <summary>
            Make a deep copy of the node. The copy has the same presentation and no parent.
            </summary>
            <param localName="deep">If	true,	then copy the node's	entire subtree.	 
            Otherwise, just	copy the node	itself.</param>
            <returns>A <see cref="T:urakawa.core.CoreNode"/>	containing the copied	data.</returns>
        </member>
        <member name="M:urakawa.core.CoreNode.copy">
            <summary>
            Make a deep copy of the node including properties. The copy has the same presentation and no parent.
            </summary>
            <returns>A <see cref="T:urakawa.core.CoreNode"/>	containing the copied	data.</returns>
        </member>
        <member name="M:urakawa.core.CoreNode.copyProperties(urakawa.core.ICoreNode)">
            <summary>
            Copies the <see cref="T:urakawa.core.property.IProperty"/>s of the current instance to a given destination <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <param localName="destinationNode">The destination <see cref="T:urakawa.core.ICoreNode"/></param>
        </member>
        <member name="M:urakawa.core.CoreNode.getNextSibling">
            <summary>
            Gets the next sibling of <c>this</c>
            </summary>
            <returns>The next sibling of <c>this</c> or <c>null</c> if no next sibling exists</returns>
        </member>
        <member name="M:urakawa.core.CoreNode.getPreviousSibling">
            <summary>
            Gets the previous sibling of <c>this</c>
            </summary>
            <returns>The previous sibling of <c>this</c> or <c>null</c> if no next sibling exists</returns>
        </member>
        <member name="M:urakawa.core.CoreNode.isSiblingOf(urakawa.core.ICoreNode)">
            <summary>
            Tests if a given <see cref="T:urakawa.core.ICoreNode"/> is a sibling of <c>this</c>
            </summary>
            <param localName="node">The given <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns><c>true</c> if <paramref localName="node"/> is a sibling of <c>this</c>, 
            otherwise<c>false</c></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="node"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.core.CoreNode.isAncestorOf(urakawa.core.ICoreNode)">
            <summary>
            Tests if a given <see cref="T:urakawa.core.ICoreNode"/> is an ancestor of <c>this</c>
            </summary>
            <param localName="node">The given <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns><c>true</c> if <paramref localName="node"/> is an ancestor of <c>this</c>, 
            otherwise<c>false</c></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="node"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.core.CoreNode.isDescendantOf(urakawa.core.ICoreNode)">
            <summary>
            Tests if a given <see cref="T:urakawa.core.ICoreNode"/> is a descendant of <c>this</c>
            </summary>
            <param localName="node">The given <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns><c>true</c> if <paramref localName="node"/> is a descendant of <c>this</c>, 
            otherwise<c>false</c></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="node"/> is <c>null</c>
            </exception>
            <remarks>This method is equivalent to <c>node.isAncestorOf(this)</c> 
            when <paramref localName="node"/> is not <c>null</c></remarks>
        </member>
        <member name="M:urakawa.core.CoreNode.insert(urakawa.core.ICoreNode,System.Int32)">
            <summary>
            Inserts a <see cref="T:urakawa.core.ICoreNode"/> child at a given index. 
            The index of any children at or after the given index are increased by one
            </summary>
            <param localName="node">The new child <see cref="T:urakawa.core.ICoreNode"/> to insert,
            must be between 0 and the number of children as returned by member method.
            Must be an instance of 
            <see cref="M:urakawa.core.CoreNode.getChildCount"/></param>
            <param localName="insertIndex">The index at which to insert the new child</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="insertIndex"/> is out if range, 
            that is not between 0 and <c><see cref="M:urakawa.core.CoreNode.getChildCount"/>()</c></exception>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="node"/> is null</exception>
            <exception cref="T:urakawa.exception.NodeNotDetachedException">
            Thrown when <paramref localName="node"/> is already attached as a child of a parent 
            </exception>
        </member>
        <member name="M:urakawa.core.CoreNode.detach">
            <summary>
            Detaches the instance <see cref="T:urakawa.core.ICoreNode"/> from it's parent's children
            </summary>
            <returns>The detached <see cref="T:urakawa.core.ICoreNode"/> (i.e. <c>this</c>)</returns>
        </member>
        <member name="M:urakawa.core.CoreNode.removeChild(System.Int32)">
            <summary>
            Removes the child at a given index. 
            </summary>
            <param localName="index">The given index</param>
            <returns>The removed child</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="index"/> is out of bounds, 
            that is not the index of a child 
            (child indexes range from 0 to <c><see cref="M:urakawa.core.CoreNode.getChildCount"/>()-1</c>)
            </exception>
        </member>
        <member name="M:urakawa.core.CoreNode.removeChild(urakawa.core.ICoreNode)">
            <summary>
            Removes a given <see cref="T:urakawa.core.ICoreNode"/> child. 
            </summary>
            <param localName="node">The <see cref="T:urakawa.core.ICoreNode"/> child to remove</param>
            <returns>The removed child</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paramref localName="node"/> is null</exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="node"/> is not a child of the instance <see cref="T:urakawa.core.ICoreNode"/></exception>
        </member>
        <member name="M:urakawa.core.CoreNode.insertBefore(urakawa.core.ICoreNode,urakawa.core.ICoreNode)">
            <summary>
            Inserts a new <see cref="T:urakawa.core.ICoreNode"/> child before the given child.
            </summary>
            <param localName="node">The new <see cref="T:urakawa.core.ICoreNode"/> child node</param>
            <param localName="anchorNode">The child before which to insert the new child</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameters <paramref localName="node"/> and/or <paramref localName="anchorNode"/> 
            have null values</exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="anchorNode"/> is not a child of the instance <see cref="T:urakawa.core.ICoreNode"/></exception>
            <exception cref="T:urakawa.exception.NodeNotDetachedException">
            Thrown when <paramref localName="node"/> is already attached as a child of a parent 
            </exception>
        </member>
        <member name="M:urakawa.core.CoreNode.insertAfter(urakawa.core.ICoreNode,urakawa.core.ICoreNode)">
            <summary>
            Inserts a new <see cref="T:urakawa.core.ICoreNode"/> child after the given child.
            </summary>
            <param localName="node">The new <see cref="T:urakawa.core.ICoreNode"/> child node</param>
            <param localName="anchorNode">The child after which to insert the new child</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameters <paramref localName="node"/> and/or <paramref localName="anchorNode"/> 
            have null values</exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="anchorNode"/> is not a child of the instance <see cref="T:urakawa.core.ICoreNode"/></exception>
            <exception cref="T:urakawa.exception.NodeNotDetachedException">
            Thrown when <paramref localName="node"/> is already attached as a child of a parent 
            </exception>
        </member>
        <member name="M:urakawa.core.CoreNode.replaceChild(urakawa.core.ICoreNode,System.Int32)">
            <summary>
            Replaces the child <see cref="T:urakawa.core.ICoreNode"/> at a given index with a new <see cref="T:urakawa.core.ICoreNode"/>
            </summary>
            <param localName="node">The new <see cref="T:urakawa.core.ICoreNode"/> with which to replace</param>
            <param localName="index">The index of the child <see cref="T:urakawa.core.ICoreNode"/> to replace</param>
            <returns>The replaced child <see cref="T:urakawa.core.ICoreNode"/></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paranref localName="node"/> is null</exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when index is out if range, 
            that is when <paramref localName="index"/> is not between 0 
            and <c><see cref="M:urakawa.core.CoreNode.getChildCount"/>()-1</c>c&gt;</exception>
            <exception cref="T:urakawa.exception.NodeNotDetachedException">
            Thrown when <paramref localName="node"/> is already attached as a child of a parent 
            </exception>
        </member>
        <member name="M:urakawa.core.CoreNode.replaceChild(urakawa.core.ICoreNode,urakawa.core.ICoreNode)">
            <summary>
            Replaces an existing child <see cref="T:urakawa.core.ICoreNode"/> with i new one
            </summary>
            <param localName="node">The new child with which to replace</param>
            <param localName="oldNode">The existing child node to replace</param>
            <returns>The replaced <see cref="T:urakawa.core.ICoreNode"/> child</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameters <paramref localName="node"/> and/or <paramref localName="oldNode"/> 
            have null values
            </exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="oldNode"/> is not a child of the instance <see cref="T:urakawa.core.ICoreNode"/></exception>
            <exception cref="T:urakawa.exception.NodeNotDetachedException">
            Thrown when <paramref localName="node"/> is already attached as a child of a parent 
            </exception>
        </member>
        <member name="M:urakawa.core.CoreNode.appendChild(urakawa.core.ICoreNode)">
            <summary>
            Appends a child <see cref="T:urakawa.core.ICoreNode"/> to the end of the list of children
            </summary>
            <param localName="node">The new child to append</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameters <paramref localName="node"/> and/or <paramref localName="oldNode"/> 
            have null values
            </exception>
            <exception cref="T:urakawa.exception.NodeNotDetachedException">
            Thrown when <paramref localName="node"/> is already attached as a child of a parent 
            </exception>
        </member>
        <member name="M:urakawa.core.CoreNode.appendChildrenOf(urakawa.core.ICoreNode)">
            <summary>
            Appends the children of a given <see cref="T:urakawa.core.ICoreNode"/> to <c>this</c>, 
            leaving the given <see cref="T:urakawa.core.ICoreNode"/> without children
            </summary>
            <param localName="node">The given <see cref="T:urakawa.core.ICoreNode"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paramref localName="node"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeInDifferentPresentationException">
            Thrown when parameter <paramref localName="node"/> belongs to a different <see cref="T:urakawa.core.ICorePresentation"/>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsAncestorException">
            Thrown when parameter <paramref localName="node"/> is an ancestor of <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsDescendantException">
            Thrown when <paramref localName="node"/> is a descendant of <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsSelfException">
            Thrown when parameter <paramref localName="node"/> is identical to <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.core.CoreNode.swapWith(urakawa.core.ICoreNode)">
            <summary>
            Swaps <c>this</c> with a given <see cref="T:urakawa.core.ICoreNode"/> 
            </summary>
            <param localName="node">The given <see cref="T:urakawa.core.ICoreNode"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paramref localName="node"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeInDifferentPresentationException">
            Thrown when parameter <paramref localName="node"/> belongs to a different <see cref="T:urakawa.core.ICorePresentation"/>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsAncestorException">
            Thrown when parameter <paramref localName="node"/> is an ancestor of <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsDescendantException">
            Thrown when <paramref localName="node"/> is a descendant of <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsSelfException">
            Thrown when parameter <paramref localName="node"/> is identical to <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeHasNoParentException">
            Thrown when <c>this</c> or <paramref name="node"/> has no parent
            </exception>
        </member>
        <member name="M:urakawa.core.CoreNode.splitChildren(System.Int32,System.Boolean)">
            <summary>
            Splits <c>this</c> at the child at a given <paramref localName="index"/>, 
            producing a new <see cref="T:urakawa.core.CoreNode"/> with the children 
            at indexes <c><paramref localName="index"/></c> to <c>getChildCount()-1</c> 
            and leaving <c>this</c> with the children at indexes <c>0</c> to <paramref localName="index"/>-1
            </summary>
            <param localName="index">The index of the child at which to split</param>
            <param localName="copyProperties">
            A <see cref="T:System.Boolean"/> indicating the <see cref="T:urakawa.core.property.IProperty"/>s of <c>this</c> 
            should be copied to the new <see cref="T:urakawa.core.ICoreNode"/>
            </param>
            <returns>
            The new <see cref="T:urakawa.core.ICoreNode"/> with the children 
            at indexes <c><paramref localName="index"/></c> to <c>getChildCount()-1</c> 
            and optionally with a copy of the <see cref="T:urakawa.core.property.IProperty"/>s
            </returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="index"/> is out of bounds, 
            that is not between <c>0</c> and <c>getChildCount()-1</c>
            </exception>
        </member>
        <member name="M:urakawa.core.CoreNode.swapWithPreviousSibling">
            <summary>
            Swaps <c>this</c> with the previous sibling of <c>this</c>
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> indicating if the swap was succesfull 
            (the swap is not succesfull when there is no previous sibling).
            </returns>
        </member>
        <member name="M:urakawa.core.CoreNode.swapWithNextSibling">
            <summary>
            Swaps <c>this</c> with the next sibling of <c>this</c>
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> indicating if the swap was succesfull 
            (the swap is not succesfull when there is no next sibling).
            </returns>
        </member>
        <member name="M:urakawa.core.CoreNode.ValueEquals(urakawa.core.ICoreNode)">
            <summary>
            Compares <c>this</c> with another given <see cref="T:urakawa.core.ICoreNode"/> to test for equality. 
            The comparison is deep in that any child <see cref="T:urakawa.core.ICoreNode"/>s are also tested,
            but the ancestry is not tested
            </summary>
            <param name="other">The other <see cref="T:urakawa.core.ICoreNode"/></param>
            <returns><c>true</c> if the <see cref="T:urakawa.core.ICoreNode"/>s are equal, otherwise <c>false</c></returns>
        </member>
        <member name="T:urakawa.properties.xml.XmlType">
            <summary>
            The possible types of <see cref="T:urakawa.properties.xml.IXmlProperty"/>s
            </summary>
        </member>
        <member name="F:urakawa.properties.xml.XmlType.ELEMENT">
            <summary>
            Element type - the <see cref="T:urakawa.properties.xml.IXmlProperty"/> represents an XML element
            </summary>
        </member>
        <member name="F:urakawa.properties.xml.XmlType.TEXT">
            <summary>
            Text type - the <see cref="T:urakawa.properties.xml.IXmlProperty"/> represents an XML text node
            </summary>
        </member>
        <member name="M:urakawa.media.data.PlainTextMediaData.getEncoding">
            <summary>
            Gets the <see cref="T:System.Text.Encoding"/> of <c>this</c>
            </summary>
            <returns>The <see cref="T:System.Text.Encoding"/></returns>
        </member>
        <member name="M:urakawa.media.data.PlainTextMediaData.setEncoding(System.Text.Encoding)">
            <summary>
            Sets the <see cref="T:System.Text.Encoding"/> of <c>this</c>
            </summary>
            <param name="enc">The new <see cref="T:System.Text.Encoding"/> - can not be <c>null</c></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="enc"/> is <c>null</c></exception>
        </member>
        <member name="M:urakawa.media.data.PlainTextMediaData.getText">
            <summary>
            Gets the text of <c>this</c>
            </summary>
            <returns>The text</returns>
        </member>
        <member name="M:urakawa.media.data.PlainTextMediaData.setText(System.String)">
            <summary>
            Sets the text of <c>this</c>
            </summary>
            <param name="newText">The text</param>
        </member>
        <member name="M:urakawa.media.data.PlainTextMediaData.ValueEquals(urakawa.media.data.IMediaData)">
            <summary>
            Determines if the value of <c>this</c> is equal to the value of another <see cref="T:urakawa.media.data.IMediaData"/>.
            The value is consideres equal if the following is <c>true</c>
            <list type="ol">
            <item>The <paramref name="other"/> <see cref="T:urakawa.media.data.IMediaData"/> is a <see cref="T:urakawa.media.data.PlainTextMediaData"/></item>
            <item>The <see cref="T:System.Text.Encoding"/> of <c>this</c> and <paramref name="other"/> have the same name</item>
            <item>The text of <c>this</c> and <paramref name="other"/> are equal</item>
            </list>
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.data.IMediaData"/></param>
            <returns><c>true</c> if the values of <c>this</c> and <paramref name="other"/> are equal</returns>
        </member>
        <member name="T:urakawa.core.property.CorePropertyFactory">
            <summary>
            Default implementation of <see cref="T:urakawa.core.property.ICorePropertyFactory"/> can not create any properties.
            Use the built-in sub-class of <see cref="T:urakawa.PropertyFactory"/> that support creation of 
            <see cref="T:urakawa.properties.channel.ChannelsProperty"/>s 
            and <see cref="T:urakawa.properties.xml.XmlProperty"/>s.
            Alternatively the user should create their own sub-class of CorePropertyFactory.
            </summary>
        </member>
        <member name="M:urakawa.core.property.CorePropertyFactory.createProperty(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.core.property.IProperty"/> matching a given QName
            </summary>
            <param localName="localName">The local part of the QName</param>
            <param localName="namespaceUri">The namespace uri part of the QName</param>
            <returns>The created <see cref="T:urakawa.core.property.IProperty"/> or <c>null</c> if the given QName is not supported
            (which is always hte case)
            </returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            
            </exception>
        </member>
        <member name="T:urakawa.metadata.Metadata">
            <summary>
            Default implementation of 
            </summary>
        </member>
        <member name="M:urakawa.metadata.Metadata.#ctor">
            <summary>
            Default constructor, Name, Content and Scheme are initialized to <see cref="F:System.String.Empty"/>
            </summary>
        </member>
        <member name="M:urakawa.metadata.Metadata.getName">
            <summary>
            Gets the name
            </summary>
            <returns>The name</returns>
        </member>
        <member name="M:urakawa.metadata.Metadata.setName(System.String)">
            <summary>
            Sets the name
            </summary>
            <param name="newName">The new name value</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="newName"/> is null
            </exception>
        </member>
        <member name="M:urakawa.metadata.Metadata.getContent">
            <summary>
            Gets the content
            </summary>
            <returns>The content</returns>
        </member>
        <member name="M:urakawa.metadata.Metadata.setContent(System.String)">
            <summary>
            Sets the content
            </summary>
            <param name="newContent">The  new content value</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="newContent"/> is null
            </exception>
        </member>
        <member name="M:urakawa.metadata.Metadata.getOptionalAttributeValue(System.String)">
            <summary>
            Gets the value of a named attribute
            </summary>
            <param name="name">The name of the attribute</param>
            <returns>The value of the attribute - <see cref="F:System.String.Empty"/> if the attribute does not exist</returns>
        </member>
        <member name="M:urakawa.metadata.Metadata.setOptionalAttributeValue(System.String,System.String)">
            <summary>
            Sets the value of a named attribute
            </summary>
            <param name="name">The name of the attribute</param>
            <param name="value">The new value for the attribute</param>
        </member>
        <member name="M:urakawa.metadata.Metadata.getOptionalAttributeNames">
            <summary>
            Gets the names of all attributes with non-empty names
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> containing the attribute names</returns>
        </member>
        <member name="M:urakawa.metadata.Metadata.XukIn(System.Xml.XmlReader)">
            <summary>
            Reads the <see cref="T:urakawa.metadata.Metadata"/> instance from a XUK Metadata element
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the instance was succesfully read</returns>
        </member>
        <member name="M:urakawa.metadata.Metadata.XukOut(System.Xml.XmlWriter)">
            <summary>
            Writes the instance to a XUK Metadata element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating success or failure</returns>
        </member>
        <member name="M:urakawa.metadata.Metadata.getXukLocalName">
            <summary>
            Gets the local name part of the QName representing a <see cref="T:urakawa.metadata.Metadata"/> in Xuk
            </summary>
            <returns>The local name part</returns>
        </member>
        <member name="M:urakawa.metadata.Metadata.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName representing a <see cref="T:urakawa.metadata.Metadata"/> in Xuk
            </summary>
            <returns>The namespace uri part</returns>
        </member>
        <member name="M:urakawa.metadata.Metadata.ValueEquals(urakawa.metadata.IMetadata)">
            <summary>
            Determines if <c>this</c> is value equal to another given <see cref="T:urakawa.metadata.IMetadata"/>
            </summary>
            <param name="other">The other <see cref="T:urakawa.metadata.IMetadata"/></param>
            <returns>The result as a <see cref="T:System.Boolean"/></returns>
        </member>
    </members>
</doc>
