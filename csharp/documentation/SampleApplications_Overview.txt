
---------------------
Urakawa Project
Sample Applications
Overview
---------------------

(A) Objectives

1) Several mini-applications.
2) Each application is stand-alone, can be compiled and run independently, to demonstrate key concepts in a particular domain of the Urakawa Data Model, or more broadly SDK.
3) Not necessarily GUI, but command-line: these samples target software programmers, so they have to showcase the programmatic .
4) At least one GUI application, e.g. to demonstrate an application of the event framework to the MVC paradigm.


(B) Main Topics

1) Metadata
2) Media (media.data.ManagedMedia)
3) XUK
4) Visitor
5) Events
6) Navigator
7) Playback
8) Recording 
9) Properties: existing (channel, xml) + extend (custom properties)
10) Undo-Redo

(C) Application Scenarios

1) Metadata
	1-a) "manually create metadata using factory + foreach metadata display in console"
		* Create Project+Presentation (empty)
		* programmatically fill Project.metadata
		* for each metadata => printout

2) Media (media.data.ManagedMedia)
	2-a) 

3) XUK
	3-a) 

4) Visitor
	4-a) "create and use a visitor to extract information from the document"
	
5) Events
	5-a) Event Listener Pattern: "register 2 TreeNode change listeners + addNode (generates 1 event) + moveNode (generates 2 events)".
	
	5-b) Event Bus Pattern: same as above.

	5-c) Event BUS with custom event type: "extend TreeNode (NamedTreeNode with mName:String, getName() setName(String)), new TreeNodeChangeEvent: TreeNodeNameChangedEvent + notify event using exiting event bus (in Presentation)"

	5-d) GUI: 2 perspectives (or "views") e.g. tree widget + other representation (extracted from tree with visitor) => showcase of MVC-like pattern.

6) Navigator
	6-a) "create filter navigator to access nodes of a specific type in the document tree, and navigate the resulting virtual document (potentially a forest of trees)"

7) Playback (POSTPONED TO AUGUST)
8) Recording  (POSTPONED TO AUGUST)

9) Properties: existing (channel, xml) + extend (custom properties)
	9-a) See Ole's code

10) Undo-Redo
	10-a) UndoRedoManager.startOperation() + UndoRedoManager.endOperation() + UndoRedoManager.cancelOperation()

* Visitor (e.g. no GUI, read XUK with text/html media in many tree nodes, visit to extract a single string for the HTML document, and print-out or serialize in UTF-8 file)
* Managed-Audio (e.g. import existing WAV files, merge, split, cleanup, save as XUK)
* XUK (e.g. custom extensions of XukAble object types with user-defined QNames in resulting XUK)
* Events (audio playback, registered listeners => output in console)
* etc.


(D) Implementation

1) VisualStudio C# Project (to facilitate debugging with the current C# SDK implementation, but later we can provide Mono scripts)

2) Romain as the prime candidate for developing these sample apps (he has a fresh and critical look on the SDK).



(E)Notes

There is already some work available here:
http://svn.sourceforge.net/viewvc/urakawa/trunk/urakawa/implementation/UrakawaToolkitExamples/
