private static void runGraphviz(String outputFolder, String packageName,
		String name, RootDoc root) {
	File dotFile = new File(outputFolder, packageName.replace(".", "/")
			+ "/" + name + ".dot");
	File pngFile = new File(outputFolder, packageName.replace(".", "/")
			+ "/" + name + ".png");
	File mapFile = new File(outputFolder, packageName.replace(".", "/")
			+ "/" + name + ".map");

	//System.err.println(dotFile.toString());
	System.err.println(pngFile.toString());
	System.err.println(mapFile.toString());

	hackDotFile(dotFile);

	/*
	Properties systemProperties = System.getProperties();
	Enumeration<Object> keys = systemProperties.keys();
	String key = null;
	String value = null;
	while (keys.hasMoreElements()) {
		key = (String) keys.nextElement();
		if (!key.equals("java.class.path")
				&& !key.equals("sun.boot.class.path")
				&& !key.equals("java.library.path")) {
			value = systemProperties.getProperty(key);
			System.err.println("[" + key + "] ==> " + value);
		}
	}
	System.err.println("[java.class.path] ==> "
			+ System.getProperty("java.class.path"));
	System.err.println("[sun.boot.class.path] ==> "
			+ System.getProperty("sun.boot.class.path"));
	System.err.println("[java.library.path] ==> "
			+ System.getProperty("java.library.path"));
			*/

	Process p = null;
	try {
		p = Runtime.getRuntime().exec(
				new String[] { "dot", "-Tcmapx", "-o",
						mapFile.getAbsolutePath(), "-Tpng", "-o",
						pngFile.getAbsolutePath(),
						dotFile.getAbsolutePath() });
	} catch (Exception e) {
		//e.printStackTrace();
		try {
			p = Runtime.getRuntime().exec(
					new String[] { "/sw/bin/dot", "-Tcmapx", "-o",
							mapFile.getAbsolutePath(), "-Tpng", "-o",
							pngFile.getAbsolutePath(),
							dotFile.getAbsolutePath() });
		} catch (Exception e2) {
			e2.printStackTrace();
			return;
		}
	}
	try {
		BufferedReader reader = new BufferedReader(new InputStreamReader(p
				.getErrorStream()));
		String line = null;
		while ((line = reader.readLine()) != null)
			root.printWarning(line);
		int result = p.waitFor();
		if (result != 0)
			root.printWarning("Errors running Graphviz on " + dotFile);
	} catch (Exception e) {
		e.printStackTrace();
	}
}


private static void hackDotFile(File dotFile) {

	System.err.println("FILE DOT: " + dotFile.toString());
	HashMap<String, String> map = new HashMap<String, String>();
	map.put("Exceptions = ", "Exceptions: ");
	map.put("align=\"right\"", "align=\"center\"");
	map.put("}Notes}", "");
	map.put("{Notes = {", "");
	map.put("node [", "node [color=\"DeepSkyBlue\",");
	map.put("edge [", "edge [color=\"DeepSkyBlue\",");
	map.put(
					"taillabel=\"\", label=\"\", headlabel=\"\", fontname=\"arialbd\", fontcolor=\"Blue\", fontsize=10.0, color=\"DeepSkyBlue\", arrowhead=open",
					"taillabel=\"\", label=\"\", headlabel=\"\", fontname=\"arialbd\", fontcolor=\"Blue\", fontsize=10.0, color=\"Gray\", arrowhead=open");
	map.put("&laquo;Initialize", "<br/> &laquo;Initialize");
	map.put("} </font", "} <br/> </font");
	map.put("laquo", "lt");
	map.put("raquo", "gt");
	Set<String> keys = map.keySet();

	String line;
	StringBuffer sb = new StringBuffer();
	try {

		FileInputStream fis = new FileInputStream(dotFile);
		BufferedReader reader = new BufferedReader(new InputStreamReader(
				fis));
		while ((line = reader.readLine()) != null) {

			Iterator<String> keyIterator = keys.iterator();

			while (keyIterator.hasNext()) {
				String key = keyIterator.next();
				String value = map.get(key);
				line = line.replace(key, value);
			}

			sb.append(line + "\n");
		}
		reader.close();
		BufferedWriter out = new BufferedWriter(new FileWriter(dotFile));
		out.write(sb.toString());
		out.close();
	} catch (Exception e) {
		e.printStackTrace();
	}
}
