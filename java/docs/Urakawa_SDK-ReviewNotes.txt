Urakawa SDK,
Object-Oriented architecture (Data Model and API),
C# reference implementation.

REMARKS:

--- 1) Comments about the implications of use of the copy() method for merge:

{
A = merge(B, C); // static function call
}

would be the equivalent of:

{
A = B.copy();
A.mergeWith(C.copy()); // object instance method call
}

=> B and C are untouched.

=> B.copy() and C.copy() are newly allocated clone instances, so we need to be careful:

C.copy() should be short-lived (the "copy" method creates a "new" object on the memory heap and returns it):

=> in C# (and Java, etc.) = quickly garbage-collected, assuming there is no external strong / weak reference to / from the instance created by the C.copy() method call.

=> in C++, we have to be more careful, because if C.copy() returns an object instance allocated with "new", we need a matching "delete":

{
A = B.copy();
D = C.copy();
A->mergeWith(D);
delete D;
}

--- 2) "new" and "virtual" C# keywords:

"virtual" never calls the 'super' method.

Daniel:
We should also be careful with operator precedence !
The "." has a higher precedence order than the "(type)" explicit cast operator (aka "explicit type promotion").

XmlProperty xmlProp;

Property prop = xmlProp;

XmlProperty xmlPropCopy = (XmlProperty)prop.copy();

...is identical to:

Property xmlPropCopy = (XmlProperty)(prop.copy());

but different than:

Property xmlPropCopy = ((XmlProperty)prop).copy();

Only the above line of code return the correct xmlPropCopy.

It is interesting to note that it would work with interfaces:

iProperty prop = xmlProp;
(XmlProperty)prop.copy();

or:

(XmlProperty)((iProperty)prop).copy();

This is how interfaces should be used: not to infer / coerce a type, but to narrow the scope in the set of methods that define public interface to the type.

-------------------------------------------------------------------------


32) Discuss the metadata current design => is it generic enough for RDF, etc., or is it bound with XHTML ?
RELATED => Metadata add LocalName + Namespace support + "optionalAttribute" should simply be "attribute"
** Daniel: DONE (but to discuss)
** Ole: TODO

40) add Project.cleanup() (calls Presentations.cleanup())
** Daniel: DONE
** Ole: TODO

55) TreeNode.setAudioMedia(audioMedia),
TreeNode.setTextMedia(textMedia) => convenience (default channels for these media types, automatic creation of all required stuff: ChannelsProperty, AudioChannel registration to ChannelManager)
AudioChannel ChannelManager.set/getDefaultAudioChannel(c)
TextChannel ChannelManager.set/getDefaultTextChannel(c)
** Ole: TODO
** Daniel: TODO

61) DataModelFactory.cs => add throw MethodParameterIsNullException, MethodParameterIsEmptyStringException
** Ole: TODO
** Daniel: DONE