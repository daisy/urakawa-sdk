Urakawa SDK
Review Notes for both the design and the C# implementation.

Last modification by Daniel WECK on 11 June 2007

1) Global review of method visibility/accessibility (new, override, virtual, final, abstract, etc...).

2) Use exception(s) instead of returning boolean for XukIn / XukOut methods (update: Ole has implemented a solution, Daniel needs to check it and write the generic equivalent in the data model API)

3) Make the getXukLocalName()/getXukNamespaceUri() methods static (as their result is fixed per object type)

4) Use QName in addition to the separate localName / namespaceURI methods.

5) Check the GenericPropertyFactory: there should be a default implementation, for creating a generic Property object (that does not require to be extended).

6) Verify the mergeWith, split and copy-clipped methods, on AudioMediaData (or its direct container ManagedAudioMedia), on WavClip, and with different return types (Stream, AudioMediaData, etc.).

7) Check the status of the export and import functionality to deal with wav/mp3 files.

8) Suggestion: convenience factory createXXX() methods on Presentation, rather than having to query with getXXFactory() first.

9) The "FormatTime_*" utility functions from Obi could go in the SDK's "Time" object type, or at least in the "time" package.

10) In the C# implementation, why no register/unregister of event listeners ?

11) Typo in C# implementation:
public class FileDataProvider : IDataProvider
getDataFileRealtivePath()
=> should be "relative"

12) in FileDataProviderManager
appendDataToProvider() is static: should go in utilities ? (currently not in design)
compareDataProviderContent() same as above.

13) in FileDataProviderManager
detachDataProvider(IDataProvider provider) implementation incomplete (does not actually remove)

14) in (i)XukAble:
currently, only public XukIn() and XukOut().
how about XukInAttributes, XukInChild, XukOutAttributes, XukOutChildren (virtual ok in implementation, but how about design ? Should they be part of the public facade API, are they generic enough to apply to any XML parser/writer ?)

15) in (i)XukAble:
What is the difference between "Child" and "Children" in XukInChild and XukOutChildren ?

16) in media.data.utilites
== implementation-specific and therefore not in design.
e.g. : let's say Clip.cs is special to C#, so C++ impl. would not use:
protected class WavClip : Clip, IValueEquatable<WavClip>.
if WavClip is in XUK, it needs to be in design (?)

17) new package hierarchy: urakawa.media.data.audio.codec instead of urakawa.media.data.codec.audio
urakawa.media.data.audio now contains some audio-specific stuff that should not be mixed with generic stuff in urakawa.media.data